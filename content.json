{"meta":{"title":"Yumuのblog","subtitle":null,"description":"日常，bug，demo，磕代码","author":"yumuの笔记","url":"","root":"/"},"pages":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}],"posts":[{"title":"学习记录","date":"2019-10-21T03:11:18.000Z","path":"2019/10/21/record/","text":"点击页面左下方，在页面右边显示文章目录。 文件权限rwx 1 2 4 d rwx r_x r_x d文件目录 rwx文件所有者 r_x文件所属组 r_x其他人 chmod更改权限 chomd 755 idnex.txt sql变量系统变量{全局变量(global) 会话变量(session)}自定义变量{局部变量 用户(赋值)变量}全局级别加global，会话界别加session，不加默认session show variables;优先显示会话级变量的值，如果不存在，则显示全局级变量的值 查看所有的系统变量 :show global variables; 查看满足条件的部分系统变量：show variables like ‘%char%’ 查看指定的某个系统变量值：select 系统变量名 为系统变量赋值 eg: set autocommit=0; 用户变量 赋值 set @sum=10; set @sum:=10; 局部变量 声明 declare sum int(20); declare sum int default 10; ​ 赋值 set sum=10; select @sum:=10; sql函数avg()平均值 count()返回行数 MAX() MIN() SUM() select site from t2019 order by site asc limit 1; select site from t2019 order by site desc limit 1; HAVING 字句 having sum(money)&gt;1000; UPPER()字段值转大写显示 LOWER()字段值转小写显示 MID() select MID(remarks,1,3) from t2019; remarks字段的第一位到第三位 LEN() 字段值长度 ROUND() 字段值舍入为指定的小数位数 select ROUND(1.255); =&gt;1 ​ select ROUND(money,3) from t2019;=&gt;500.12 500.120 NOW()当前系统日期和时间 FORMAT()格式化字段显示 eg：select data_format(now(),’%Y-%m’) from t2019; sql快速参考xi：https://www.runoob.com/sql/sql-quickref.html 正则表达式《正则表达式30分钟入门》 https://deerchao.cn/tutorials/regex/regex.htm 正向预查(?=)满足前面的表达式 eg: /\\b[/w]+(?=ing\\b)/g/匹配全局带ing的单词，但是不要ing 反向预查(?&lt;=)满足后面的表达式 eg:/(?&lt;=index\\.ts)/ 匹配以.ts结尾 ,左边是index \\g 全局匹配 . 匹配除换行符外的任意字符 \\w匹配字母，数字，下划线 \\W 匹配非字母 数字 下划线 汉字的字符 \\d匹配数字 \\D 匹配非数字的字符 \\b匹配单词的边界 \\B 匹配不是单词开头或结束的位置 ^匹配字符串的开始 [^x] 匹配除了x 以外的任意字符 \\S 匹配任意不是空白符的字符 $ 匹配字符串的结束 \\ 取消字符的特殊意义 +重复一次或多次 *重复0次或多次 ？重复0次或1次 {n}重复n次 {n,}重复n次或多次 {n,m}重复n到m次 | 或 eg: \\ba\\w\\b \\b开始 a，任意(0或更多)数量的字母或数字(\\w\\) \\b结束 \\d+ 匹配一个或更多连续的数字(+一次或更多，*0次或更多) \\b\\w{6}\\b 匹配刚好6个字符的单词 ^\\d{5,12}}$ 匹配5-12位的数字 \\(?0\\d{2}[) -]?\\d{8} \\转义字符，（左括号能出现0/1次,跟一个0，两个数字，右括号)空格-出现0/1次，八位数字 贪婪与懒惰 以下均为“尽可能少重复” *？ 重复任意次 +？ 重复一次或更多次 ？？ 重复0次或1次 {n,m}？重复n-m次 {n,}? 重复n次以上 eg： a.*b 匹配最长的以a开始，b结束的字符串 ​ a.*?b 匹配最短的以a开始，b结束的字符串 嘻嘻：\\a 报警字符(打印时，电脑嘀一声) 尾调用优化尾调用：在函数的最后一步是直接返回调用另一个函数 优化：在函数A的内部调用函数B 在A的调用记录上方，会形成一个B的调用记录，等到B的运行结束，将结果返回A，B的调用记录消失。(确保函数的最后一步只调用自身) 所有的调用记录形调用栈 eg: 复杂度O(n) function f(){ ​ if(n===1) return 1; ​ return n*f(n-1); } 复杂度O(1) function f(n,total=1){ ​ if(n==1) return total; ​ return f(n-1,n*total) } mocha覆盖率%stmts %Branch % Funcs %Lines 语句覆盖率 分之覆盖率 函数覆盖率 行覆盖率 （最弱覆盖） （最全） 递归和迭代的转化 区别 版本号主版本号 次版本号 修订号 先行版本号 版本编译元数据(不在优先级比较的列表中) ​ X Y Z X 当API的兼容性变化时，递增 Y 增加功能，不影响API的兼容性，递增 Z Bug修复，不影响API兼容性，递增 ^主版本号不变 ^1.2.3==&gt;1.2.3&lt;=版本号&lt;2.0.0 1.x.x ~主次不变 ~1.2.3==&gt;1.2.3&lt;=版本号&lt;1.3.0 1.2.x SQL自定义函数delimiter // create function countSum(id int) return int(11) ​ DETERMINISTIC begin ​ declare temp int; ​ select count(*) into temp from t2019 where site=id; ​ return temp; end // **deterministic 临时表 派生表临时表内部临时表（MySQL自动创建） 外部临时表（create temporary table） 派生表查询结果生成的表 ，类似于临时表 select * from (select * from others) temp; temp即派生表 事件循环事务 乐观锁 悲观锁①事务START TRANSACTION; COMMIT;/ROLLBACK; ②悲观锁 乐观锁乐观锁 update tb set version=version+1 where version=version 在写操作频繁的场景下会不断发生重试，也会影响吞吐量 悲观锁 set autocommit=0 (不允许自动提交) ​ 用for update给每行数据加排他锁 (使用条件:InnoDB，BEGIN/COMMIT) ​ 1)根据主键进行查询，查询到数据，主键字段产生行锁 (只是查询的那个字段的数据产生锁，查询这个字段的其他数据不会产生锁) ​ 2)没有查询到数据，不产生锁 ​ 3)根据主键，非主键含索引进行查询，查询到数据，主键字段产生行锁，非主键字段产生表锁（非主键字段的所有数据都会有锁） ​ 4)…. sequelize加排它锁 await Accounts.findOne({ where: { name: ‘HelKyle’ }, lock: Sequelize.Transaction.LOCK.UPDATE}); tcp/ip https://blog.csdn.net/u012371712/article/details/80795297 五层：应用层 传输层 网络层 连接层 物理层 请求方式get put post delete post时，填写参数 ，返回参数ctx.request.query content-typeapplication/json 消息主体是 序列化后的JSON字符串 application/x-www-form-urlencoded 数据被编码为名称/值对。这是标准的编码格式 multipart/form-data 需要在表单中进行文件上传时，使用。 text/plain 数据以纯文本形式(text/json/xml/html)进行编码，不含任何控件或格式字符 string.split arr.joinstring.split(“*”) 字符串转数组 以星号作分割依据 arr.join(“*”) 数组转字符串 用星号作连接 索引索引 唯一索引：查到符合条件的继续查找下一项，如果下一项不符合再返回 普通索引：查到符合条件的项后直接返回 创建索引 create index sy1 on t2019(site); 添加索引 alter table t2019 add index sy2(money); 创建表时直接指定 create table t2019( ​ site int not null, ​ INDEX [sy3] (site] ) 删除索引 drop index [sy1] on t2019; 唯一索引 create unique index sy4 on t2019 (site) sequelize事务，加锁t1 //is a transaction Model.findAll({ where:...},{ ​ transaction: t1, //**注意 ​ lock: t1.LOCK.UPDATE, //**注意 ​ lock: t1.LOCK.SHARE }) 与 或 异或 左移 右移(按二进制位进行运算)与 &amp; 同1为1，否则为0 或 | 有1则1 异或 ^ 相同为1，不同为0 左移 &lt;&lt; 左移，移出位丢弃，右边的空位补0 右移 &gt;&gt; 右移，移出位丢弃，左边的空位补0 node apipath.normalize(path)规范化path path.join([…paths])使用平台特定的分隔符把全部给定的 path 片段连接到一起，并规范 path.resolve([…paths])把路径解析为一个绝对路径 队列 BFS DFS队列 FIFO BFS应用场景：遍历和找出最短路径 栈 LIFO https://leetcode-cn.com/explore/learn/card/queue-stack/218/stack-last-in-first-out-data-structure/875/ Number.MAX_SAFE_INTEGER Number.MAX_VALUENumber.MAX_SAFE_INTEGER 9007199254740991 小于该值能精确表示 Number.MAX_VALUE 1.7976931348623157e+308 大于该值得到的是Infinity，介于Infinity和安全值之间的无法精确表示 mocha主要apidescribe(name,fn) 定义一组测试 it(name,fn) 定义一项测试 第三方断言库assert，chai const assert = require(‘assert’) 钩子函数(在用例集/用例函数开始执行之前/结束执行之后，进行一些环境准备或者环境清理的工作) before() 在本区块 所有测试用例 开始之前执行 after() 在本区块 所有测试用例 结束之后（所有）执行 beforeEach() 在本区块 每个测试用例 开始之前执行 afterEach() 在本区块 每个测试用例 结束之后执行 例子： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879describe('top', function () &#123; before(function () &#123; console.log('top before') &#125;) after(function () &#123; console.log('top after') &#125;) beforeEach(function () &#123; console.log('top beforeEach') &#125;) afterEach(function () &#123; console.log('top afterEach') &#125;) it('test1', function () &#123; console.log('top test1') &#125;) describe('sublevel', function () &#123; before(function () &#123; console.log('sublevel before') &#125;) after(function () &#123; console.log('sublevel after') &#125;) beforeEach(function () &#123; console.log('sublevel beforeEach') &#125;) afterEach(function () &#123; console.log('sublevel afterEach') &#125;) it('test1', function () &#123; console.log('sublevel test1') &#125;) it('test2', function () &#123; console.log('sublevel test2') &#125;) &#125;) it('test2', function () &#123; console.log('top test2') &#125;)&#125;) 运行结果： 1234567891011121314151617181920212223242526272829 toptop beforetop beforeEachtop test1 √ test1top afterEachtop beforeEachtop test2 √ test2top afterEach sublevelsublevel beforetop beforeEachsublevel beforeEachsublevel test1 √ test1sublevel afterEachtop afterEachtop beforeEachsublevel beforeEachsublevel test2 √ test2sublevel afterEachtop afterEachsublevel aftertop after 4 passing (12ms) ~~ 取反 再取反~ 不超过32位时可以用 ~ 达到Math.floor的效果 按位取反，变回原操作数，但是省略了小数部分 桶排序先找出桶中最大值最小值max min 按照桶的个数num，给5 桶的大小 size=(max-min+1)/num 桶 buckets = new Array(num*2) 初始化桶buckets[i]=[] 分配数据到桶（按照数据值的分布来匹配，(arr[i]-min)/size） 对每个桶进行排序 process.argvprocess.argv[0] 启动node.js进程的可执行文件的所在绝对路径 process.argv[1] 正在执行的js文件的路径 其他元素将是任何其他命令行的参数 git提交冲突git提交冲突先切一个分支feature 操作操作 git add . git commit -m “操作操作” git push origin master=&gt;报错，冲突 git co dev git pull git co feature git rebase dev 手动解决冲突 git co dev git merge –no-ff feature git push origin dev 最后删掉这个分支feature 二分查找123456789101112131415161718function binarySearch(arr,target)&#123; let start =0 let end=arr.length-1; while(start&lt;=end)&#123; let mid=parseInt(start+(end-start)/2) if(target==arr[mid]) &#123; return mid &#125; else if(target&gt;arr[mid])&#123; start=mid+1 &#125; else&#123; end=mid-1 &#125; &#125; return -1&#125; Math.ceil(1.6) 2 Math.floor(1.6) 1","raw":"---\ntitle: 学习记录\nurl: 12.html\nid: 12\ncategories:\n  - A coin a day\ndate: 2019-10-21 11:11:18\ntoc: true\n---\n\n<!--more-->\n点击页面左下方，在页面右边显示文章目录。\n\n#### ![](http://l.yumud.com/note_.png)文件权限 \n\nrwx 1 2 4\n\nd rwx r_x r_x\n\nd文件目录\n\nrwx文件所有者\n\nr_x文件所属组\n\nr_x其他人\n\nchmod更改权限 chomd 755 idnex.txt\n\n#### ![](http://l.yumud.com/note_.png)sql变量\n\n##### 系统变量{全局变量(global) 会话变量(session)}  \n\n##### 自定义变量{局部变量 用户(赋值)变量}\n\n\n\n<u>*全局级别加global，会话界别加session，不加默认session*</u>\n\nshow variables;优先显示会话级变量的值，如果不存在，则显示全局级变量的值\n\n查看所有的系统变量 :show global variables;\n\n查看满足条件的部分系统变量：show  variables like ‘%char%’\n\n查看指定的某个系统变量值：select 系统变量名\n\n为系统变量赋值 eg: set autocommit=0;\n\n\n\n用户变量 赋值 set @sum=10; set @sum:=10;\n\n局部变量 声明 declare sum int(20); declare sum int default 10;\n\n​                 赋值 set sum=10; select @sum:=10;\n\n#### ![](http://l.yumud.com/note_.png)sql函数\n\navg()平均值\n\ncount()返回行数\n\nMAX()\n\nMIN()\n\nSUM()\n\n<!--first()返回第一个记录的值--> select site from t2019  order by site asc limit 1;\n\n<!--last()返回最后一个记录的值-->select site from t2019  order by site desc limit 1;\n\nHAVING 字句  having sum(money)>1000;\n\nUPPER()字段值转大写显示\n\nLOWER()字段值转小写显示\n\nMID()  select MID(remarks,1,3) from t2019; remarks字段的第一位到第三位\n\nLEN() 字段值长度\n\nROUND() 字段值舍入为指定的小数位数  select ROUND(1.255); =>1\n\n​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  select ROUND(money,3) from t2019;=>500.12  500.120\n\nNOW()当前系统日期和时间\n\nFORMAT()格式化字段显示 eg：select data_format(now(),'%Y-%m') from t2019;\n\n sql快速参考xi：https://www.runoob.com/sql/sql-quickref.html \n\n#### ![](http://l.yumud.com/note_.png)正则表达式\n\n《正则表达式30分钟入门》 https://deerchao.cn/tutorials/regex/regex.htm \n\n正向预查(?=)满足**前面**的表达式  eg: /\\b[/w]+(?=ing\\b)/g/匹配全局带ing的单词，但是不要ing\n\n反向预查(?<=)满足**后面**的表达式 eg:/(?<=index\\\\\\.ts)/ 匹配以.ts结尾 ,左边是index\n\n\\g 全局匹配\n\n. 匹配除换行符外的任意字符\n\n\\w匹配字母，数字，下划线     \\W 匹配非字母 数字 下划线 汉字的字符\n\n\\d匹配数字                                 \\D 匹配非数字的字符\n\n\\b匹配单词的边界\t\t\t\t\t \\B 匹配不是单词开头或结束的位置\n\n^匹配字符串的开始  \t\t\t\t \\[^x] 匹配除了x 以外的任意字符    \\S 匹配任意不是空白符的字符\n\n$ 匹配字符串的结束\n\n\\ 取消字符的特殊意义\n\n+重复一次或多次\n\n*重复0次或多次\n\n？重复0次或1次\n\n{n}重复n次\n\n{n,}重复n次或多次\n\n{n,m}重复n到m次\n\n| 或\n\neg:\n\n\\ba\\w*\\b   \\b开始  a，任意(0或更多)数量的字母或数字(\\w\\*) \\b结束\n\n\\d+ 匹配一个或更多连续的数字(+一次或更多，*0次或更多)\n\n\\b\\w{6}\\b 匹配刚好6个字符的单词\n\n^\\d{5,12}}$ 匹配5-12位的数字 \n\n\\\\(?0\\d{2}[) -]?\\d{8}  \\转义字符，（左括号能出现0/1次,跟一个0，两个数字，右括号)空格-出现0/1次，八位数字\n\n**贪婪与懒惰**\n\n以下均为“尽可能少重复”\n\n*？     重复任意次\n\n+？     重复一次或更多次\n\n？？   重复0次或1次\n\n{n,m}？重复n-m次\n\n{n,}?      重复n次以上\n\neg： a.*b  匹配最长的以a开始，b结束的字符串\n\n​\t\t a.*?b 匹配最短的以a开始，b结束的字符串\n\n嘻嘻：\\a 报警字符(打印时，电脑嘀一声)\n\n#### ![](http://l.yumud.com/note_.png)尾调用优化\n\n尾调用：在函数的最后一步是直接返回调用另一个函数\n\n优化：在函数A的内部调用函数B  在A的调用记录上方，会形成一个B的调用记录，等到B的运行结束，将结果返回A，B的调用记录消失。(确保函数的最后一步只调用自身)\n\n所有的调用记录形调用栈\n\neg:\n\n复杂度O(n)\n\nfunction f(){\n\n​\tif(n===1) return 1;\n\n​\treturn n*f(n-1);\n\n}\n\n复杂度O(1)\n\nfunction f(n,total=1){\n\n​\tif(n==1) return total; \n\n​\treturn f(n-1,n*total)\n\n}\n\n#### ![](http://l.yumud.com/note_.png)mocha覆盖率\n\n%stmts %Branch % Funcs %Lines\n\n语句覆盖率 分之覆盖率 函数覆盖率 行覆盖率\n\n（最弱覆盖）                                      （最全）\n\n#### ![](http://l.yumud.com/note_.png)递归和迭代的转化 区别\n\n![1571377276911](http://l.yumud.com/1571377276911.png)\n\n<!--(借用了别人借用的图)-->\n\n#### ![](http://l.yumud.com/note_.png)版本号\n\n主版本号  次版本号  修订号  先行版本号  版本编译元数据(不在优先级比较的列表中)\n\n​      X               Y               Z\n\nX 当API的兼容性变化时，递增\n\nY 增加功能，不影响API的兼容性，递增\n\nZ Bug修复，不影响API兼容性，递增\n\n^主版本号不变  ^1.2.3==>1.2.3<=版本号<2.0.0     1.x.x\n\n~主次不变         ~1.2.3==>1.2.3<=版本号<1.3.0      1.2.x\n\n#### ![](http://l.yumud.com/note_.png)SQL自定义函数\n\ndelimiter //\n\ncreate function countSum(id int) return int(11)\n\n​\tDETERMINISTIC\n\nbegin\n\n​\tdeclare temp int;\n\n​\tselect count(*) into temp from t2019 where site=id;\n\n​\treturn temp; \n\nend\n\n//\n\n**deterministic\n\n#### ![](http://l.yumud.com/note_.png)临时表 派生表\n\n##### 临时表 \n\n内部临时表（MySQL自动创建） 外部临时表（create temporary table）\n\n##### 派生表\n\n查询结果生成的表 ，类似于临时表\n\nselect * from (select * from others) temp;   temp即派生表\n\n#### ![](http://l.yumud.com/note_.png)事件循环\n\n#### ![](http://l.yumud.com/note_.png)事务 乐观锁 悲观锁\n\n##### ①事务\n\nSTART TRANSACTION;\n\nCOMMIT;/ROLLBACK;\n\n##### ②悲观锁 乐观锁\n\n乐观锁 update tb set version=version+1 where version=version    在写操作频繁的场景下会不断发生重试，也会影响吞吐量\n\n悲观锁 set autocommit=0 (不允许自动提交)\n\n​\t用for update给每行数据加排他锁 (使用条件:InnoDB，**BEGIN/COMMIT**)\n\n​\t1)根据主键进行查询，查询到数据，主键字段产生行锁 (只是查询的那个字段的数据产生锁，查询这个字段的其他数据不会产生锁)\n\n​    2)没有查询到数据，不产生锁\n\n​    3)根据主键，非主键含索引进行查询，查询到数据，主键字段产生行锁，非主键字段产生表锁（非主键字段的所有数据都会有锁）\n\n​\t4)....\n\nsequelize加排它锁\n\nawait Accounts.findOne({\n    where: { name: 'HelKyle' },\n    lock: Sequelize.Transaction.LOCK.UPDATE\n});\n\n#### ![](http://l.yumud.com/note_.png)tcp/ip\n\n https://blog.csdn.net/u012371712/article/details/80795297 \n\n![1571379820232](http://l.yumud.com/1571379820232.png)\n\n五层：应用层  传输层 网络层  连接层 物理层\n\n#### ![](http://l.yumud.com/note_.png)请求方式\n\nget put post delete\n\npost时，填写参数  ，返回参数ctx.request.query\n\n#### ![](http://l.yumud.com/note_.png)content-type\n\napplication/json  消息主体是 序列化后的JSON字符串\n\napplication/x-www-form-urlencoded  数据被编码为名称/值对。这是标准的编码格式\n\nmultipart/form-data   需要在表单中进行文件上传时，使用。\n\ntext/plain  数据以纯文本形式(text/json/xml/html)进行编码，不含任何控件或格式字符\n\n#### ![](http://l.yumud.com/note_.png)string.split arr.join\n\nstring.split(\"*\") 字符串转数组 以星号作分割依据\n\narr.join(“*”) 数组转字符串  用星号作连接\n\n#### ![](http://l.yumud.com/note_.png)索引\n\n索引\n\n唯一索引：查到符合条件的继续查找下一项，如果下一项不符合再返回\n\n普通索引：查到符合条件的项后直接返回\n\n创建索引\n\ncreate index sy1 on t2019(site);\n\n添加索引\n\nalter table t2019 add index sy2(money);\n\n创建表时直接指定\n\ncreate table t2019(\n\n​\tsite int not null,\n\n​\tINDEX [sy3] (site]\n\n)\n\n删除索引\n\ndrop index [sy1] on t2019;\n\n唯一索引\n\ncreate unique index sy4 on t2019 (site)\n\n#### ![](http://l.yumud.com/note_.png)sequelize事务，加锁\n\nt1 //is a transaction\n\nModel.findAll({\n\n \twhere:...\n\n},{\n\n​\ttransaction: t1,  //**注意\n\n​\tlock: t1.LOCK.UPDATE,   //**注意\n\n​\tlock: t1.LOCK.SHARE\n\n})\n\n#### ![](http://l.yumud.com/note_.png)与 或 异或  左移 右移(按二进制位进行运算)\n\n与 &  同1为1，否则为0\n\n或 |  有1则1\n\n异或 ^  相同为1，不同为0\n\n左移 <<  左移，移出位丢弃，右边的空位补0\n\n右移 >>  右移，移出位丢弃，左边的空位补0\n\n#### ![](http://l.yumud.com/note_.png)node api\n\npath.normalize(path)规范化path\n\npath.join([...paths])使用平台特定的分隔符把全部给定的 path 片段连接到一起，并规范\n\npath.resolve([...paths])把路径解析为一个绝对路径\n\n#### ![](http://l.yumud.com/note_.png)队列 BFS DFS \n\n队列 FIFO\n\nBFS应用场景：遍历和找出最短路径\n\n栈 LIFO\n\n https://leetcode-cn.com/explore/learn/card/queue-stack/218/stack-last-in-first-out-data-structure/875/ \n\n#### ![](http://l.yumud.com/note_.png)Number.MAX_SAFE_INTEGER      Number.MAX_VALUE\n\nNumber.MAX_SAFE_INTEGER   9007199254740991 小于该值能精确表示\n\nNumber.MAX_VALUE   1.7976931348623157e+308  大于该值得到的是Infinity，介于Infinity和安全值之间的无法精确表示\n\n#### ![](http://l.yumud.com/note_.png)mocha\n\n##### 主要api\n\ndescribe(name,fn) 定义一组测试\n\nit(name,fn)              定义一项测试\n\n##### 第三方断言库\n\nassert，chai\n\nconst assert = require('assert')\n\n##### 钩子函数    \n\n(在用例集/用例函数开始执行之前/结束执行之后，进行一些环境准备或者环境清理的工作)\n\nbefore()  在本区块 **所有测试用例** 开始之前执行\n\nafter()     在本区块 **所有测试用例** 结束之后（所有）执行\n\nbeforeEach()    在本区块 **每个测试用例** 开始之前执行\n\nafterEach()        在本区块 **每个测试用例** 结束之后执行\n\n例子：\n\n```javascript\ndescribe('top', function () {\n\n before(function () {\n\n  console.log('top before')\n\n })\n\n after(function () {\n\n  console.log('top after')\n\n })\n\n beforeEach(function () {\n\n  console.log('top beforeEach')\n\n })\n\n afterEach(function () {\n\n  console.log('top afterEach')\n\n })\n\n it('test1', function () {\n\n  console.log('top test1')\n\n })\n\n describe('sublevel', function () {\n\n  before(function () {\n\n   console.log('sublevel before')\n\n  })\n\n  after(function () {\n\n   console.log('sublevel after')\n\n  })\n\n  beforeEach(function () {\n\n   console.log('sublevel beforeEach')\n\n  })\n\n  afterEach(function () {\n\n   console.log('sublevel afterEach')\n\n  })\n\n  it('test1', function () {\n\n   console.log('sublevel test1')\n\n  })\n\n  it('test2', function () {\n\n   console.log('sublevel test2')\n\n  })\n\n })\n\n it('test2', function () {\n\n  console.log('top test2')\n\n })\n\n})\n\n\n```\n\n运行结果：\n\n```\n  top\ntop before\ntop beforeEach\ntop test1\n    √ test1\ntop afterEach\ntop beforeEach\ntop test2\n    √ test2\ntop afterEach\n    sublevel\nsublevel before\ntop beforeEach\nsublevel beforeEach\nsublevel test1\n      √ test1\nsublevel afterEach\ntop afterEach\ntop beforeEach\nsublevel beforeEach\nsublevel test2\n      √ test2\nsublevel afterEach\ntop afterEach\nsublevel after\ntop after\n\n\n  4 passing (12ms)\n```\n\n#### ![](http://l.yumud.com/note_.png)~~ 取反 再取反\n\n~~  不超过32位时可以用 ~~ 达到Math.floor的效果\n\n~按位取反，~~变回原操作数，但是省略了小数部分\n\n#### ![](http://l.yumud.com/note_.png)桶排序\n\n先找出桶中最大值最小值max min\n\n按照桶的个数num，给5\n\n桶的大小 size=(max-min+1)/num\n\n桶 buckets = new Array(num*2)\n\n初始化桶buckets[i]=[]\n\n分配数据到桶（按照数据值的分布来匹配，(arr[i]-min)/size）\n\n对每个桶进行排序\n\n#### ![](http://l.yumud.com/note_.png)process.argv\n\nprocess.argv[0] 启动node.js进程的可执行文件的所在绝对路径\n\nprocess.argv[1] 正在执行的js文件的路径\n\n其他元素将是任何其他命令行的参数\n\n![eg](http://l.yumud.com/record_process_argv.png)\n\n#### ![](http://l.yumud.com/note_.png)git提交冲突\n\n##### git提交冲突\n\n先切一个分支feature\n\n操作操作\n\ngit add .\n\ngit commit -m \"操作操作\"\n\ngit push origin master=>报错，冲突\n\ngit co dev\n\ngit pull \n\ngit co feature \n\ngit rebase dev  \n\n手动解决冲突\n\ngit co dev\n\ngit merge --no-ff feature\n\ngit push origin dev\n\n最后删掉这个分支feature\n\n#### ![](http://l.yumud.com/note_.png)二分查找\n\n```js\nfunction binarySearch(arr,target){\n  let start =0\n  let end=arr.length-1;\n  while(start<=end){\n      let mid=parseInt(start+(end-start)/2)\n      if(target==arr[mid])\n      {\n          return mid\n      }\n      else if(target>arr[mid]){\n          start=mid+1\n      }\n      else{\n          end=mid-1\n      }\n  }\n  return -1\n} \n```\nMath.ceil(1.6)  2\n\nMath.floor(1.6)  1\n","content":"<a id=\"more\"></a>\n<p>点击页面左下方，在页面右边显示文章目录。</p>\n<h4 id=\"文件权限\"><a href=\"#文件权限\" class=\"headerlink\" title=\"文件权限\"></a><img src=\"http://l.yumud.com/note_.png\" alt>文件权限</h4><p>rwx 1 2 4</p>\n<p>d rwx r_x r_x</p>\n<p>d文件目录</p>\n<p>rwx文件所有者</p>\n<p>r_x文件所属组</p>\n<p>r_x其他人</p>\n<p>chmod更改权限 chomd 755 idnex.txt</p>\n<h4 id=\"sql变量\"><a href=\"#sql变量\" class=\"headerlink\" title=\"sql变量\"></a><img src=\"http://l.yumud.com/note_.png\" alt>sql变量</h4><h5 id=\"系统变量-全局变量-global-会话变量-session\"><a href=\"#系统变量-全局变量-global-会话变量-session\" class=\"headerlink\" title=\"系统变量{全局变量(global) 会话变量(session)}\"></a>系统变量{全局变量(global) 会话变量(session)}</h5><h5 id=\"自定义变量-局部变量-用户-赋值-变量\"><a href=\"#自定义变量-局部变量-用户-赋值-变量\" class=\"headerlink\" title=\"自定义变量{局部变量 用户(赋值)变量}\"></a>自定义变量{局部变量 用户(赋值)变量}</h5><p><u><em>全局级别加global，会话界别加session，不加默认session</em></u></p>\n<p>show variables;优先显示会话级变量的值，如果不存在，则显示全局级变量的值</p>\n<p>查看所有的系统变量 :show global variables;</p>\n<p>查看满足条件的部分系统变量：show  variables like ‘%char%’</p>\n<p>查看指定的某个系统变量值：select 系统变量名</p>\n<p>为系统变量赋值 eg: set autocommit=0;</p>\n<p>用户变量 赋值 set @sum=10; set @sum:=10;</p>\n<p>局部变量 声明 declare sum int(20); declare sum int default 10;</p>\n<p>​                 赋值 set sum=10; select @sum:=10;</p>\n<h4 id=\"sql函数\"><a href=\"#sql函数\" class=\"headerlink\" title=\"sql函数\"></a><img src=\"http://l.yumud.com/note_.png\" alt>sql函数</h4><p>avg()平均值</p>\n<p>count()返回行数</p>\n<p>MAX()</p>\n<p>MIN()</p>\n<p>SUM()</p>\n<!--first()返回第一个记录的值--> select site from t2019  order by site asc limit 1;\n\n<!--last()返回最后一个记录的值-->select site from t2019  order by site desc limit 1;\n\n<p>HAVING 字句  having sum(money)&gt;1000;</p>\n<p>UPPER()字段值转大写显示</p>\n<p>LOWER()字段值转小写显示</p>\n<p>MID()  select MID(remarks,1,3) from t2019; remarks字段的第一位到第三位</p>\n<p>LEN() 字段值长度</p>\n<p>ROUND() 字段值舍入为指定的小数位数  select ROUND(1.255); =&gt;1</p>\n<p>​                                                                      select ROUND(money,3) from t2019;=&gt;500.12  500.120</p>\n<p>NOW()当前系统日期和时间</p>\n<p>FORMAT()格式化字段显示 eg：select data_format(now(),’%Y-%m’) from t2019;</p>\n<p> sql快速参考xi：<a href=\"https://www.runoob.com/sql/sql-quickref.html\" target=\"_blank\" rel=\"noopener\">https://www.runoob.com/sql/sql-quickref.html</a> </p>\n<h4 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a><img src=\"http://l.yumud.com/note_.png\" alt>正则表达式</h4><p>《正则表达式30分钟入门》 <a href=\"https://deerchao.cn/tutorials/regex/regex.htm\" target=\"_blank\" rel=\"noopener\">https://deerchao.cn/tutorials/regex/regex.htm</a> </p>\n<p>正向预查(?=)满足<strong>前面</strong>的表达式  eg: /\\b[/w]+(?=ing\\b)/g/匹配全局带ing的单词，但是不要ing</p>\n<p>反向预查(?&lt;=)满足<strong>后面</strong>的表达式 eg:/(?&lt;=index\\.ts)/ 匹配以.ts结尾 ,左边是index</p>\n<p>\\g 全局匹配</p>\n<p>. 匹配除换行符外的任意字符</p>\n<p>\\w匹配字母，数字，下划线     \\W 匹配非字母 数字 下划线 汉字的字符</p>\n<p>\\d匹配数字                                 \\D 匹配非数字的字符</p>\n<p>\\b匹配单词的边界                     \\B 匹配不是单词开头或结束的位置</p>\n<p>^匹配字符串的开始                   [^x] 匹配除了x 以外的任意字符    \\S 匹配任意不是空白符的字符</p>\n<p>$ 匹配字符串的结束</p>\n<p>\\ 取消字符的特殊意义</p>\n<p>+重复一次或多次</p>\n<p>*重复0次或多次</p>\n<p>？重复0次或1次</p>\n<p>{n}重复n次</p>\n<p>{n,}重复n次或多次</p>\n<p>{n,m}重复n到m次</p>\n<p>| 或</p>\n<p>eg:</p>\n<p>\\ba\\w<em>\\b   \\b开始  a，任意(0或更多)数量的字母或数字(\\w\\</em>) \\b结束</p>\n<p>\\d+ 匹配一个或更多连续的数字(+一次或更多，*0次或更多)</p>\n<p>\\b\\w{6}\\b 匹配刚好6个字符的单词</p>\n<p>^\\d{5,12}}$ 匹配5-12位的数字 </p>\n<p>\\(?0\\d{2}[) -]?\\d{8}  \\转义字符，（左括号能出现0/1次,跟一个0，两个数字，右括号)空格-出现0/1次，八位数字</p>\n<p><strong>贪婪与懒惰</strong></p>\n<p>以下均为“尽可能少重复”</p>\n<p>*？     重复任意次</p>\n<p>+？     重复一次或更多次</p>\n<p>？？   重复0次或1次</p>\n<p>{n,m}？重复n-m次</p>\n<p>{n,}?      重复n次以上</p>\n<p>eg： a.*b  匹配最长的以a开始，b结束的字符串</p>\n<p>​         a.*?b 匹配最短的以a开始，b结束的字符串</p>\n<p>嘻嘻：\\a 报警字符(打印时，电脑嘀一声)</p>\n<h4 id=\"尾调用优化\"><a href=\"#尾调用优化\" class=\"headerlink\" title=\"尾调用优化\"></a><img src=\"http://l.yumud.com/note_.png\" alt>尾调用优化</h4><p>尾调用：在函数的最后一步是直接返回调用另一个函数</p>\n<p>优化：在函数A的内部调用函数B  在A的调用记录上方，会形成一个B的调用记录，等到B的运行结束，将结果返回A，B的调用记录消失。(确保函数的最后一步只调用自身)</p>\n<p>所有的调用记录形调用栈</p>\n<p>eg:</p>\n<p>复杂度O(n)</p>\n<p>function f(){</p>\n<p>​    if(n===1) return 1;</p>\n<p>​    return n*f(n-1);</p>\n<p>}</p>\n<p>复杂度O(1)</p>\n<p>function f(n,total=1){</p>\n<p>​    if(n==1) return total; </p>\n<p>​    return f(n-1,n*total)</p>\n<p>}</p>\n<h4 id=\"mocha覆盖率\"><a href=\"#mocha覆盖率\" class=\"headerlink\" title=\"mocha覆盖率\"></a><img src=\"http://l.yumud.com/note_.png\" alt>mocha覆盖率</h4><p>%stmts %Branch % Funcs %Lines</p>\n<p>语句覆盖率 分之覆盖率 函数覆盖率 行覆盖率</p>\n<p>（最弱覆盖）                                      （最全）</p>\n<h4 id=\"递归和迭代的转化-区别\"><a href=\"#递归和迭代的转化-区别\" class=\"headerlink\" title=\"递归和迭代的转化 区别\"></a><img src=\"http://l.yumud.com/note_.png\" alt>递归和迭代的转化 区别</h4><p><img src=\"http://l.yumud.com/1571377276911.png\" alt=\"1571377276911\"></p>\n<!--(借用了别人借用的图)-->\n\n<h4 id=\"版本号\"><a href=\"#版本号\" class=\"headerlink\" title=\"版本号\"></a><img src=\"http://l.yumud.com/note_.png\" alt>版本号</h4><p>主版本号  次版本号  修订号  先行版本号  版本编译元数据(不在优先级比较的列表中)</p>\n<p>​      X               Y               Z</p>\n<p>X 当API的兼容性变化时，递增</p>\n<p>Y 增加功能，不影响API的兼容性，递增</p>\n<p>Z Bug修复，不影响API兼容性，递增</p>\n<p>^主版本号不变  ^1.2.3==&gt;1.2.3&lt;=版本号&lt;2.0.0     1.x.x</p>\n<p>~主次不变         ~1.2.3==&gt;1.2.3&lt;=版本号&lt;1.3.0      1.2.x</p>\n<h4 id=\"SQL自定义函数\"><a href=\"#SQL自定义函数\" class=\"headerlink\" title=\"SQL自定义函数\"></a><img src=\"http://l.yumud.com/note_.png\" alt>SQL自定义函数</h4><p>delimiter //</p>\n<p>create function countSum(id int) return int(11)</p>\n<p>​    DETERMINISTIC</p>\n<p>begin</p>\n<p>​    declare temp int;</p>\n<p>​    select count(*) into temp from t2019 where site=id;</p>\n<p>​    return temp; </p>\n<p>end</p>\n<p>//</p>\n<p>**deterministic</p>\n<h4 id=\"临时表-派生表\"><a href=\"#临时表-派生表\" class=\"headerlink\" title=\"临时表 派生表\"></a><img src=\"http://l.yumud.com/note_.png\" alt>临时表 派生表</h4><h5 id=\"临时表\"><a href=\"#临时表\" class=\"headerlink\" title=\"临时表\"></a>临时表</h5><p>内部临时表（MySQL自动创建） 外部临时表（create temporary table）</p>\n<h5 id=\"派生表\"><a href=\"#派生表\" class=\"headerlink\" title=\"派生表\"></a>派生表</h5><p>查询结果生成的表 ，类似于临时表</p>\n<p>select * from (select * from others) temp;   temp即派生表</p>\n<h4 id=\"事件循环\"><a href=\"#事件循环\" class=\"headerlink\" title=\"事件循环\"></a><img src=\"http://l.yumud.com/note_.png\" alt>事件循环</h4><h4 id=\"事务-乐观锁-悲观锁\"><a href=\"#事务-乐观锁-悲观锁\" class=\"headerlink\" title=\"事务 乐观锁 悲观锁\"></a><img src=\"http://l.yumud.com/note_.png\" alt>事务 乐观锁 悲观锁</h4><h5 id=\"①事务\"><a href=\"#①事务\" class=\"headerlink\" title=\"①事务\"></a>①事务</h5><p>START TRANSACTION;</p>\n<p>COMMIT;/ROLLBACK;</p>\n<h5 id=\"②悲观锁-乐观锁\"><a href=\"#②悲观锁-乐观锁\" class=\"headerlink\" title=\"②悲观锁 乐观锁\"></a>②悲观锁 乐观锁</h5><p>乐观锁 update tb set version=version+1 where version=version    在写操作频繁的场景下会不断发生重试，也会影响吞吐量</p>\n<p>悲观锁 set autocommit=0 (不允许自动提交)</p>\n<p>​    用for update给每行数据加排他锁 (使用条件:InnoDB，<strong>BEGIN/COMMIT</strong>)</p>\n<p>​    1)根据主键进行查询，查询到数据，主键字段产生行锁 (只是查询的那个字段的数据产生锁，查询这个字段的其他数据不会产生锁)</p>\n<p>​    2)没有查询到数据，不产生锁</p>\n<p>​    3)根据主键，非主键含索引进行查询，查询到数据，主键字段产生行锁，非主键字段产生表锁（非主键字段的所有数据都会有锁）</p>\n<p>​    4)….</p>\n<p>sequelize加排它锁</p>\n<p>await Accounts.findOne({<br>    where: { name: ‘HelKyle’ },<br>    lock: Sequelize.Transaction.LOCK.UPDATE<br>});</p>\n<h4 id=\"tcp-ip\"><a href=\"#tcp-ip\" class=\"headerlink\" title=\"tcp/ip\"></a><img src=\"http://l.yumud.com/note_.png\" alt>tcp/ip</h4><p> <a href=\"https://blog.csdn.net/u012371712/article/details/80795297\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012371712/article/details/80795297</a> </p>\n<p><img src=\"http://l.yumud.com/1571379820232.png\" alt=\"1571379820232\"></p>\n<p>五层：应用层  传输层 网络层  连接层 物理层</p>\n<h4 id=\"请求方式\"><a href=\"#请求方式\" class=\"headerlink\" title=\"请求方式\"></a><img src=\"http://l.yumud.com/note_.png\" alt>请求方式</h4><p>get put post delete</p>\n<p>post时，填写参数  ，返回参数ctx.request.query</p>\n<h4 id=\"content-type\"><a href=\"#content-type\" class=\"headerlink\" title=\"content-type\"></a><img src=\"http://l.yumud.com/note_.png\" alt>content-type</h4><p>application/json  消息主体是 序列化后的JSON字符串</p>\n<p>application/x-www-form-urlencoded  数据被编码为名称/值对。这是标准的编码格式</p>\n<p>multipart/form-data   需要在表单中进行文件上传时，使用。</p>\n<p>text/plain  数据以纯文本形式(text/json/xml/html)进行编码，不含任何控件或格式字符</p>\n<h4 id=\"string-split-arr-join\"><a href=\"#string-split-arr-join\" class=\"headerlink\" title=\"string.split arr.join\"></a><img src=\"http://l.yumud.com/note_.png\" alt>string.split arr.join</h4><p>string.split(“*”) 字符串转数组 以星号作分割依据</p>\n<p>arr.join(“*”) 数组转字符串  用星号作连接</p>\n<h4 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a><img src=\"http://l.yumud.com/note_.png\" alt>索引</h4><p>索引</p>\n<p>唯一索引：查到符合条件的继续查找下一项，如果下一项不符合再返回</p>\n<p>普通索引：查到符合条件的项后直接返回</p>\n<p>创建索引</p>\n<p>create index sy1 on t2019(site);</p>\n<p>添加索引</p>\n<p>alter table t2019 add index sy2(money);</p>\n<p>创建表时直接指定</p>\n<p>create table t2019(</p>\n<p>​    site int not null,</p>\n<p>​    INDEX [sy3] (site]</p>\n<p>)</p>\n<p>删除索引</p>\n<p>drop index [sy1] on t2019;</p>\n<p>唯一索引</p>\n<p>create unique index sy4 on t2019 (site)</p>\n<h4 id=\"sequelize事务，加锁\"><a href=\"#sequelize事务，加锁\" class=\"headerlink\" title=\"sequelize事务，加锁\"></a><img src=\"http://l.yumud.com/note_.png\" alt>sequelize事务，加锁</h4><p>t1 //is a transaction</p>\n<p>Model.findAll({</p>\n<pre><code>where:...</code></pre><p>},{</p>\n<p>​    transaction: t1,  //**注意</p>\n<p>​    lock: t1.LOCK.UPDATE,   //**注意</p>\n<p>​    lock: t1.LOCK.SHARE</p>\n<p>})</p>\n<h4 id=\"与-或-异或-左移-右移-按二进制位进行运算\"><a href=\"#与-或-异或-左移-右移-按二进制位进行运算\" class=\"headerlink\" title=\"与 或 异或  左移 右移(按二进制位进行运算)\"></a><img src=\"http://l.yumud.com/note_.png\" alt>与 或 异或  左移 右移(按二进制位进行运算)</h4><p>与 &amp;  同1为1，否则为0</p>\n<p>或 |  有1则1</p>\n<p>异或 ^  相同为1，不同为0</p>\n<p>左移 &lt;&lt;  左移，移出位丢弃，右边的空位补0</p>\n<p>右移 &gt;&gt;  右移，移出位丢弃，左边的空位补0</p>\n<h4 id=\"node-api\"><a href=\"#node-api\" class=\"headerlink\" title=\"node api\"></a><img src=\"http://l.yumud.com/note_.png\" alt>node api</h4><p>path.normalize(path)规范化path</p>\n<p>path.join([…paths])使用平台特定的分隔符把全部给定的 path 片段连接到一起，并规范</p>\n<p>path.resolve([…paths])把路径解析为一个绝对路径</p>\n<h4 id=\"队列-BFS-DFS\"><a href=\"#队列-BFS-DFS\" class=\"headerlink\" title=\"队列 BFS DFS\"></a><img src=\"http://l.yumud.com/note_.png\" alt>队列 BFS DFS</h4><p>队列 FIFO</p>\n<p>BFS应用场景：遍历和找出最短路径</p>\n<p>栈 LIFO</p>\n<p> <a href=\"https://leetcode-cn.com/explore/learn/card/queue-stack/218/stack-last-in-first-out-data-structure/875/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/explore/learn/card/queue-stack/218/stack-last-in-first-out-data-structure/875/</a> </p>\n<h4 id=\"Number-MAX-SAFE-INTEGER-Number-MAX-VALUE\"><a href=\"#Number-MAX-SAFE-INTEGER-Number-MAX-VALUE\" class=\"headerlink\" title=\"Number.MAX_SAFE_INTEGER      Number.MAX_VALUE\"></a><img src=\"http://l.yumud.com/note_.png\" alt>Number.MAX_SAFE_INTEGER      Number.MAX_VALUE</h4><p>Number.MAX_SAFE_INTEGER   9007199254740991 小于该值能精确表示</p>\n<p>Number.MAX_VALUE   1.7976931348623157e+308  大于该值得到的是Infinity，介于Infinity和安全值之间的无法精确表示</p>\n<h4 id=\"mocha\"><a href=\"#mocha\" class=\"headerlink\" title=\"mocha\"></a><img src=\"http://l.yumud.com/note_.png\" alt>mocha</h4><h5 id=\"主要api\"><a href=\"#主要api\" class=\"headerlink\" title=\"主要api\"></a>主要api</h5><p>describe(name,fn) 定义一组测试</p>\n<p>it(name,fn)              定义一项测试</p>\n<h5 id=\"第三方断言库\"><a href=\"#第三方断言库\" class=\"headerlink\" title=\"第三方断言库\"></a>第三方断言库</h5><p>assert，chai</p>\n<p>const assert = require(‘assert’)</p>\n<h5 id=\"钩子函数\"><a href=\"#钩子函数\" class=\"headerlink\" title=\"钩子函数\"></a>钩子函数</h5><p>(在用例集/用例函数开始执行之前/结束执行之后，进行一些环境准备或者环境清理的工作)</p>\n<p>before()  在本区块 <strong>所有测试用例</strong> 开始之前执行</p>\n<p>after()     在本区块 <strong>所有测试用例</strong> 结束之后（所有）执行</p>\n<p>beforeEach()    在本区块 <strong>每个测试用例</strong> 开始之前执行</p>\n<p>afterEach()        在本区块 <strong>每个测试用例</strong> 结束之后执行</p>\n<p>例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'top'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> before(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'top before'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"> after(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'top after'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"> beforeEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'top beforeEach'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"> afterEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'top afterEach'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"> it(<span class=\"string\">'test1'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'top test1'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"> describe(<span class=\"string\">'sublevel'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  before(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'sublevel before'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  after(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'sublevel after'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  beforeEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'sublevel beforeEach'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  afterEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'sublevel afterEach'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">'test1'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'sublevel test1'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">'test2'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'sublevel test2'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"> it(<span class=\"string\">'test2'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'top test2'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  top</span><br><span class=\"line\">top before</span><br><span class=\"line\">top beforeEach</span><br><span class=\"line\">top test1</span><br><span class=\"line\">    √ test1</span><br><span class=\"line\">top afterEach</span><br><span class=\"line\">top beforeEach</span><br><span class=\"line\">top test2</span><br><span class=\"line\">    √ test2</span><br><span class=\"line\">top afterEach</span><br><span class=\"line\">    sublevel</span><br><span class=\"line\">sublevel before</span><br><span class=\"line\">top beforeEach</span><br><span class=\"line\">sublevel beforeEach</span><br><span class=\"line\">sublevel test1</span><br><span class=\"line\">      √ test1</span><br><span class=\"line\">sublevel afterEach</span><br><span class=\"line\">top afterEach</span><br><span class=\"line\">top beforeEach</span><br><span class=\"line\">sublevel beforeEach</span><br><span class=\"line\">sublevel test2</span><br><span class=\"line\">      √ test2</span><br><span class=\"line\">sublevel afterEach</span><br><span class=\"line\">top afterEach</span><br><span class=\"line\">sublevel after</span><br><span class=\"line\">top after</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  4 passing (12ms)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"取反-再取反\"><a href=\"#取反-再取反\" class=\"headerlink\" title=\"~~ 取反 再取反\"></a><img src=\"http://l.yumud.com/note_.png\" alt>~~ 取反 再取反</h4><p><del>~  不超过32位时可以用 ~</del> 达到Math.floor的效果</p>\n<p><del>按位取反，</del>变回原操作数，但是省略了小数部分</p>\n<h4 id=\"桶排序\"><a href=\"#桶排序\" class=\"headerlink\" title=\"桶排序\"></a><img src=\"http://l.yumud.com/note_.png\" alt>桶排序</h4><p>先找出桶中最大值最小值max min</p>\n<p>按照桶的个数num，给5</p>\n<p>桶的大小 size=(max-min+1)/num</p>\n<p>桶 buckets = new Array(num*2)</p>\n<p>初始化桶buckets[i]=[]</p>\n<p>分配数据到桶（按照数据值的分布来匹配，(arr[i]-min)/size）</p>\n<p>对每个桶进行排序</p>\n<h4 id=\"process-argv\"><a href=\"#process-argv\" class=\"headerlink\" title=\"process.argv\"></a><img src=\"http://l.yumud.com/note_.png\" alt>process.argv</h4><p>process.argv[0] 启动node.js进程的可执行文件的所在绝对路径</p>\n<p>process.argv[1] 正在执行的js文件的路径</p>\n<p>其他元素将是任何其他命令行的参数</p>\n<p><img src=\"http://l.yumud.com/record_process_argv.png\" alt=\"eg\"></p>\n<h4 id=\"git提交冲突\"><a href=\"#git提交冲突\" class=\"headerlink\" title=\"git提交冲突\"></a><img src=\"http://l.yumud.com/note_.png\" alt>git提交冲突</h4><h5 id=\"git提交冲突-1\"><a href=\"#git提交冲突-1\" class=\"headerlink\" title=\"git提交冲突\"></a>git提交冲突</h5><p>先切一个分支feature</p>\n<p>操作操作</p>\n<p>git add .</p>\n<p>git commit -m “操作操作”</p>\n<p>git push origin master=&gt;报错，冲突</p>\n<p>git co dev</p>\n<p>git pull </p>\n<p>git co feature </p>\n<p>git rebase dev  </p>\n<p>手动解决冲突</p>\n<p>git co dev</p>\n<p>git merge –no-ff feature</p>\n<p>git push origin dev</p>\n<p>最后删掉这个分支feature</p>\n<h4 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a><img src=\"http://l.yumud.com/note_.png\" alt>二分查找</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binarySearch</span>(<span class=\"params\">arr,target</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> start =<span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> end=arr.length<span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(start&lt;=end)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> mid=<span class=\"built_in\">parseInt</span>(start+(end-start)/<span class=\"number\">2</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(target==arr[mid])</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(target&gt;arr[mid])&#123;</span><br><span class=\"line\">          start=mid+<span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          end=mid<span class=\"number\">-1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Math.ceil(1.6)  2</p>\n<p>Math.floor(1.6)  1</p>\n","slug":"record","updated":"2019-11-15T02:04:54.785Z","comments":true,"link":"","permalink":"/2019/10/21/record/","excerpt":"","categories":[{"name":"A coin a day","slug":"A-coin-a-day","permalink":"/categories/A-coin-a-day/"}],"tags":[]},{"title":"用户访问浏览器全过程","date":"2019-09-24T05:45:00.000Z","path":"2019/09/24/用户访问浏览器全过程/","text":"详细过程： https://www.cnblogs.com/yihr/p/9720715.html1.用户输入要访问的域名 www.baidu.com2.浏览器请求解析DNS服务器。把域名www.baidu.com转换成web服务器的ip地址3.浏览器从访问的ip地址中解析出默认的端口号 804.浏览器通过解析后得到的ip地址和端口号与web服务器建立一条TCP连接通道 三次握手5.建立TCP连接之后，浏览器向web服务器发送一条HTTP请求报文6.web服务器响应并读取浏览器的请求信息，然后返回一条HTTP响应报文7.web服务器关闭HTTP连接，关闭TCP连接，web服务器显示访问的网站内容到屏幕上 四次挥手","raw":"---\ntitle: 用户访问浏览器全过程\ncategories:\n  - 面试\ndate: 2019-09-24 13:45:00\ntoc: true\n---\n详细过程： https://www.cnblogs.com/yihr/p/9720715.html\n1.用户输入要访问的域名  www.baidu.com\n2.浏览器请求解析DNS服务器。把域名www.baidu.com转换成web服务器的ip地址\n3.浏览器从访问的ip地址中解析出默认的端口号 80\n4.浏览器通过解析后得到的ip地址和端口号与web服务器建立一条TCP连接通道\n  三次握手\n5.建立TCP连接之后，浏览器向web服务器发送一条HTTP请求报文\n6.web服务器响应并读取浏览器的请求信息，然后返回一条HTTP响应报文\n7.web服务器关闭HTTP连接，关闭TCP连接，web服务器显示访问的网站内容到屏幕上\n  四次挥手\n","content":"<p>详细过程： <a href=\"https://www.cnblogs.com/yihr/p/9720715.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/yihr/p/9720715.html</a><br>1.用户输入要访问的域名  <a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a><br>2.浏览器请求解析DNS服务器。把域名<a href=\"http://www.baidu.com转换成web服务器的ip地址\" target=\"_blank\" rel=\"noopener\">www.baidu.com转换成web服务器的ip地址</a><br>3.浏览器从访问的ip地址中解析出默认的端口号 80<br>4.浏览器通过解析后得到的ip地址和端口号与web服务器建立一条TCP连接通道<br>  三次握手<br>5.建立TCP连接之后，浏览器向web服务器发送一条HTTP请求报文<br>6.web服务器响应并读取浏览器的请求信息，然后返回一条HTTP响应报文<br>7.web服务器关闭HTTP连接，关闭TCP连接，web服务器显示访问的网站内容到屏幕上<br>  四次挥手</p>\n","slug":"用户访问浏览器全过程","updated":"2019-11-08T08:02:25.900Z","comments":true,"link":"","permalink":"/2019/09/24/用户访问浏览器全过程/","excerpt":"","categories":[{"name":"面试","slug":"面试","permalink":"/categories/面试/"}],"tags":[]},{"title":"egg单元测试","date":"2019-09-19T06:34:38.000Z","path":"2019/09/19/egg-e5-8d-95-e5-85-83-e6-b5-8b-e8-af-95/","text":"github地址： https://github.com/thesecondlight/egg_mysql egg连接数据库，其中index.js是一个简单的单元测试文件。 首先在controller中新建文件index.js &apos;use strict&apos;; const Controller = require(&apos;egg&apos;).Controller; class indexController extends Controller { async index() { this.ctx.body = &apos;hi,egg&apos;; } } module.exports = indexController;service中新建index.js &apos;use strict&apos;; const Service = require(&apos;egg&apos;).Service; class UserService extends Service { async get(name) { return name; } } module.exports = UserService;测试文件目录test,与app文件夹同一级 test/app/controller/index.test.js （命名规则：测试文件名.test.js） 对controller层以及router层的测试 &apos;use strict&apos;; const { app, assert } = require(&apos;egg-mock/bootstrap&apos;); describe(&apos;test/app/controller/index.test.js&apos;, () =&gt; { it(&apos;should GET /&apos;, () =&gt; { return app.httpRequest() .get(&apos;/index&apos;) //router访问路径 .expect(&apos;hi,egg&apos;) //希望返回的结果 .expect(200); //希望返回的状态 }); it(&apos;should send multi requests&apos;, async () =&gt; { await app.httpRequest() .get(&apos;/index&apos;) .expect(&apos;hi,egg&apos;) .expect(200); const result = await app.httpRequest() .get(&apos;/index&apos;) .expect(200) .expect(&apos;hi,egg&apos;); assert(result.status === 200); }); });运行npm test 可能会报错，因为你router路径的不规范，访问了不存在的路径，或者无效变量的存在，看错误提示，进行相应的修改即可。 test/app/service/index.test.js &apos;use strict&apos;; const { app, assert } = require(&apos;egg-mock/bootstrap&apos;); describe(&apos;get()&apos;, () =&gt; { it(&apos;should get exists user&apos;, async () =&gt; { const ctx = app.mockContext(); //创建ctx const user = await ctx.service.index.get(&apos;yumu&apos;); //通过ctx访问到service.user assert(user === &apos;yumu&apos;); }); });运行npm test","raw":"---\ntitle: egg单元测试\nurl: 917.html\nid: 917\ncategories:\n  - 嗨~egg\ndate: 2019-09-19 14:34:38\n---\n\ngithub地址： [https://github.com/thesecondlight/egg_mysql](https://github.com/thesecondlight/egg_mysql) egg连接数据库，其中index.js是一个简单的单元测试文件。<!--more-->\n\n首先在controller中新建文件index.js\n\n    'use strict';\n    const Controller = require('egg').Controller;\n    class indexController extends Controller {\n      async index() {\n        this.ctx.body = 'hi,egg';\n      }\n    }\n    module.exports = indexController;\n\nservice中新建index.js\n\n    'use strict';\n    \n    const Service = require('egg').Service;\n    \n    class UserService extends Service {\n      async get(name) {\n        return name;\n      }\n    }\n    module.exports = UserService;\n\n测试文件目录test,与app文件夹同一级\n\ntest/app/controller/index.test.js （命名规则：测试文件名.test.js） 对controller层以及router层的测试\n\n    'use strict';\n    \n    const { app, assert } = require('egg-mock/bootstrap');\n    \n    describe('test/app/controller/index.test.js', () => {\n      it('should GET /', () => {\n        return app.httpRequest()\n          .get('/index')  //router访问路径\n          .expect('hi,egg')   //希望返回的结果\n          .expect(200);       //希望返回的状态\n      });\n      it('should send multi requests', async () => {\n        await app.httpRequest()\n          .get('/index')\n          .expect('hi,egg')\n          .expect(200);\n        const result = await app.httpRequest()\n          .get('/index')\n          .expect(200)\n          .expect('hi,egg');\n        assert(result.status === 200);\n      });\n    });\n    \n\n运行npm test\n\n![](http://l.yumud.com/image-9-31.png)\n\n可能会报错，因为你router路径的不规范，访问了**不存在的路径**，或者**无效变量**的存在，看错误提示，进行相应的修改即可。\n\ntest/app/service/index.test.js\n\n    'use strict';\n    \n    const { app, assert } = require('egg-mock/bootstrap');\n    \n    describe('get()', () => {\n      it('should get exists user', async () => {\n        const ctx = app.mockContext();  //创建ctx\n        const user = await ctx.service.index.get('yumu');   //通过ctx访问到service.user\n        assert(user === 'yumu');\n      });\n    });\n    \n\n运行npm test\n\n![](http://l.yumud.com/image-9-32.png)","content":"<p>github地址： <a href=\"https://github.com/thesecondlight/egg_mysql\" target=\"_blank\" rel=\"noopener\">https://github.com/thesecondlight/egg_mysql</a> egg连接数据库，其中index.js是一个简单的单元测试文件。<a id=\"more\"></a></p>\n<p>首先在controller中新建文件index.js</p>\n<pre><code>&apos;use strict&apos;;\nconst Controller = require(&apos;egg&apos;).Controller;\nclass indexController extends Controller {\n  async index() {\n    this.ctx.body = &apos;hi,egg&apos;;\n  }\n}\nmodule.exports = indexController;</code></pre><p>service中新建index.js</p>\n<pre><code>&apos;use strict&apos;;\n\nconst Service = require(&apos;egg&apos;).Service;\n\nclass UserService extends Service {\n  async get(name) {\n    return name;\n  }\n}\nmodule.exports = UserService;</code></pre><p>测试文件目录test,与app文件夹同一级</p>\n<p>test/app/controller/index.test.js （命名规则：测试文件名.test.js） 对controller层以及router层的测试</p>\n<pre><code>&apos;use strict&apos;;\n\nconst { app, assert } = require(&apos;egg-mock/bootstrap&apos;);\n\ndescribe(&apos;test/app/controller/index.test.js&apos;, () =&gt; {\n  it(&apos;should GET /&apos;, () =&gt; {\n    return app.httpRequest()\n      .get(&apos;/index&apos;)  //router访问路径\n      .expect(&apos;hi,egg&apos;)   //希望返回的结果\n      .expect(200);       //希望返回的状态\n  });\n  it(&apos;should send multi requests&apos;, async () =&gt; {\n    await app.httpRequest()\n      .get(&apos;/index&apos;)\n      .expect(&apos;hi,egg&apos;)\n      .expect(200);\n    const result = await app.httpRequest()\n      .get(&apos;/index&apos;)\n      .expect(200)\n      .expect(&apos;hi,egg&apos;);\n    assert(result.status === 200);\n  });\n});</code></pre><p>运行npm test</p>\n<p><img src=\"http://l.yumud.com/image-9-31.png\" alt></p>\n<p>可能会报错，因为你router路径的不规范，访问了<strong>不存在的路径</strong>，或者<strong>无效变量</strong>的存在，看错误提示，进行相应的修改即可。</p>\n<p>test/app/service/index.test.js</p>\n<pre><code>&apos;use strict&apos;;\n\nconst { app, assert } = require(&apos;egg-mock/bootstrap&apos;);\n\ndescribe(&apos;get()&apos;, () =&gt; {\n  it(&apos;should get exists user&apos;, async () =&gt; {\n    const ctx = app.mockContext();  //创建ctx\n    const user = await ctx.service.index.get(&apos;yumu&apos;);   //通过ctx访问到service.user\n    assert(user === &apos;yumu&apos;);\n  });\n});</code></pre><p>运行npm test</p>\n<p><img src=\"http://l.yumud.com/image-9-32.png\" alt></p>\n","slug":"egg-e5-8d-95-e5-85-83-e6-b5-8b-e8-af-95","updated":"2019-11-07T09:19:03.388Z","comments":true,"link":"","permalink":"/2019/09/19/egg-e5-8d-95-e5-85-83-e6-b5-8b-e8-af-95/","excerpt":"github地址： https://github.com/thesecondlight/egg_mysql egg连接数据库，其中index.js是一个简单的单元测试文件。","categories":[{"name":"嗨~egg","slug":"嗨-egg","permalink":"/categories/嗨-egg/"}],"tags":[]},{"title":"hexo添加valine评论","date":"2019-09-16T02:02:00.000Z","path":"2019/09/16/hexo-e6-b7-bb-e5-8a-a0valine-e8-af-84-e8-ae-ba/","text":"首先在leancloud中注册，创建一个新应用，在设置=&gt;应用key中查看appid和appkey， 在设置=&gt;安全中心 把博客地址添加到安全中心，保证数据调用的安全性。 在主题中(eg：我的是yilia主题) \\themes\\yilia\\_config.yml 中添加 valine: enable: true appid: gG1wfFA4yGQarTbT4EB44wR2-gzGzoHsz appkey: SvnF4k7cxYtmz1HDwaJe0Lzq verify: false #验证码 notify: true #评论回复提醒 avatar: robohash #一种具有不同颜色、面部等的机器人 placeholder: 小姐姐，讲话呀 pageSize: 10 guest_info: nick,mails 在 \\themes\\yilia\\layout_partial\\post中新建一个valine.ejs &lt;div id=&quot;vcomment&quot; class=&quot;comment&quot;&gt;&lt;/div&gt; &lt;script src=&quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;//unpkg.com/valine/dist/Valine.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt; var notify = &apos;&lt;%= theme.valine.notify %&gt;&apos; == true ? true : false; var verify = &apos;&lt;%= theme.valine.verify %&gt;&apos; == true ? true : false; window.onload = function() { new Valine({ el: &apos;.comment&apos;, notify: notify, verify: verify, app_id: &quot;&lt;%= theme.valine.appid %&gt;&quot;, app_key: &quot;&lt;%= theme.valine.appkey %&gt;&quot;, placeholder: &quot;&lt;%= theme.valine.placeholder %&gt;&quot;, avatar:&quot;&lt;%= theme.valine.avatar %&gt;&quot; }); } &lt;/script&gt;添加评论头像： 非自定义头像默认值 想要自定义，就去Gravatar注册登录，上传，使用自己的图片","raw":"---\ntitle: hexo添加valine评论\nurl: 897.html\nid: 897\ncategories:\n  - 芝士就是力量！\ndate: 2019-09-16 10:02:00\n---\n\n首先在[leancloud](https://leancloud.cn/dashboard/login.html#/signin)中注册，创建一个新应用，在设置=>应用key中查看appid和appkey，\n\n在设置=>安全中心 把博客地址添加到安全中心，保证数据调用的安全性。\n<!--more-->\n在主题中(eg：我的是yilia主题) \\\\themes\\\\yilia\\\\_config.yml 中添加\n\n     valine: \n      enable: true\n      appid: gG1wfFA4yGQarTbT4EB44wR2-gzGzoHsz\n      appkey: SvnF4k7cxYtmz1HDwaJe0Lzq\n      verify: false #验证码\n      notify: true #评论回复提醒\n      avatar: robohash #一种具有不同颜色、面部等的机器人\n      placeholder: 小姐姐，讲话呀\n      pageSize: 10\n      guest_info: nick,mails \n\n在 \\\\themes\\\\yilia\\\\layout_partial\\\\post中新建一个valine.ejs\n\n    <div id=\"vcomment\" class=\"comment\"></div> \n    <script src=\"//cdn1.lncld.net/static/js/3.0.4/av-min.js\"></script>\n    <script src=\"//unpkg.com/valine/dist/Valine.min.js\"></script>\n    <script>\n       var notify = '<%= theme.valine.notify %>' == true ? true : false;\n       var verify = '<%= theme.valine.verify %>' == true ? true : false;\n        window.onload = function() {\n            new Valine({\n                el: '.comment',\n                notify: notify,\n                verify: verify,\n                app_id: \"<%= theme.valine.appid %>\",\n                app_key: \"<%= theme.valine.appkey %>\",\n                placeholder: \"<%= theme.valine.placeholder %>\",\n                avatar:\"<%= theme.valine.avatar %>\"\n            });\n        }\n    </script>\n\n添加评论头像：\n\n非自定义头像默认值\n\n![](http://l.yumud.com/image-9-30.png)\n\n想要自定义，就去Gravatar注册登录，上传，使用自己的图片","content":"<p>首先在<a href=\"https://leancloud.cn/dashboard/login.html#/signin\" target=\"_blank\" rel=\"noopener\">leancloud</a>中注册，创建一个新应用，在设置=&gt;应用key中查看appid和appkey，</p>\n<p>在设置=&gt;安全中心 把博客地址添加到安全中心，保证数据调用的安全性。</p>\n<a id=\"more\"></a>\n<p>在主题中(eg：我的是yilia主题) \\themes\\yilia\\_config.yml 中添加</p>\n<pre><code>valine: \n enable: true\n appid: gG1wfFA4yGQarTbT4EB44wR2-gzGzoHsz\n appkey: SvnF4k7cxYtmz1HDwaJe0Lzq\n verify: false #验证码\n notify: true #评论回复提醒\n avatar: robohash #一种具有不同颜色、面部等的机器人\n placeholder: 小姐姐，讲话呀\n pageSize: 10\n guest_info: nick,mails </code></pre><p>在 \\themes\\yilia\\layout_partial\\post中新建一个valine.ejs</p>\n<pre><code>&lt;div id=&quot;vcomment&quot; class=&quot;comment&quot;&gt;&lt;/div&gt; \n&lt;script src=&quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;//unpkg.com/valine/dist/Valine.min.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n   var notify = &apos;&lt;%= theme.valine.notify %&gt;&apos; == true ? true : false;\n   var verify = &apos;&lt;%= theme.valine.verify %&gt;&apos; == true ? true : false;\n    window.onload = function() {\n        new Valine({\n            el: &apos;.comment&apos;,\n            notify: notify,\n            verify: verify,\n            app_id: &quot;&lt;%= theme.valine.appid %&gt;&quot;,\n            app_key: &quot;&lt;%= theme.valine.appkey %&gt;&quot;,\n            placeholder: &quot;&lt;%= theme.valine.placeholder %&gt;&quot;,\n            avatar:&quot;&lt;%= theme.valine.avatar %&gt;&quot;\n        });\n    }\n&lt;/script&gt;</code></pre><p>添加评论头像：</p>\n<p>非自定义头像默认值</p>\n<p><img src=\"http://l.yumud.com/image-9-30.png\" alt></p>\n<p>想要自定义，就去Gravatar注册登录，上传，使用自己的图片</p>\n","slug":"hexo-e6-b7-bb-e5-8a-a0valine-e8-af-84-e8-ae-ba","updated":"2019-11-07T09:18:08.981Z","comments":true,"link":"","permalink":"/2019/09/16/hexo-e6-b7-bb-e5-8a-a0valine-e8-af-84-e8-ae-ba/","excerpt":"首先在leancloud中注册，创建一个新应用，在设置=&gt;应用key中查看appid和appkey， 在设置=&gt;安全中心 把博客地址添加到安全中心，保证数据调用的安全性。","categories":[{"name":"芝士就是力量！","slug":"芝士就是力量！","permalink":"/categories/芝士就是力量！/"}],"tags":[]},{"title":"pta -1039 到底买不买","date":"2019-09-12T01:48:59.000Z","path":"2019/09/12/pta-1039-e5-88-b0-e5-ba-95-e4-b9-b0-e4-b8-8d-e4-b9-b0/","text":"题目：小红买珠子，店家给出一串珠子，小红给出一串自己想要颜色的珠子；判断店家的珠子是否满足小红的要求，如果颜色不够，输出“No *” *为缺几颗；如果颜色足够，输出“Yes *” *为多余的珠子颗数。 我的想法是，搞两个数组A,B存这两串珠子，然后判断B中的数据是否在A中都能找到，找不到cout++,全找到了（还要考虑颜色都有，但是个数是否匹配，就得再用一个数组，存匹配珠子的个数），A数组长度-B数组长度，得出多余的珠子。 百度看到网友转的网友的思路： 这种思路，解法过分优秀了….","raw":"---\ntitle: pta -1039 到底买不买\nurl: 833.html\nid: 833\ncategories:\n  - A coin a day\ndate: 2019-09-12 09:48:59\n---\n\n题目：小红买珠子，店家给出一串珠子，小红给出一串自己想要颜色的珠子；判断店家的珠子是否满足小红的要求，如果颜色不够，输出“No *” *为缺几颗；如果颜色足够，输出“Yes *” *为多余的珠子颗数。\n<!--more-->\n我的想法是，搞两个数组A,B存这两串珠子，然后判断B中的数据是否在A中都能找到，找不到cout++,全找到了（还要考虑颜色都有，但是个数是否匹配，就得再用一个数组，存匹配珠子的个数），A数组长度-B数组长度，得出多余的珠子。\n\n百度看到网友转的网友的思路：\n\n![](http://l.yumud.com/image-9-28.png)\n\n![](http://l.yumud.com/image-9-29.png)\n\n这种思路，解法过分优秀了....","content":"<p>题目：小红买珠子，店家给出一串珠子，小红给出一串自己想要颜色的珠子；判断店家的珠子是否满足小红的要求，如果颜色不够，输出“No *” *为缺几颗；如果颜色足够，输出“Yes *” *为多余的珠子颗数。</p>\n<a id=\"more\"></a>\n<p>我的想法是，搞两个数组A,B存这两串珠子，然后判断B中的数据是否在A中都能找到，找不到cout++,全找到了（还要考虑颜色都有，但是个数是否匹配，就得再用一个数组，存匹配珠子的个数），A数组长度-B数组长度，得出多余的珠子。</p>\n<p>百度看到网友转的网友的思路：</p>\n<p><img src=\"http://l.yumud.com/image-9-28.png\" alt></p>\n<p><img src=\"http://l.yumud.com/image-9-29.png\" alt></p>\n<p>这种思路，解法过分优秀了….</p>\n","slug":"pta-1039-e5-88-b0-e5-ba-95-e4-b9-b0-e4-b8-8d-e4-b9-b0","updated":"2019-11-07T09:17:06.828Z","comments":true,"link":"","permalink":"/2019/09/12/pta-1039-e5-88-b0-e5-ba-95-e4-b9-b0-e4-b8-8d-e4-b9-b0/","excerpt":"题目：小红买珠子，店家给出一串珠子，小红给出一串自己想要颜色的珠子；判断店家的珠子是否满足小红的要求，如果颜色不够，输出“No *” *为缺几颗；如果颜色足够，输出“Yes *” *为多余的珠子颗数。","categories":[{"name":"A coin a day","slug":"A-coin-a-day","permalink":"/categories/A-coin-a-day/"}],"tags":[]},{"title":"pta -1009 说反话 pta -1021 个位数统计","date":"2019-09-11T07:45:16.000Z","path":"2019/09/11/pta-1009-e8-af-b4-e5-8f-8d-e8-af-9d/","text":"1009说反话题目：hello peach=&gt;peach hello 用do while而不是while是因为会把“h”吃掉 hello peach=&gt;peach ello 1021个位数统计题目：统计一个整数中，每种不同的数字出现的次数。（按次数的升序输出） 输入：10021 输出： 0:2 1:2 2:1","raw":"---\ntitle: pta -1009 说反话 pta -1021 个位数统计\nurl: 820.html\nid: 820\ncategories:\n  - A coin a day\ndate: 2019-09-11 15:45:16\n---\n\n**1009**说反话题目：hello peach=>peach hello\n\n用do while而不是while是因为会把“h”吃掉 hello peach=>peach ello\n<!--more-->\n![](http://l.yumud.com/image-9-26.png)\n\n**1021**个位数统计题目：统计一个整数中，每种不同的数字出现的次数。（按次数的升序输出）\n\n输入：10021\n\n输出：\n\n0:2\n\n1:2\n\n2:1\n\n![](http://l.yumud.com/image-9-27.png)","content":"<p><strong>1009</strong>说反话题目：hello peach=&gt;peach hello</p>\n<p>用do while而不是while是因为会把“h”吃掉 hello peach=&gt;peach ello</p>\n<a id=\"more\"></a>\n<p><img src=\"http://l.yumud.com/image-9-26.png\" alt></p>\n<p><strong>1021</strong>个位数统计题目：统计一个整数中，每种不同的数字出现的次数。（按次数的升序输出）</p>\n<p>输入：10021</p>\n<p>输出：</p>\n<p>0:2</p>\n<p>1:2</p>\n<p>2:1</p>\n<p><img src=\"http://l.yumud.com/image-9-27.png\" alt></p>\n","slug":"pta-1009-e8-af-b4-e5-8f-8d-e8-af-9d","updated":"2019-11-07T09:17:09.761Z","comments":true,"link":"","permalink":"/2019/09/11/pta-1009-e8-af-b4-e5-8f-8d-e8-af-9d/","excerpt":"1009说反话题目：hello peach=&gt;peach hello 用do while而不是while是因为会把“h”吃掉 hello peach=&gt;peach ello","categories":[{"name":"A coin a day","slug":"A-coin-a-day","permalink":"/categories/A-coin-a-day/"}],"tags":[]},{"title":"js字符串倒序(两种反转)","date":"2019-09-11T07:06:20.000Z","path":"2019/09/11/js-e5-ad-97-e7-ac-a6-e4-b8-b2-e5-80-92-e5-ba-8f-e4-b8-a4-e7-a7-8d-e5-8f-8d-e8-bd-ac/","text":"var str=”hello peach” 全部(字母)反转 str.split(‘’).reverse().join(‘’) *引号内无空格，每一个字符都会被分割 单词反转 str.split(‘ ‘).reverse().join(‘ ‘) 引号里面有空格 注意：split的用法，split()用于将一个字符串分割成字符串数组。 reverse()数组反转，然后，Array.join转换为字符串（与String.split()方法正相反）。","raw":"---\ntitle: js字符串倒序(两种反转)\nurl: 815.html\nid: 815\ncategories:\n  - js\ndate: 2019-09-11 15:06:20\n---\n\nvar str=\"hello peach\"\n\n全部(字母)反转 str.split('').reverse().join('') *引号内无空格，每一个字符都会被分割\n\n单词反转 str.split(' ').reverse().join(' ') *引号里面有空格*\n\n![](http://l.yumud.com/image-9-25.png)\n\n注意：split的用法，split()用于将一个字符串分割成字符串数组。\n\nreverse()数组反转，然后，Array.join转换为字符串（与String.split()方法正相反）。","content":"<p>var str=”hello peach”</p>\n<p>全部(字母)反转 str.split(‘’).reverse().join(‘’) *引号内无空格，每一个字符都会被分割</p>\n<p>单词反转 str.split(‘ ‘).reverse().join(‘ ‘) <em>引号里面有空格</em></p>\n<p><img src=\"http://l.yumud.com/image-9-25.png\" alt></p>\n<p>注意：split的用法，split()用于将一个字符串分割成字符串数组。</p>\n<p>reverse()数组反转，然后，Array.join转换为字符串（与String.split()方法正相反）。</p>\n","slug":"js-e5-ad-97-e7-ac-a6-e4-b8-b2-e5-80-92-e5-ba-8f-e4-b8-a4-e7-a7-8d-e5-8f-8d-e8-bd-ac","updated":"2019-11-07T09:17:56.786Z","comments":true,"link":"","permalink":"/2019/09/11/js-e5-ad-97-e7-ac-a6-e4-b8-b2-e5-80-92-e5-ba-8f-e4-b8-a4-e7-a7-8d-e5-8f-8d-e8-bd-ac/","excerpt":"","categories":[{"name":"js","slug":"js","permalink":"/categories/js/"}],"tags":[]},{"title":"wordpress 在首页不显示某些分类下的文章","date":"2019-09-11T06:44:46.000Z","path":"2019/09/11/wordpress-e5-9c-a8-e9-a6-96-e9-a1-b5-e4-b8-8d-e6-98-be-e7-a4-ba-e6-9f-90-e4-ba-9b-e5-88-86-e7-b1-bb-e4-b8-8b-e7-9a-84-e6-96-87-e7-ab-a0/","text":"在主题下的functions.php里面添加这一段代码，好评！ 路径=&gt;xampp/htdocs/wp-content/themes/你使用的主题/function.php function exclude_category_home( $query ) { if ( $query-&gt;is_home ) { $query-&gt;set( ‘cat’, ‘-4,-8‘ ); //你要排除的分类ID,就是带-号 } return $query; } add_filter( ‘pre_get_posts’, ‘exclude_category_home’ );","raw":"---\ntitle: wordpress 在首页不显示某些分类下的文章\nurl: 809.html\nid: 809\ncategories:\n  - 芝士就是力量！\ndate: 2019-09-11 14:44:46\n---\n\n在主题下的functions.php里面添加这一段代码，好评！\n\n**路径=>xampp/htdocs/wp-content/themes/你使用的主题/function.php**\n<!--more-->\nfunction exclude\\_category\\_home( $query ) {\n\nif ( $query->is_home ) {\n\n$query->set( 'cat', '**-4,-8**' ); //你要排除的分类ID,就是带-号\n\n}\n\nreturn $query;\n\n}\n\nadd\\_filter( 'pre\\_get\\_posts', 'exclude\\_category_home' );","content":"<p>在主题下的functions.php里面添加这一段代码，好评！</p>\n<p><strong>路径=&gt;xampp/htdocs/wp-content/themes/你使用的主题/function.php</strong></p>\n<a id=\"more\"></a>\n<p>function exclude_category_home( $query ) {</p>\n<p>if ( $query-&gt;is_home ) {</p>\n<p>$query-&gt;set( ‘cat’, ‘<strong>-4,-8</strong>‘ ); //你要排除的分类ID,就是带-号</p>\n<p>}</p>\n<p>return $query;</p>\n<p>}</p>\n<p>add_filter( ‘pre_get_posts’, ‘exclude_category_home’ );</p>\n","slug":"wordpress-e5-9c-a8-e9-a6-96-e9-a1-b5-e4-b8-8d-e6-98-be-e7-a4-ba-e6-9f-90-e4-ba-9b-e5-88-86-e7-b1-bb-e4-b8-8b-e7-9a-84-e6-96-87-e7-ab-a0","updated":"2019-11-07T09:16:50.022Z","comments":true,"link":"","permalink":"/2019/09/11/wordpress-e5-9c-a8-e9-a6-96-e9-a1-b5-e4-b8-8d-e6-98-be-e7-a4-ba-e6-9f-90-e4-ba-9b-e5-88-86-e7-b1-bb-e4-b8-8b-e7-9a-84-e6-96-87-e7-ab-a0/","excerpt":"在主题下的functions.php里面添加这一段代码，好评！ 路径=&gt;xampp/htdocs/wp-content/themes/你使用的主题/function.php","categories":[{"name":"芝士就是力量！","slug":"芝士就是力量！","permalink":"/categories/芝士就是力量！/"}],"tags":[]},{"title":"pta -1093 字符串A+B","date":"2019-09-11T03:11:18.000Z","path":"2019/09/11/pta-1093-e5-ad-97-e7-ac-a6-e4-b8-b2ab/","text":"题目：给定两个字符串A,B，输出A+B的并集（要求：先输出A，再输出B，但是重复的元素必须剔除） 思路：A中重复的字符去掉，B中重复的字符去掉，B中存在A的字符去掉。for循环把B中和A重复的字符置为0，然后输出时不输出为0的字符，实施发现麻烦，根本不是个事儿，百度发现自己解决这个问题的想法有很大的问题。 百度：两个字符串(A,B)连接放在C中，初始化一个全为0的数组，把C中的字符放进去过得字符都+1或置1，判断是否为0，加入加入。 把公司电脑vscode c的环境配置好了，所以不用dev写了，dev晚上写代码闪瞎眼。","raw":"---\ntitle: pta -1093 字符串A+B\nurl: 800.html\nid: 800\ncategories:\n  - A coin a day\ndate: 2019-09-11 11:11:18\n---\n\n题目：给定两个字符串A,B，输出A+B的并集（要求：先输出A，再输出B，但是重复的元素必须剔除）\n\n思路：A中重复的字符去掉，B中重复的字符去掉，B中存在A的字符去掉。for循环把B中和A重复的字符置为0，然后输出时不输出为0的字符，实施发现麻烦，根本不是个事儿，百度发现自己解决这个问题的想法有很大的问题。\n<!--more-->\n百度：两个字符串(A,B)连接放在C中，初始化一个全为0的数组，把C中的字符放进去过得字符都+1或置1，判断是否为0，加入加入。\n\n![](http://l.yumud.com/image-9-23.png)\n\n把公司电脑vscode c的环境配置好了，所以不用dev写了，dev晚上写代码闪瞎眼。","content":"<p>题目：给定两个字符串A,B，输出A+B的并集（要求：先输出A，再输出B，但是重复的元素必须剔除）</p>\n<p>思路：A中重复的字符去掉，B中重复的字符去掉，B中存在A的字符去掉。for循环把B中和A重复的字符置为0，然后输出时不输出为0的字符，实施发现麻烦，根本不是个事儿，百度发现自己解决这个问题的想法有很大的问题。</p>\n<a id=\"more\"></a>\n<p>百度：两个字符串(A,B)连接放在C中，初始化一个全为0的数组，把C中的字符放进去过得字符都+1或置1，判断是否为0，加入加入。</p>\n<p><img src=\"http://l.yumud.com/image-9-23.png\" alt></p>\n<p>把公司电脑vscode c的环境配置好了，所以不用dev写了，dev晚上写代码闪瞎眼。</p>\n","slug":"pta-1093-e5-ad-97-e7-ac-a6-e4-b8-b2ab","updated":"2019-11-07T09:17:03.822Z","comments":true,"link":"","permalink":"/2019/09/11/pta-1093-e5-ad-97-e7-ac-a6-e4-b8-b2ab/","excerpt":"题目：给定两个字符串A,B，输出A+B的并集（要求：先输出A，再输出B，但是重复的元素必须剔除） 思路：A中重复的字符去掉，B中重复的字符去掉，B中存在A的字符去掉。for循环把B中和A重复的字符置为0，然后输出时不输出为0的字符，实施发现麻烦，根本不是个事儿，百度发现自己解决这个问题的想法有很大的问题。","categories":[{"name":"A coin a day","slug":"A-coin-a-day","permalink":"/categories/A-coin-a-day/"}],"tags":[]},{"title":"[校内互助]小程序--素材记录","date":"2019-09-10T08:01:59.000Z","path":"2019/09/10/e6-a0-a1-e5-86-85-e4-ba-92-e5-8a-a9-e7-b4-a0-e6-9d-90-e8-ae-b0-e5-bd-95/","text":"1.左滑接单 get [2019-9-10] 2.不成熟的发单页面 [2019-9-10]","raw":"---\ntitle: '[校内互助]小程序--素材记录'\nurl: 794.html\nid: 794\ncategories:\n  - Demo\ndate: 2019-09-10 16:01:59\n---\n\n1.左滑接单 get \\[2019-9-10\\]\n\n2.不成熟的发单页面 \\[2019-9-10\\]","content":"<p>1.左滑接单 get [2019-9-10]</p>\n<p>2.不成熟的发单页面 [2019-9-10]</p>\n","slug":"e6-a0-a1-e5-86-85-e4-ba-92-e5-8a-a9-e7-b4-a0-e6-9d-90-e8-ae-b0-e5-bd-95","updated":"2019-11-08T08:03:54.144Z","comments":true,"link":"","permalink":"/2019/09/10/e6-a0-a1-e5-86-85-e4-ba-92-e5-8a-a9-e7-b4-a0-e6-9d-90-e8-ae-b0-e5-bd-95/","excerpt":"","categories":[{"name":"Demo","slug":"Demo","permalink":"/categories/Demo/"}],"tags":[]},{"title":"pta -1007素数对猜想","date":"2019-09-10T06:42:05.000Z","path":"2019/09/10/pta-1007-e7-b4-a0-e6-95-b0-e5-af-b9-e7-8c-9c-e6-83-b3/","text":"dev运行cpp文件报错，什么请求被拒绝，然后百度说杀毒软件的问题，打开任务管理器，没发现杀毒软件，但是把一个隐藏的已经运行的这个项目的exe文件结束了，问题解决。 题目：两个相邻素数差2即是一个素数对。 思路：先求出n之内的素数，然后，判断一下相邻素数之间差值为2的，count++; 这是最后的结果 但是我开始不是这样写的，我的是这样，这个判定为最后一个测试点运行超时，百度说，在循环判断那里，sqrt(n)减少判断的数量就好了，可是我加了之后，素数少了一半….懵…","raw":"---\ntitle: pta -1007素数对猜想\nurl: 777.html\nid: 777\ncategories:\n  - A coin a day\ndate: 2019-09-10 14:42:05\n---\n\ndev运行cpp文件报错，什么请求被拒绝，然后百度说杀毒软件的问题，打开任务管理器，没发现杀毒软件，但是把一个**隐藏**的已经运行的这个项目的**exe文件结束**了，问题解决。\n\n题目：两个相邻素数差2即是一个素数对。\n<!--more-->\n思路：先求出n之内的素数，然后，判断一下相邻素数之间差值为2的，count++;\n\n![](http://l.yumud.com/image-20.png)\n\n**这是最后的结果**\n\n但是我开始不是这样写的，我的是这样，这个判定为最后一个测试点运行超时，百度说，在循环判断那里，sqrt(n)减少判断的数量就好了，可是我加了之后，素数少了一半....懵...\n\n![](http://l.yumud.com/image-9-21.png)","content":"<p>dev运行cpp文件报错，什么请求被拒绝，然后百度说杀毒软件的问题，打开任务管理器，没发现杀毒软件，但是把一个<strong>隐藏</strong>的已经运行的这个项目的<strong>exe文件结束</strong>了，问题解决。</p>\n<p>题目：两个相邻素数差2即是一个素数对。</p>\n<a id=\"more\"></a>\n<p>思路：先求出n之内的素数，然后，判断一下相邻素数之间差值为2的，count++;</p>\n<p><img src=\"http://l.yumud.com/image-20.png\" alt></p>\n<p><strong>这是最后的结果</strong></p>\n<p>但是我开始不是这样写的，我的是这样，这个判定为最后一个测试点运行超时，百度说，在循环判断那里，sqrt(n)减少判断的数量就好了，可是我加了之后，素数少了一半….懵…</p>\n<p><img src=\"http://l.yumud.com/image-9-21.png\" alt></p>\n","slug":"pta-1007-e7-b4-a0-e6-95-b0-e5-af-b9-e7-8c-9c-e6-83-b3","updated":"2019-11-07T09:17:12.147Z","comments":true,"link":"","permalink":"/2019/09/10/pta-1007-e7-b4-a0-e6-95-b0-e5-af-b9-e7-8c-9c-e6-83-b3/","excerpt":"dev运行cpp文件报错，什么请求被拒绝，然后百度说杀毒软件的问题，打开任务管理器，没发现杀毒软件，但是把一个隐藏的已经运行的这个项目的exe文件结束了，问题解决。 题目：两个相邻素数差2即是一个素数对。","categories":[{"name":"A coin a day","slug":"A-coin-a-day","permalink":"/categories/A-coin-a-day/"}],"tags":[]},{"title":"pta -1004成绩排名","date":"2019-09-10T02:39:09.000Z","path":"2019/09/10/pta-1001-e6-88-90-e7-bb-a9-e6-8e-92-e5-90-8d/","text":"题目： 读入 n（&gt;0）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。 挺好写的，可是我写的很幼稚，写了三个数组… 然后百度别人写的： 用结构体数组….一下子简洁了…又写了一下 好看~","raw":"---\ntitle: pta -1004成绩排名\nurl: 766.html\nid: 766\ncategories:\n  - A coin a day\ndate: 2019-09-10 10:39:09\n---\n\n题目： 读入 _n_（>0）名学生的**姓名、学号、成绩**，分别输出**成绩最高**和**成绩最低**学生的姓名和学号。\n<!--more-->\n挺好写的，可是我写的很幼稚，写了三个数组...\n\n![](http://l.yumud.com/image-9-18.png)\n\n然后百度别人写的：\n\n用结构体数组....一下子简洁了...又写了一下\n\n![](http://l.yumud.com/image-9-19.png)\n\n好看~","content":"<p>题目： 读入 <em>n</em>（&gt;0）名学生的<strong>姓名、学号、成绩</strong>，分别输出<strong>成绩最高</strong>和<strong>成绩最低</strong>学生的姓名和学号。</p>\n<a id=\"more\"></a>\n<p>挺好写的，可是我写的很幼稚，写了三个数组…</p>\n<p><img src=\"http://l.yumud.com/image-9-18.png\" alt></p>\n<p>然后百度别人写的：</p>\n<p>用结构体数组….一下子简洁了…又写了一下</p>\n<p><img src=\"http://l.yumud.com/image-9-19.png\" alt></p>\n<p>好看~</p>\n","slug":"pta-1001-e6-88-90-e7-bb-a9-e6-8e-92-e5-90-8d","updated":"2019-11-07T09:17:20.379Z","comments":true,"link":"","permalink":"/2019/09/10/pta-1001-e6-88-90-e7-bb-a9-e6-8e-92-e5-90-8d/","excerpt":"题目： 读入 n（&gt;0）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。","categories":[{"name":"A coin a day","slug":"A-coin-a-day","permalink":"/categories/A-coin-a-day/"}],"tags":[]},{"title":"WeUI的初步使用--安装引入","date":"2019-09-09T08:27:35.000Z","path":"2019/09/09/weui-e7-9a-84-e4-bd-bf-e7-94-a8/","text":"安装：打开https://github.com/weui/weui-wxss/ git clone文件 如上图，把这个文件复制一份到你根目录下，在全局app.wxss中引用weui.wxss @import ‘weui.wxss’;","raw":"---\ntitle: WeUI的初步使用--安装引入\nurl: 744.html\nid: 744\ncategories:\n  - 小程序\ndate: 2019-09-09 16:27:35\n---\n\n安装：打开[https://github.com/weui/weui-wxss/](https://github.com/weui/weui-wxss/) git clone文件\n\n![](http://l.yumud.com/image-9-15.png)\n\n如上图，把这个文件复制一份到你根目录下，在全局app.wxss中引用weui.wxss **@import 'weui.wxss';**","content":"<p>安装：打开<a href=\"https://github.com/weui/weui-wxss/\" target=\"_blank\" rel=\"noopener\">https://github.com/weui/weui-wxss/</a> git clone文件</p>\n<p><img src=\"http://l.yumud.com/image-9-15.png\" alt></p>\n<p>如上图，把这个文件复制一份到你根目录下，在全局app.wxss中引用weui.wxss <strong>@import ‘weui.wxss’;</strong></p>\n","slug":"weui-e7-9a-84-e4-bd-bf-e7-94-a8","updated":"2019-11-07T09:16:52.932Z","comments":true,"link":"","permalink":"/2019/09/09/weui-e7-9a-84-e4-bd-bf-e7-94-a8/","excerpt":"","categories":[{"name":"小程序","slug":"小程序","permalink":"/categories/小程序/"}],"tags":[]},{"title":"pta -1003我要通过！","date":"2019-09-09T08:06:16.000Z","path":"2019/09/09/pta-1003-e6-88-91-e8-a6-81-e9-80-9a-e8-bf-87-ef-bc-81/","text":"读了一遍，题目我竟然没看懂… 题目 我的理解：只能存在 P A T，如果存在其他字母必须为空字符或者A进行填充。 思路：判断这个字符串中是否含有其他字母，有就否决；必须由A或空字符填充。 可是怎么写，又进行不动了","raw":"---\ntitle: pta -1003我要通过！\nurl: 739.html\nid: 739\ncategories:\n  - A coin a day\ndate: 2019-09-09 16:06:16\n---\n\n读了一遍，题目我竟然没看懂...\n\n![](http://l.yumud.com/image-9-14.png)\n\n**题目**\n<!--more-->\n我的理解：只能存在 P A T，如果存在其他字母必须为空字符或者A进行填充。\n\n思路：判断这个字符串中是否含有其他字母，有就否决；必须由A或空字符填充。\n\n可是怎么写，又进行不动了","content":"<p>读了一遍，题目我竟然没看懂…</p>\n<p><img src=\"http://l.yumud.com/image-9-14.png\" alt></p>\n<p><strong>题目</strong></p>\n<a id=\"more\"></a>\n<p>我的理解：只能存在 P A T，如果存在其他字母必须为空字符或者A进行填充。</p>\n<p>思路：判断这个字符串中是否含有其他字母，有就否决；必须由A或空字符填充。</p>\n<p>可是怎么写，又进行不动了</p>\n","slug":"pta-1003-e6-88-91-e8-a6-81-e9-80-9a-e8-bf-87-ef-bc-81","updated":"2019-11-07T09:17:14.908Z","comments":true,"link":"","permalink":"/2019/09/09/pta-1003-e6-88-91-e8-a6-81-e9-80-9a-e8-bf-87-ef-bc-81/","excerpt":"读了一遍，题目我竟然没看懂… 题目","categories":[{"name":"A coin a day","slug":"A-coin-a-day","permalink":"/categories/A-coin-a-day/"}],"tags":[]},{"title":"冒泡排序","date":"2019-09-07T10:21:50.000Z","path":"2019/09/07/e5-86-92-e6-b3-a1-e6-8e-92-e5-ba-8f/","text":"从最基础的冒泡排序开始。 [等一下，回家写]–废话.jpg [然而我回家也没写，我填了一下之前的坑] –废话.jpg [然而今天也没有刷题，我躺着敲工作反思，电脑很热。确切的说，不是今天没有刷题，现在已经凌晨了] –废话.jpg ————————–正经.jpg ————————– 相邻两个数比较一下，然后小(大)放在前面，例如1852 18不需要换 1852 85=&gt;58 1582 82=&gt;28 1528(最大的已经到了最后) 152 15 不需要 152 52=&gt;25 125 1258完成 就是个嵌套的for循环，然后temp中间变量，把两个值换一下。假设有n个数，就要走n-1步，第i步中需要n-i次比较 粘代码 不，我用c还是java写，同学让我学c++，那这样两个就都会了，我感觉有点不对劲，但还是先用C++写吧","raw":"---\ntitle: 冒泡排序\nurl: 707.html\nid: 707\ncategories:\n  - 算法\ndate: 2019-09-07 18:21:50\n---\n\n从最基础的冒泡排序开始。\n\n\\[等一下，回家写\\]--废话.jpg\n<!--more-->\n\\[然而我回家也没写，我填了一下之前的坑\\] --废话.jpg\n\n\\[然而今天也没有刷题，我躺着敲工作反思，电脑很热。确切的说，不是今天没有刷题，现在已经凌晨了\\] --废话.jpg\n\n--------------------------正经.jpg --------------------------\n\n相邻两个数比较一下，然后小(大)放在前面，例如1852\n\n18不需要换 1852\n\n85=>58 1582\n\n82=>28 1528(最大的已经到了最后)\n\n152\n\n15 不需要 152\n\n52=>25 125\n\n**1258**完成\n\n就是个嵌套的for循环，然后temp中间变量，把两个值换一下。假设有n个数，就要走n-1步，第i步中需要n-i次比较\n\n粘代码\n\n不，我用c还是java写，同学让我学c++，那这样两个就都会了，我感觉有点不对劲，但还是先用C++写吧\n\n![](http://l.yumud.com/image-13.png)","content":"<p>从最基础的冒泡排序开始。</p>\n<p>[等一下，回家写]–废话.jpg</p>\n<a id=\"more\"></a>\n<p>[然而我回家也没写，我填了一下之前的坑] –废话.jpg</p>\n<p>[然而今天也没有刷题，我躺着敲工作反思，电脑很热。确切的说，不是今天没有刷题，现在已经凌晨了] –废话.jpg</p>\n<p>————————–正经.jpg ————————–</p>\n<p>相邻两个数比较一下，然后小(大)放在前面，例如1852</p>\n<p>18不需要换 1852</p>\n<p>85=&gt;58 1582</p>\n<p>82=&gt;28 1528(最大的已经到了最后)</p>\n<p>152</p>\n<p>15 不需要 152</p>\n<p>52=&gt;25 125</p>\n<p><strong>1258</strong>完成</p>\n<p>就是个嵌套的for循环，然后temp中间变量，把两个值换一下。假设有n个数，就要走n-1步，第i步中需要n-i次比较</p>\n<p>粘代码</p>\n<p>不，我用c还是java写，同学让我学c++，那这样两个就都会了，我感觉有点不对劲，但还是先用C++写吧</p>\n<p><img src=\"http://l.yumud.com/image-13.png\" alt></p>\n","slug":"e5-86-92-e6-b3-a1-e6-8e-92-e5-ba-8f","updated":"2019-11-07T09:16:27.899Z","comments":true,"link":"","permalink":"/2019/09/07/e5-86-92-e6-b3-a1-e6-8e-92-e5-ba-8f/","excerpt":"从最基础的冒泡排序开始。 [等一下，回家写]–废话.jpg","categories":[{"name":"算法","slug":"算法","permalink":"/categories/算法/"}],"tags":[]},{"title":"CC卡路里 耶","date":"2019-09-07T06:42:35.000Z","path":"2019/09/07/cc-e5-8d-a1-e8-b7-af-e9-87-8c-e8-80-b6/","text":"微信扫一扫查看，或搜索”CC卡路里”查看。 主要功能：查询食物热量，记录每日饮食，BMI身体质量测试。 优化： △加数据分析，每个月或15天，对用户记录的饮食热量进行分析=&gt;但是，没有达到记录量怎么办，目前用户不多，稳定用户更少，这样做出来的数据分析不为准=&gt;没有达到记录量，弹出“记录过少，无法生成健康账单” △ 查询页面，很严重，部分手机左滑出现1/3空白；部分手机虽然进行左滑操作，页面不出现1/3空白，但是下方会出现横向滑动条。","raw":"---\ntitle: CC卡路里 耶\nurl: 670.html\nid: 670\ncategories:\n  - Demo\ndate: 2019-09-07 14:42:35\ntop: 98\ntoc: true\n---\n![](http://l.yumud.com/gh_8490c442bd64_258-1-1.jpg)\n<!--more-->\n微信扫一扫查看，或搜索\"CC卡路里\"查看。\n\n主要功能：查询食物热量，记录每日饮食，BMI身体质量测试。\n\n**优化**：\n\n△加数据分析，每个月或15天，对用户记录的饮食热量进行分析=>但是，没有达到记录量怎么办，目前用户不多，稳定用户更少，这样做出来的数据分析不为准=>没有达到记录量，弹出“记录过少，无法生成健康账单”\n\n△ 查询页面，很严重，部分手机左滑出现1/3空白；部分手机虽然进行左滑操作，页面不出现1/3空白，但是下方会出现横向滑动条。","content":"<p><img src=\"http://l.yumud.com/gh_8490c442bd64_258-1-1.jpg\" alt></p>\n<a id=\"more\"></a>\n<p>微信扫一扫查看，或搜索”CC卡路里”查看。</p>\n<p>主要功能：查询食物热量，记录每日饮食，BMI身体质量测试。</p>\n<p><strong>优化</strong>：</p>\n<p>△加数据分析，每个月或15天，对用户记录的饮食热量进行分析=&gt;但是，没有达到记录量怎么办，目前用户不多，稳定用户更少，这样做出来的数据分析不为准=&gt;没有达到记录量，弹出“记录过少，无法生成健康账单”</p>\n<p>△ 查询页面，很严重，部分手机左滑出现1/3空白；部分手机虽然进行左滑操作，页面不出现1/3空白，但是下方会出现横向滑动条。</p>\n","slug":"cc-e5-8d-a1-e8-b7-af-e9-87-8c-e8-80-b6","updated":"2019-11-08T08:03:02.437Z","comments":true,"link":"","permalink":"/2019/09/07/cc-e5-8d-a1-e8-b7-af-e9-87-8c-e8-80-b6/","excerpt":"","categories":[{"name":"Demo","slug":"Demo","permalink":"/categories/Demo/"}],"tags":[]},{"title":"pta -1002写出这个数[初级]","date":"2019-09-07T01:56:59.000Z","path":"2019/09/07/pta-1002-e5-86-99-e5-87-ba-e8-bf-99-e4-b8-aa-e6-95-b0/","text":"题目： 读入一个正整数 **_n_，计算其各位数字之和，用汉语拼音写出和的每一位数字。** 思路=&gt;%10 /10把每一位数字存起来，写个switch case包函数里面用来判断每一位数字是什么字母 我实施了一半，写不出来 百度：把对应的字母存在一个二维数组中，%10 /10操作","raw":"---\ntitle: 'pta -1002写出这个数[初级]'\nurl: 649.html\nid: 649\ncategories:\n  - A coin a day\ndate: 2019-09-07 09:56:59\n---\n\n题目： **读入一个正整数 **_**n**_**，计算其各位数字之和，用汉语拼音写出和的每一位数字。**\n<!--more-->\n思路=>%10 /10把每一位数字存起来，写个switch case包函数里面用来判断每一位数字是什么字母\n\n我实施了一半，写不出来\n\n百度：把对应的字母存在一个二维数组中，%10 /10操作\n\n![](http://l.yumud.com/image-9-9.png)","content":"<p>题目： <strong>读入一个正整数 **_</strong>n<strong>_</strong>，计算其各位数字之和，用汉语拼音写出和的每一位数字。**</p>\n<a id=\"more\"></a>\n<p>思路=&gt;%10 /10把每一位数字存起来，写个switch case包函数里面用来判断每一位数字是什么字母</p>\n<p>我实施了一半，写不出来</p>\n<p>百度：把对应的字母存在一个二维数组中，%10 /10操作</p>\n<p><img src=\"http://l.yumud.com/image-9-9.png\" alt></p>\n","slug":"pta-1002-e5-86-99-e5-87-ba-e8-bf-99-e4-b8-aa-e6-95-b0","updated":"2019-11-07T09:17:17.890Z","comments":true,"link":"","permalink":"/2019/09/07/pta-1002-e5-86-99-e5-87-ba-e8-bf-99-e4-b8-aa-e6-95-b0/","excerpt":"题目： 读入一个正整数 **_n_，计算其各位数字之和，用汉语拼音写出和的每一位数字。**","categories":[{"name":"A coin a day","slug":"A-coin-a-day","permalink":"/categories/A-coin-a-day/"}],"tags":[]},{"title":"pta -1001害死人不偿命的(3n+1)猜想[初级]","date":"2019-09-07T01:53:10.000Z","path":"2019/09/07/pta-1001-e5-ae-b3-e6-ad-bb-e4-ba-ba-e4-b8-8d-e5-81-bf-e5-91-bd-e7-9a-843n1-e7-8c-9c-e6-83-b3/","text":"题目： 对给定的任一不超过 1000 的正整数 **_n_，简单地数一下，需要多少步（砍几下）才能得到 _n_=1？** [对3(n+1)猜想感兴趣的自行百度哦] 超简单，但是我在scanf那里加了\\n，然后编译执行，输入数据，就卡住了 百度：scanf中的\\n不是指换行，而是忽略一切空白符，直到下一个空白符出现 真的是敲代码就是个白痴–","raw":"---\ntitle: 'pta -1001害死人不偿命的(3n+1)猜想[初级]'\nurl: 642.html\nid: 642\ncategories:\n  - A coin a day\ndate: 2019-09-07 09:53:10\n---\n\n题目： **对给定的任一不超过 1000 的正整数 **_**n**_**，简单地数一下，需要多少步（砍几下）才能得到 **_**n**_**=1？** \\[对3(n+1)猜想感兴趣的自行百度哦\\]\n<!--more-->\n超简单，但是我在scanf那里加了**\\\\n**，然后编译执行，输入数据，就卡住了\n\n百度：scanf中的\\\\n不是指换行，而是忽略一切空白符，直到下一个空白符出现\n\n![](http://l.yumud.com/image-8.png)\n\n真的是敲代码就是个白痴--","content":"<p>题目： <strong>对给定的任一不超过 1000 的正整数 **_</strong>n<strong>_</strong>，简单地数一下，需要多少步（砍几下）才能得到 <strong>_</strong>n<strong>_</strong>=1？** [对3(n+1)猜想感兴趣的自行百度哦]</p>\n<a id=\"more\"></a>\n<p>超简单，但是我在scanf那里加了<strong>\\n</strong>，然后编译执行，输入数据，就卡住了</p>\n<p>百度：scanf中的\\n不是指换行，而是忽略一切空白符，直到下一个空白符出现</p>\n<p><img src=\"http://l.yumud.com/image-8.png\" alt></p>\n<p>真的是敲代码就是个白痴–</p>\n","slug":"pta-1001-e5-ae-b3-e6-ad-bb-e4-ba-ba-e4-b8-8d-e5-81-bf-e5-91-bd-e7-9a-843n1-e7-8c-9c-e6-83-b3","updated":"2019-11-07T09:17:23.811Z","comments":true,"link":"","permalink":"/2019/09/07/pta-1001-e5-ae-b3-e6-ad-bb-e4-ba-ba-e4-b8-8d-e5-81-bf-e5-91-bd-e7-9a-843n1-e7-8c-9c-e6-83-b3/","excerpt":"题目： 对给定的任一不超过 1000 的正整数 **_n_，简单地数一下，需要多少步（砍几下）才能得到 _n_=1？** [对3(n+1)猜想感兴趣的自行百度哦]","categories":[{"name":"A coin a day","slug":"A-coin-a-day","permalink":"/categories/A-coin-a-day/"}],"tags":[]},{"title":"前言【一天一块钱】","date":"2019-09-07T01:47:10.000Z","path":"2019/09/07/e5-89-8d-e8-a8-80/","text":"大一大二坚持每天刷一题，然后考了三次二级C语言，没有过哈哈哈。 之前在CSDN记了几次，发现效果不大，然后就只是单纯在电脑上刷题没有记录，现在要重新开始了，每天一题！我要考证！[真的是一个敲代码的白痴–] 等我的服务器稳定了，或者直接搬家到github，我再整一个目录吧(题目跳着做的)，现在笔记里面图片地址，跳转链接什么的，一搬家，全得换，啊呀。","raw":"---\ntitle: 前言【一天一块钱】\nurl: 638.html\nid: 638\ncategories:\n  - A coin a day\ndate: 2019-09-07 09:47:10\n---\n\n大一大二坚持每天刷一题，然后考了三次二级C语言，没有过哈哈哈。\n\n之前在CSDN记了几次，发现效果不大，然后就只是单纯在电脑上刷题没有记录，现在要重新开始了，每天一题！我要考证！\\[真的是一个敲代码的白痴--\\]\n\n等我的服务器稳定了，或者直接搬家到github，我再整一个目录吧(题目跳着做的)，现在笔记里面图片地址，跳转链接什么的，一搬家，全得换，啊呀。","content":"<p>大一大二坚持每天刷一题，然后考了三次二级C语言，没有过哈哈哈。</p>\n<p>之前在CSDN记了几次，发现效果不大，然后就只是单纯在电脑上刷题没有记录，现在要重新开始了，每天一题！我要考证！[真的是一个敲代码的白痴–]</p>\n<p>等我的服务器稳定了，或者直接搬家到github，我再整一个目录吧(题目跳着做的)，现在笔记里面图片地址，跳转链接什么的，一搬家，全得换，啊呀。</p>\n","slug":"e5-89-8d-e8-a8-80","updated":"2019-11-07T09:16:34.739Z","comments":true,"link":"","permalink":"/2019/09/07/e5-89-8d-e8-a8-80/","excerpt":"","categories":[{"name":"A coin a day","slug":"A-coin-a-day","permalink":"/categories/A-coin-a-day/"}],"tags":[]},{"title":"【搬家二】--wordpress搬github+hexo[又：github+hexo建站]","date":"2019-09-06T08:09:03.000Z","path":"2019/09/06/e3-80-90-e6-90-ac-e5-ae-b6-e4-ba-8c-e3-80-91-wordpress-e6-90-acgithubhexo/","text":"三个月服务器快到期了hh，之前冲动消费买了一年的，啥也没干，一年过去了，这次三个月满满当当，过得可真快啊 搬家搬家 1.创建仓库 在github里创建一个username.github.io的仓库 [username就是你github的用户名]，创建完，就可以通过username.github.io 访问你的网站了 2.绑定域名[你开心就绑定] 买域名，备案，解析，添加 ip，就是你在自己电脑上ping一下username.github.io，get! 然后在github中那个项目下新建一个CNAME的文件(无后缀),里面写你的域名。 3.配置SSH key[差不多就这样，看不懂百度] ssh-keygen -t rsa -C &quot;邮件地址&quot; 在本机生成一个.ssh\\id_rsa.pub文件，把里面的东西复制到github设置中,SSH and GPG keys 添加即可。4.测试是否成功 ssh -T git@github.com 就是输入这个，一个字母也别改=&gt; 成功 -------------------------------------- 开始搞hexo ————————————– 安装 npm install -g hexo 认真新建一个文件夹，初始化 hexo init hexo g //生成 hexo s //启动服务 原始主题不好看，可以去官网看一下 https://hexo.io/themes/ 改成你新下载的主题: 修改_config.yml中的theme: landscape改为theme: 新主题名，然后重新执行hexo g来重新生成。 -------------------------------------- 上传到github————————————– 修改_config.xml deploy这部分，记得改成你自己的名字 git bash中直接执行hexo d， 如果报错，在git bash中执行 npm install hexo-deployer-git –save，然后hexo d ——到此建站结束，要开始写文章了，不过我直接把我wordpress的导出，搞过来的 迁移 安装插件 npm install hexo-migrator-wordpress –save 在wordpress仪表盘中导出数据，hexo migrate wordpress source为导出的文件路径——— 在hexo新建写文章 hexo new title为文章标题 新建的文件在/source/_posts路径下。双击打开编辑即可。（文件格式为.md） 很烦，我刚注意到，我的文件是都导过去了，可是图片地址是服务器下的，那我搬的这个家，差点儿落一半…=&gt;wp-content/uploads下的图片打个包拿出来，然后，然后只能在本地一张一张的换了…所以说这个github+hexo搭网站有好有坏吧，不如云+wordpress比较方便，可以随时写两篇文章，但是免费，这一点就很优秀了…","raw":"---\ntitle: '【搬家二】--wordpress搬github+hexo[又：github+hexo建站]'\nurl: 625.html\nid: 625\ncategories:\n  - 芝士就是力量！\ndate: 2019-09-06 16:09:03\n---\n\n三个月服务器快到期了hh，之前冲动消费买了一年的，啥也没干，一年过去了，这次三个月满满当当，过得可真快啊\n\n搬家搬家\n\n**1.创建仓库**\n<!--more-->\n在github里创建一个**username.github.io**的仓库 \\[**username**就是你github的用户名\\]，创建完，就可以通过**username.github.io** 访问你的网站了\n\n**2.绑定域名**\\[你开心就绑定\\]\n\n买域名，备案，解析，添加\n\n![](http://l.yumud.com/image-10-1024x180.png)\n\nip，就是你在自己电脑上ping一下username.github.io，get!\n\n然后在github中那个项目下新建一个CNAME的文件(无后缀),里面写你的域名。\n\n**3.配置SSH key**\\[差不多就这样，看不懂百度\\]\n\n    ssh-keygen -t rsa -C \"邮件地址\"\n    在本机生成一个.ssh\\id_rsa.pub文件，把里面的东西复制到github设置中,SSH and GPG keys 添加即可。\n\n**4.测试是否成功**\n\nssh -T git@github.com\n\n就是输入这个，一个字母也别改=>\n\n![](http://l.yumud.com/image-11.png)\n\n成功\n\n\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\- 开始搞hexo --------------------------------------\n\n安装 **npm install -g hexo**\n\n认真新建一个文件夹，初始化 **hexo init**\n\n**hexo g** //生成\n\n**hexo s** //启动服务\n\n原始主题不好看，可以去官网看一下 [https://hexo.io/themes/](https://hexo.io/themes/)\n\n改成你新下载的主题:\n\n修改`_config.yml`中的`theme: landscape`改为`theme: 新主题名`，然后重新执行`hexo g`来重新生成。\n\n\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\- 上传到github--------------------------------------\n\n修改_config.xml\n\n![](http://l.yumud.com/image-12.png)\n\ndeploy这部分，记得改成你自己的名字\n\ngit bash中直接执行hexo d，\n\n如果报错，在git bash中执行 **npm install hexo-deployer-git --save**，然后hexo d\n\n------到此建站结束，要开始写文章了，不过我直接把我wordpress的导出，搞过来的\n\n**迁移**\n\n安装插件 **npm install hexo-migrator-wordpress --save**\n\n在wordpress仪表盘中导出数据，**hexo migrate wordpress** source为导出的文件路径---------\n\n在hexo**新建**写文章\n\nhexo new <title> title为文章标题\n\n新建的文件在/source/_posts路径下。双击打开编辑即可。（文件格式为.md）\n\n很烦，我刚注意到，我的文件是都导过去了，可是**图片**地址是服务器下的，那我搬的这个家，差点儿落一半...=>wp-content/uploads下的图片打个包拿出来，然后，然后只能在本地一张一张的换了...所以说这个github+hexo搭网站有好有坏吧，不如云+wordpress比较方便，可以随时写两篇文章，但是免费，这一点就很优秀了...","content":"<p>三个月服务器快到期了hh，之前冲动消费买了一年的，啥也没干，一年过去了，这次三个月满满当当，过得可真快啊</p>\n<p>搬家搬家</p>\n<p><strong>1.创建仓库</strong></p>\n<a id=\"more\"></a>\n<p>在github里创建一个<strong>username.github.io</strong>的仓库 [<strong>username</strong>就是你github的用户名]，创建完，就可以通过<strong>username.github.io</strong> 访问你的网站了</p>\n<p><strong>2.绑定域名</strong>[你开心就绑定]</p>\n<p>买域名，备案，解析，添加</p>\n<p><img src=\"http://l.yumud.com/image-10-1024x180.png\" alt></p>\n<p>ip，就是你在自己电脑上ping一下username.github.io，get!</p>\n<p>然后在github中那个项目下新建一个CNAME的文件(无后缀),里面写你的域名。</p>\n<p><strong>3.配置SSH key</strong>[差不多就这样，看不懂百度]</p>\n<pre><code>ssh-keygen -t rsa -C &quot;邮件地址&quot;\n在本机生成一个.ssh\\id_rsa.pub文件，把里面的东西复制到github设置中,SSH and GPG keys 添加即可。</code></pre><p><strong>4.测试是否成功</strong></p>\n<p>ssh -T <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a></p>\n<p>就是输入这个，一个字母也别改=&gt;</p>\n<p><img src=\"http://l.yumud.com/image-11.png\" alt></p>\n<p>成功</p>\n<p>-------------------------------------- 开始搞hexo ————————————–</p>\n<p>安装 <strong>npm install -g hexo</strong></p>\n<p>认真新建一个文件夹，初始化 <strong>hexo init</strong></p>\n<p><strong>hexo g</strong> //生成</p>\n<p><strong>hexo s</strong> //启动服务</p>\n<p>原始主题不好看，可以去官网看一下 <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/themes/</a></p>\n<p>改成你新下载的主题:</p>\n<p>修改<code>_config.yml</code>中的<code>theme: landscape</code>改为<code>theme: 新主题名</code>，然后重新执行<code>hexo g</code>来重新生成。</p>\n<p>-------------------------------------- 上传到github————————————–</p>\n<p>修改_config.xml</p>\n<p><img src=\"http://l.yumud.com/image-12.png\" alt></p>\n<p>deploy这部分，记得改成你自己的名字</p>\n<p>git bash中直接执行hexo d，</p>\n<p>如果报错，在git bash中执行 <strong>npm install hexo-deployer-git –save</strong>，然后hexo d</p>\n<p>——到此建站结束，要开始写文章了，不过我直接把我wordpress的导出，搞过来的</p>\n<p><strong>迁移</strong></p>\n<p>安装插件 <strong>npm install hexo-migrator-wordpress –save</strong></p>\n<p>在wordpress仪表盘中导出数据，<strong>hexo migrate wordpress</strong> source为导出的文件路径———</p>\n<p>在hexo<strong>新建</strong>写文章</p>\n<p>hexo new <title> title为文章标题</title></p>\n<p>新建的文件在/source/_posts路径下。双击打开编辑即可。（文件格式为.md）</p>\n<p>很烦，我刚注意到，我的文件是都导过去了，可是<strong>图片</strong>地址是服务器下的，那我搬的这个家，差点儿落一半…=&gt;wp-content/uploads下的图片打个包拿出来，然后，然后只能在本地一张一张的换了…所以说这个github+hexo搭网站有好有坏吧，不如云+wordpress比较方便，可以随时写两篇文章，但是免费，这一点就很优秀了…</p>\n","slug":"e3-80-90-e6-90-ac-e5-ae-b6-e4-ba-8c-e3-80-91-wordpress-e6-90-acgithubhexo","updated":"2019-11-07T09:16:12.438Z","comments":true,"link":"","permalink":"/2019/09/06/e3-80-90-e6-90-ac-e5-ae-b6-e4-ba-8c-e3-80-91-wordpress-e6-90-acgithubhexo/","excerpt":"三个月服务器快到期了hh，之前冲动消费买了一年的，啥也没干，一年过去了，这次三个月满满当当，过得可真快啊 搬家搬家 1.创建仓库","categories":[{"name":"芝士就是力量！","slug":"芝士就是力量！","permalink":"/categories/芝士就是力量！/"}],"tags":[]},{"title":"一些点子","date":"2019-09-06T07:52:57.000Z","path":"2019/09/06/e8-b6-85-e5-b0-8f-e7-9a-84demo/","text":"[校内互助小程序] [CC卡路里]优化 [外出安全] 这个还没的雏形，真的只是一个点子，起因是入职的那个周末搬家，半夜打车搬行李过来，自己一个人真的很害怕，尤其是当司机很吓人，有什么奇怪的举动的时候，手机电量低的吓人，充电宝在后备箱的行李箱里，又不敢挂断和朋友的电话，当时觉得，完了，心脏病复发的感觉，心跳好快，一直在电话里重复，“你在门口等我，我快到了”，手都在抖，并没有人在等我。 然后就在那么害怕的时候，我竟然在想，做一个可以安全互助的软件，你发布紧急求助，然后别人接受，在特定的地方等你(或者直接在打车路途中等你，加入路程)，更为安全的是在你打车的之前，就和你一起，然后陪你一起到达目的地。 但是女生接受这种任务可能性不大，男生你又害怕不安全，而且酬劳设置很高，不然相对时间来说，这种任务并不值得去做。 或者直接报警，显然报警并不适合这种情况，你并不能在你主观觉得危险的时候就报警，得到回应的几率很小。 安全啊，安全真的重要，每个人都很重要，但每个人得到的安全保障不一样，就假如我在杭州出了意外，我在北京的朋友和我对了暗号，即使知道我出事了，她也并不能立即赶过来，而且赶过来真的有用吗，她知道我出事的地点也微乎其微，只是知道，只是在平安的时候放心罢了…","raw":"---\ntitle: 一些点子\nurl: 618.html\nid: 618\ncategories:\n  - Demo\ndate: 2019-09-06 15:52:57\n---\n\n[\\[校内互助小程序\\]](https://thesecondlight.github.io/2019/09/05/e6-94-be-e5-9c-a8demo-e9-87-8c-e9-9d-a2/)\n\n[\\[CC卡路里\\]优化](https://thesecondlight.github.io/2019/09/07/cc-e5-8d-a1-e8-b7-af-e9-87-8c-e8-80-b6/)\n\n\\[外出安全\\]\n<!--more-->\n这个还没的雏形，真的只是一个点子，起因是入职的那个周末搬家，半夜打车搬行李过来，自己一个人真的很害怕，尤其是当司机很吓人，有什么奇怪的举动的时候，手机电量低的吓人，充电宝在后备箱的行李箱里，又不敢挂断和朋友的电话，当时觉得，完了，心脏病复发的感觉，心跳好快，一直在电话里重复，“你在门口等我，我快到了”，手都在抖，并没有人在等我。\n\n然后就在那么害怕的时候，我竟然在想，做一个可以安全互助的软件，你发布紧急求助，然后别人接受，在特定的地方等你(或者直接在打车路途中等你，加入路程)，更为安全的是在你打车的之前，就和你一起，然后陪你一起到达目的地。\n\n但是女生接受这种任务可能性不大，男生你又害怕不安全，而且酬劳设置很高，不然相对时间来说，这种任务并不值得去做。\n\n或者直接报警，显然报警并不适合这种情况，你并不能在你主观觉得危险的时候就报警，得到回应的几率很小。\n\n安全啊，安全真的重要，每个人都很重要，但每个人得到的安全保障不一样，就假如我在杭州出了意外，我在北京的朋友和我对了暗号，即使知道我出事了，她也并不能立即赶过来，而且赶过来真的有用吗，她知道我出事的地点也微乎其微，只是知道，只是在平安的时候放心罢了...","content":"<p><a href=\"https://thesecondlight.github.io/2019/09/05/e6-94-be-e5-9c-a8demo-e9-87-8c-e9-9d-a2/\" target=\"_blank\" rel=\"noopener\">[校内互助小程序]</a></p>\n<p><a href=\"https://thesecondlight.github.io/2019/09/07/cc-e5-8d-a1-e8-b7-af-e9-87-8c-e8-80-b6/\" target=\"_blank\" rel=\"noopener\">[CC卡路里]优化</a></p>\n<p>[外出安全]</p>\n<a id=\"more\"></a>\n<p>这个还没的雏形，真的只是一个点子，起因是入职的那个周末搬家，半夜打车搬行李过来，自己一个人真的很害怕，尤其是当司机很吓人，有什么奇怪的举动的时候，手机电量低的吓人，充电宝在后备箱的行李箱里，又不敢挂断和朋友的电话，当时觉得，完了，心脏病复发的感觉，心跳好快，一直在电话里重复，“你在门口等我，我快到了”，手都在抖，并没有人在等我。</p>\n<p>然后就在那么害怕的时候，我竟然在想，做一个可以安全互助的软件，你发布紧急求助，然后别人接受，在特定的地方等你(或者直接在打车路途中等你，加入路程)，更为安全的是在你打车的之前，就和你一起，然后陪你一起到达目的地。</p>\n<p>但是女生接受这种任务可能性不大，男生你又害怕不安全，而且酬劳设置很高，不然相对时间来说，这种任务并不值得去做。</p>\n<p>或者直接报警，显然报警并不适合这种情况，你并不能在你主观觉得危险的时候就报警，得到回应的几率很小。</p>\n<p>安全啊，安全真的重要，每个人都很重要，但每个人得到的安全保障不一样，就假如我在杭州出了意外，我在北京的朋友和我对了暗号，即使知道我出事了，她也并不能立即赶过来，而且赶过来真的有用吗，她知道我出事的地点也微乎其微，只是知道，只是在平安的时候放心罢了…</p>\n","slug":"e8-b6-85-e5-b0-8f-e7-9a-84demo","updated":"2019-11-08T08:26:21.316Z","comments":true,"link":"","permalink":"/2019/09/06/e8-b6-85-e5-b0-8f-e7-9a-84demo/","excerpt":"[校内互助小程序] [CC卡路里]优化 [外出安全]","categories":[{"name":"Demo","slug":"Demo","permalink":"/categories/Demo/"}],"tags":[]},{"title":"[校内互助小程序--初期构想]","date":"2019-09-05T12:37:34.000Z","path":"2019/09/05/e6-94-be-e5-9c-a8demo-e9-87-8c-e9-9d-a2/","text":"只要我留的坑多，我就一定会填的，给校内互助的构想占个位置 要解决的问题和初期构想： 登录验证 安全问题，使用教务系统账号密码？使用身份证过于麻烦，随意注册登录没有安全性=&gt;但是好像安全方面，也不用考虑过多，平时聊天群互助，也不知道身份，也是没有安全性的，所以这方面首要考虑，到底做不做这个功能。 保证金，用户发布或者接单要不要收取一定的费用，防止资源浪费 垃圾任务 垃圾任务怎么挑选出来 紧急任务 收取费用，这个要收，hh=&gt;付费置顶任务，一天只允许三篇置顶，只有一天的时限 [暂定一天￥1,一月￥9.9]，如果是垃圾任务（hdd）就删除，防止误删,所以我要手动删。 收费的话，个人小程序不允许，得有证，所以，我要留个联系方式，“ 手动收钱 ”，“ 手动置顶 ” 发布任务数量 一天三个，超过收费 接单数量 一天三个，超过收费 任务可被接单人数 如果没有选定是大量，则只允许三人接单，发布者进行挑选，截止时间到，进入垃圾箱，解散该任务[要不要有回收站？]选定是大量，则被允许接单为发布者选定的人数。 反悔 发布者取消，接单者取消，无碍？还是设置点儿惩罚 交易 成功后，发布者可以选定接单者，查看信息，加好友或者邮箱联系，金钱交易不在小程序中，完全的线下交易，或其他平台交易，小程序只负责发单，接单，不承担任何责任 用户投诉 直接在主页面设置投诉 预留账号 记得预留一个账号，把接收的投诉信息搞出来，“投诉处理页面”，可以直接在此页面进行投诉信息处理。","raw":"---\ntitle: '[校内互助小程序--初期构想]'\nurl: 593.html\nid: 593\ncategories:\n  - Demo\ndate: 2019-09-05 20:37:34\n---\n\n只要我留的坑多，我就一定会填的，给校内互助的构想占个位置\n\n要解决的问题和初期构想：\n\n**登录验证** 安全问题，使用教务系统账号密码？使用身份证过于麻烦，随意注册登录没有安全性=>但是好像安全方面，也不用考虑过多，平时聊天群互助，也不知道身份，也是没有安全性的，所以这方面首要考虑，**到底做不做这个功能。**\n<!--more-->\n**保证金**，用户发布或者接单要不要收取一定的费用，防止资源浪费\n\n**垃圾任务** 垃圾任务怎么挑选出来\n\n**紧急任务** 收取费用，这个要收，hh=>付费置顶任务，一天只允许三篇置顶，只有一天的时限 \\[暂定一天￥1,一月￥9.9\\]，如果是垃圾任务（hdd）就删除，防止误删,所以我要手动删。\n\n收费的话，个人小程序不允许，得有证，所以，我要留个联系方式，“ 手动收钱 ”，“ 手动置顶 ”\n\n**发布任务数量** 一天三个，超过收费\n\n**接单数量** 一天三个，超过收费\n\n**任务可被接单人数** 如果没有选定是大量，则只允许三人接单，发布者进行挑选，截止时间到，进入垃圾箱，解散该任务\\[要不要有回收站？\\]选定是大量，则被允许接单为发布者选定的人数。\n\n**反悔** 发布者取消，接单者取消，无碍？还是设置点儿惩罚\n\n**交易** 成功后，发布者可以选定接单者，查看信息，加好友或者邮箱联系，金钱交易不在小程序中，完全的线下交易，或其他平台交易，小程序只负责发单，接单，**不承担任何责任**\n\n**用户投诉** 直接在主页面设置投诉\n\n**预留账号** 记得预留一个账号，把接收的投诉信息搞出来，“投诉处理页面”，可以直接在此页面进行投诉信息处理。","content":"<p>只要我留的坑多，我就一定会填的，给校内互助的构想占个位置</p>\n<p>要解决的问题和初期构想：</p>\n<p><strong>登录验证</strong> 安全问题，使用教务系统账号密码？使用身份证过于麻烦，随意注册登录没有安全性=&gt;但是好像安全方面，也不用考虑过多，平时聊天群互助，也不知道身份，也是没有安全性的，所以这方面首要考虑，<strong>到底做不做这个功能。</strong></p>\n<a id=\"more\"></a>\n<p><strong>保证金</strong>，用户发布或者接单要不要收取一定的费用，防止资源浪费</p>\n<p><strong>垃圾任务</strong> 垃圾任务怎么挑选出来</p>\n<p><strong>紧急任务</strong> 收取费用，这个要收，hh=&gt;付费置顶任务，一天只允许三篇置顶，只有一天的时限 [暂定一天￥1,一月￥9.9]，如果是垃圾任务（hdd）就删除，防止误删,所以我要手动删。</p>\n<p>收费的话，个人小程序不允许，得有证，所以，我要留个联系方式，“ 手动收钱 ”，“ 手动置顶 ”</p>\n<p><strong>发布任务数量</strong> 一天三个，超过收费</p>\n<p><strong>接单数量</strong> 一天三个，超过收费</p>\n<p><strong>任务可被接单人数</strong> 如果没有选定是大量，则只允许三人接单，发布者进行挑选，截止时间到，进入垃圾箱，解散该任务[要不要有回收站？]选定是大量，则被允许接单为发布者选定的人数。</p>\n<p><strong>反悔</strong> 发布者取消，接单者取消，无碍？还是设置点儿惩罚</p>\n<p><strong>交易</strong> 成功后，发布者可以选定接单者，查看信息，加好友或者邮箱联系，金钱交易不在小程序中，完全的线下交易，或其他平台交易，小程序只负责发单，接单，<strong>不承担任何责任</strong></p>\n<p><strong>用户投诉</strong> 直接在主页面设置投诉</p>\n<p><strong>预留账号</strong> 记得预留一个账号，把接收的投诉信息搞出来，“投诉处理页面”，可以直接在此页面进行投诉信息处理。</p>\n","slug":"e6-94-be-e5-9c-a8demo-e9-87-8c-e9-9d-a2","updated":"2019-11-08T08:03:49.132Z","comments":true,"link":"","permalink":"/2019/09/05/e6-94-be-e5-9c-a8demo-e9-87-8c-e9-9d-a2/","excerpt":"只要我留的坑多，我就一定会填的，给校内互助的构想占个位置 要解决的问题和初期构想： 登录验证 安全问题，使用教务系统账号密码？使用身份证过于麻烦，随意注册登录没有安全性=&gt;但是好像安全方面，也不用考虑过多，平时聊天群互助，也不知道身份，也是没有安全性的，所以这方面首要考虑，到底做不做这个功能。","categories":[{"name":"Demo","slug":"Demo","permalink":"/categories/Demo/"}],"tags":[]},{"title":"mysql--第二次系统学习时的笔记","date":"2019-09-05T12:20:44.000Z","path":"2019/09/05/mysql-e7-ac-ac-e4-ba-8c-e6-ac-a1-e7-b3-bb-e7-bb-9f-e5-ad-a6-e4-b9-a0-e6-97-b6-e7-9a-84-e7-ac-94-e8-ae-b0/","text":"直接粘贴会串行，贴个链接[有道云笔记] 文档：hhhMYSQL.note链接： http://note.youdao.com/noteshare?id=6d7727b115b2b7c3498c726b876bcfbd&amp;sub=155CA2FFD61948EFAF00D4936D406087","raw":"---\ntitle: mysql--第二次系统学习时的笔记\nurl: 582.html\nid: 582\ncategories:\n  - mysql\ndate: 2019-09-05 20:20:44\n---\n\n直接粘贴会串行，贴个链接\\[有道云笔记\\]\n\n文档：hhhMYSQL.note  \n链接：\n\n[http://note.youdao.com/noteshare?id=6d7727b115b2b7c3498c726b876bcfbd&sub=155CA2FFD61948EFAF00D4936D406087](http://note.youdao.com/noteshare?id=6d7727b115b2b7c3498c726b876bcfbd&sub=155CA2FFD61948EFAF00D4936D406087)","content":"<p>直接粘贴会串行，贴个链接[有道云笔记]</p>\n<p>文档：hhhMYSQL.note<br>链接：</p>\n<p><a href=\"http://note.youdao.com/noteshare?id=6d7727b115b2b7c3498c726b876bcfbd&sub=155CA2FFD61948EFAF00D4936D406087\" target=\"_blank\" rel=\"noopener\">http://note.youdao.com/noteshare?id=6d7727b115b2b7c3498c726b876bcfbd&amp;sub=155CA2FFD61948EFAF00D4936D406087</a></p>\n","slug":"mysql-e7-ac-ac-e4-ba-8c-e6-ac-a1-e7-b3-bb-e7-bb-9f-e5-ad-a6-e4-b9-a0-e6-97-b6-e7-9a-84-e7-ac-94-e8-ae-b0","updated":"2019-11-07T09:17:40.180Z","comments":true,"link":"","permalink":"/2019/09/05/mysql-e7-ac-ac-e4-ba-8c-e6-ac-a1-e7-b3-bb-e7-bb-9f-e5-ad-a6-e4-b9-a0-e6-97-b6-e7-9a-84-e7-ac-94-e8-ae-b0/","excerpt":"","categories":[{"name":"mysql","slug":"mysql","permalink":"/categories/mysql/"}],"tags":[]},{"title":"我一点一点了解的正则表达式","date":"2019-09-05T12:13:55.000Z","path":"2019/09/05/e6-88-91-e4-b8-80-e7-82-b9-e4-b8-80-e7-82-b9-e4-ba-86-e8-a7-a3-e7-9a-84-e6-ad-a3-e5-88-99-e8-a1-a8-e8-be-be-e5-bc-8f/","text":"[TOC]目录见右下方… 1.\\/\\*/*g, “” 全局用空替换\\ [第一个\\为转义字符] 2.小程序的模糊查询在做CC卡路里的时候，用到了模糊查询 在数据库test中，根据用户输入的字段，查询数据库，显示模糊查询的结果，i为大小写不敏感 微信小程序文档“正则”=&gt; https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-client-api/database/db.regexp.html 3.正向预查 反向预查正向预查(?=)满足前面的表达式 eg: /\\b[/w]+(?=ing\\b)/g/匹配全局带ing的单词，但是不要ing 反向预查(?&lt;=)满足后面的表达式 eg:/(?&lt;=index\\.ts)/ 匹配以.ts结尾 ,左边是index /g 全局匹配 /w匹配字母，数字，下划线 /d匹配数字 /b匹配单词的边界 ^匹配字符串的开始 $ 匹配字符串的结束 4.","raw":"---\ntitle: 我一点一点了解的正则表达式\nurl: 573.html\nid: 573\ncategories:\n  - 正则表达式\ndate: 2019-09-05 20:13:55\n---\n\n[TOC]\n目录见右下方...\n#### 1.\\\n\n**/**\\\\\\**/**g, \"\" 全局用空替换\\ \\[第一个\\\\为转义字符\\]\n\n#### 2.小程序的模糊查询\n\n在做CC卡路里的时候，用到了模糊查询\n\n![](http://l.yumud.com/image-7.png)\n<!--more-->\n在数据库test中，根据用户输入的字段，查询数据库，显示模糊查询的结果，i为大小写不敏感\n\n微信小程序文档“正则”=>\n\n[https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-client-api/database/db.regexp.html](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-client-api/database/db.regexp.html)\n\n#### 3.正向预查 反向预查\n\n正向预查(?=)满足前面的表达式 eg: /\\b[/w]+(?=ing\\b)/g/匹配全局带ing的单词，但是不要ing\n\n\n\n反向预查(?<=)满足后面的表达式 eg:/(?<=index\\\\\\.ts)/ 匹配以.ts结尾 ,左边是index\n\n\n\n/g 全局匹配\n\n\n\n/w匹配字母，数字，下划线\n\n\n\n/d匹配数字\n\n\n\n/b匹配单词的边界\n\n\n\n^匹配字符串的开始\n\n\n\n$ 匹配字符串的结束\n\n#### 4.","content":"<p>[TOC]<br>目录见右下方…</p>\n<h4 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\\\"></a>1.\\</h4><p><strong>/</strong>\\*<em>/*</em>g, “” 全局用空替换\\ [第一个\\为转义字符]</p>\n<h4 id=\"2-小程序的模糊查询\"><a href=\"#2-小程序的模糊查询\" class=\"headerlink\" title=\"2.小程序的模糊查询\"></a>2.小程序的模糊查询</h4><p>在做CC卡路里的时候，用到了模糊查询</p>\n<p><img src=\"http://l.yumud.com/image-7.png\" alt></p>\n<a id=\"more\"></a>\n<p>在数据库test中，根据用户输入的字段，查询数据库，显示模糊查询的结果，i为大小写不敏感</p>\n<p>微信小程序文档“正则”=&gt;</p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-client-api/database/db.regexp.html\" target=\"_blank\" rel=\"noopener\">https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-client-api/database/db.regexp.html</a></p>\n<h4 id=\"3-正向预查-反向预查\"><a href=\"#3-正向预查-反向预查\" class=\"headerlink\" title=\"3.正向预查 反向预查\"></a>3.正向预查 反向预查</h4><p>正向预查(?=)满足前面的表达式 eg: /\\b[/w]+(?=ing\\b)/g/匹配全局带ing的单词，但是不要ing</p>\n<p>反向预查(?&lt;=)满足后面的表达式 eg:/(?&lt;=index\\.ts)/ 匹配以.ts结尾 ,左边是index</p>\n<p>/g 全局匹配</p>\n<p>/w匹配字母，数字，下划线</p>\n<p>/d匹配数字</p>\n<p>/b匹配单词的边界</p>\n<p>^匹配字符串的开始</p>\n<p>$ 匹配字符串的结束</p>\n<h4 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a>4.</h4>","slug":"e6-88-91-e4-b8-80-e7-82-b9-e4-b8-80-e7-82-b9-e4-ba-86-e8-a7-a3-e7-9a-84-e6-ad-a3-e5-88-99-e8-a1-a8-e8-be-be-e5-bc-8f","updated":"2019-11-07T09:18:28.677Z","comments":true,"link":"","permalink":"/2019/09/05/e6-88-91-e4-b8-80-e7-82-b9-e4-b8-80-e7-82-b9-e4-ba-86-e8-a7-a3-e7-9a-84-e6-ad-a3-e5-88-99-e8-a1-a8-e8-be-be-e5-bc-8f/","excerpt":"[TOC]目录见右下方… 1.\\/\\*/*g, “” 全局用空替换\\ [第一个\\为转义字符] 2.小程序的模糊查询在做CC卡路里的时候，用到了模糊查询","categories":[{"name":"正则表达式","slug":"正则表达式","permalink":"/categories/正则表达式/"}],"tags":[]},{"title":"git--基本操作","date":"2019-09-05T11:56:27.000Z","path":"2019/09/05/git-e5-9f-ba-e6-9c-ac-e6-93-8d-e4-bd-9c/","text":"是大一开始用git，随手记的笔记，加粗为常用【记得把本地生成的ssh搞到github的设置里】【有点儿乱，但是只要之前粗略了解过，你再用这个查操作就很简单了，不乱！】 总而言之，言而总之 【你啥也没有，只是下载了git，如下操作】新建一个仓库，上传到github git init git add . git commit -m ‘备注’ git remote add origin https://balabal git pull –rebase origin master[远程仓库不为空，必须做这一步] git push -u origin master 【你git clone完代码，也修改了，要上传，如下操作】 git add . git commit -m “备注” git push origin master (从远程库更新本地库) git pull origin 上传到某一分支 很久了，忘了从哪里截的– git status查看项目的当前状态 git init 将该文件夹变为git仓库将工作目录的文件放入git仓库只需要两步： -git add 文件名 -git commit -m “你干了什么” git log命令显示从最近到最远的提交日志 查看历史 type 显示txt中的内容查看状态 git status 倒退一步（最近的一次操作）: 、 git reset HARD~ git reset –hard 版本号（commit_d前几位就行，次数不多的情况下） 使用git log查看提交记录，以便于要回退到哪个版本 git reflog查看命令历史恢复原有操作（就是撤销你的这次的操作）： 将暂存区域恢复之前的状态哦 git checkout – 文件名 放入暂存区撤销 git reset head 文件名 git checkout – 文件名删除 在cmd中del 文件名 git rm 文件名 git commit -m “” 在版本库里删除无法找回 在误删的情况下可以 git checkout – 文件名 关联一个远程库 本地-&gt;远程git remote add origin git@github.com:thesecondlight/xxx.git 关联后推送内容 git push -u origin master 第一次推送master分支所有内容之后git push origin master『出现remote origin already exists git remote rm origin』从远程库克隆下一个本地库 远程库-&gt;本地库git clone git@github.com:thesecondlight/xxx.git 从远程库更新本地库git pull origin master 新建一个.txt echo “this is a txt”&gt;&gt;read.txt查看尚未缓存的改动 变更的内容git diff 查看已缓存的改动 git diff –cashed删除文件 git rm -f(强制) 重命名 git mv old new创建分支 git branch (branchname) 切换分支git checkout (branchname)创建并切换git checkout -b branchname合并分支命令git merge branchname 合并（branchname）指定分支到当前分支列出分支git branch删除分支git branch -d branchname常见报错http://blog.csdn.net/dengjianqiang2011/article/details/9260435git pull origin master更新本地库push推送","raw":"---\ntitle: git--基本操作\nurl: 563.html\nid: 563\ncategories:\n  - git\ndate: 2019-09-05 19:56:27\n---\n\n是大一开始用git，随手记的笔记，加粗为常用【记得把本地生成的ssh搞到github的设置里】【有点儿乱，但是只要之前粗略了解过，你再用这个查操作就很简单了，不乱！】\n\n总而言之，言而总之\n\n**【你啥也没有，只是下载了git，如下操作】新建一个仓库，上传到github**\n\ngit init\n\ngit add .\n\ngit commit -m '备注'\n<!--more-->\ngit remote add origin [https://balabal](https://balabal)\n\ngit pull --rebase origin master\\[远程仓库不为空，必须做这一步\\]\n\ngit push -u origin master\n\n**【你git clone完代码，也修改了，要上传，如下操作】**\n\ngit add .\n\ngit commit -m \"备注\"\n\ngit push origin master (从远程库更新本地库)\n\ngit pull origin <branch> 上传到某一分支<branch>\n\n![](http://l.yumud.com/image-9-6.png)\n\n很久了，忘了从哪里截的--\n\n**git status查看项目的当前状态**\n\ngit init 将该文件夹变为git仓库  \n将工作目录的文件放入git仓库只需要两步：\n\n-git add 文件名\n\n-git commit -m \"你干了什么\"\n\n  \n**git log**命令显示从最近到最远的提交日志 **查看历史**\n\ntype 显示txt中的内容  \n查看状态 git status\n\n倒退一步（最近的一次操作）: 、\n\ngit reset HARD~\n\ngit reset --hard 版本号（commit_d前几位就行，次数不多的情况下）\n\n  \n使用git log查看提交记录，以便于要回退到哪个版本\n\ngit reflog查看命令历史  \n恢复原有操作（就是撤销你的这次的操作）：\n\n将暂存区域恢复之前的状态哦\n\ngit checkout -- 文件名\n\n放入暂存区撤销\n\ngit reset head 文件名\n\ngit checkout -- 文件名  \n删除\n\n在cmd中del 文件名\n\ngit rm 文件名\n\ngit commit -m \"\"\n\n在版本库里删除无法找回\n\n在误删的情况下可以\n\ngit checkout -- 文件名  \n\n关联一个远程库\n\n本地->远程git remote add origin git@github.com:thesecondlight/xxx.git\n\n关联后推送内容 git push -u origin master 第一次推送master分支所有内容之后git push origin master  \n『出现remote origin already exists git remote rm origin』  \n从远程库克隆下一个本地库 远程库->本地库git clone git@github.com:thesecondlight/xxx.git\n\n从远程库更新本地库git pull origin master\n\n新建一个.txt\n\necho \"this is a txt\">>read.txt  \n**查看尚未缓存的改动 变更的内容git diff**\n\n查看已缓存的改动 git diff --cashed  \n删除文件 git rm -f(强制) <file>  \n重命名 git mv old new  \n**创建分支 git branch (branchname)**\n\n**切换分支git checkout (branchname)**  \n创建并切换git checkout -b branchname  \n合并分支命令git merge branchname\n\n合并（branchname）指定分支到当前分支列出分支git branch  \n删除分支git branch -d branchname  \n常见报错[http://blog.csdn.net/dengjianqiang2011/article/details/9260435](http://blog.csdn.net/dengjianqiang2011/article/details/9260435)  \n**git pull origin master更新本地库push推送**","content":"<p>是大一开始用git，随手记的笔记，加粗为常用【记得把本地生成的ssh搞到github的设置里】【有点儿乱，但是只要之前粗略了解过，你再用这个查操作就很简单了，不乱！】</p>\n<p>总而言之，言而总之</p>\n<p><strong>【你啥也没有，只是下载了git，如下操作】新建一个仓库，上传到github</strong></p>\n<p>git init</p>\n<p>git add .</p>\n<p>git commit -m ‘备注’</p>\n<a id=\"more\"></a>\n<p>git remote add origin <a href=\"https://balabal\" target=\"_blank\" rel=\"noopener\">https://balabal</a></p>\n<p>git pull –rebase origin master[远程仓库不为空，必须做这一步]</p>\n<p>git push -u origin master</p>\n<p><strong>【你git clone完代码，也修改了，要上传，如下操作】</strong></p>\n<p>git add .</p>\n<p>git commit -m “备注”</p>\n<p>git push origin master (从远程库更新本地库)</p>\n<p>git pull origin <branch> 上传到某一分支<branch></branch></branch></p>\n<p><img src=\"http://l.yumud.com/image-9-6.png\" alt></p>\n<p>很久了，忘了从哪里截的–</p>\n<p><strong>git status查看项目的当前状态</strong></p>\n<p>git init 将该文件夹变为git仓库<br>将工作目录的文件放入git仓库只需要两步：</p>\n<p>-git add 文件名</p>\n<p>-git commit -m “你干了什么”</p>\n<p><strong>git log</strong>命令显示从最近到最远的提交日志 <strong>查看历史</strong></p>\n<p>type 显示txt中的内容<br>查看状态 git status</p>\n<p>倒退一步（最近的一次操作）: 、</p>\n<p>git reset HARD~</p>\n<p>git reset –hard 版本号（commit_d前几位就行，次数不多的情况下）</p>\n<p>使用git log查看提交记录，以便于要回退到哪个版本</p>\n<p>git reflog查看命令历史<br>恢复原有操作（就是撤销你的这次的操作）：</p>\n<p>将暂存区域恢复之前的状态哦</p>\n<p>git checkout – 文件名</p>\n<p>放入暂存区撤销</p>\n<p>git reset head 文件名</p>\n<p>git checkout – 文件名<br>删除</p>\n<p>在cmd中del 文件名</p>\n<p>git rm 文件名</p>\n<p>git commit -m “”</p>\n<p>在版本库里删除无法找回</p>\n<p>在误删的情况下可以</p>\n<p>git checkout – 文件名  </p>\n<p>关联一个远程库</p>\n<p>本地-&gt;远程git remote add origin <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:thesecondlight/xxx.git</p>\n<p>关联后推送内容 git push -u origin master 第一次推送master分支所有内容之后git push origin master<br>『出现remote origin already exists git remote rm origin』<br>从远程库克隆下一个本地库 远程库-&gt;本地库git clone <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:thesecondlight/xxx.git</p>\n<p>从远程库更新本地库git pull origin master</p>\n<p>新建一个.txt</p>\n<p>echo “this is a txt”&gt;&gt;read.txt<br><strong>查看尚未缓存的改动 变更的内容git diff</strong></p>\n<p>查看已缓存的改动 git diff –cashed<br>删除文件 git rm -f(强制) <file><br>重命名 git mv old new<br><strong>创建分支 git branch (branchname)</strong></file></p>\n<p><strong>切换分支git checkout (branchname)</strong><br>创建并切换git checkout -b branchname<br>合并分支命令git merge branchname</p>\n<p>合并（branchname）指定分支到当前分支列出分支git branch<br>删除分支git branch -d branchname<br>常见报错<a href=\"http://blog.csdn.net/dengjianqiang2011/article/details/9260435\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/dengjianqiang2011/article/details/9260435</a><br><strong>git pull origin master更新本地库push推送</strong></p>\n","slug":"git-e5-9f-ba-e6-9c-ac-e6-93-8d-e4-bd-9c","updated":"2019-11-07T09:18:19.916Z","comments":true,"link":"","permalink":"/2019/09/05/git-e5-9f-ba-e6-9c-ac-e6-93-8d-e4-bd-9c/","excerpt":"是大一开始用git，随手记的笔记，加粗为常用【记得把本地生成的ssh搞到github的设置里】【有点儿乱，但是只要之前粗略了解过，你再用这个查操作就很简单了，不乱！】 总而言之，言而总之 【你啥也没有，只是下载了git，如下操作】新建一个仓库，上传到github git init git add . git commit -m ‘备注’","categories":[{"name":"git","slug":"git","permalink":"/categories/git/"}],"tags":[]},{"title":"koa小知识","date":"2019-09-04T07:40:15.000Z","path":"2019/09/04/koa-e5-b0-8f-e7-9f-a5-e8-af-86/","text":"全局添加层级： 加了一个yumu层 访问时需要加一个/yumu,然后加/**,才能访问到，下面还是这么写就行，访问时注意就好了。[注意，此为全局设置] 单个页面添加层级： 酱样儿","raw":"---\ntitle: koa小知识\nurl: 551.html\nid: 551\ncategories:\n  - koa\ndate: 2019-09-04 15:40:15\n---\n\n**全局添加层级：**\n\n![](http://l.yumud.com/image-9-2.png)\n\n加了一个yumu层\n<!--more-->\n![](http://l.yumud.com/image-9-3.png)\n\n访问时需要加一个/yumu,然后加/**,才能访问到，下面还是这么写就行，访问时注意就好了。\\[注意，此为全局设置\\]\n\n![](http://l.yumud.com/image-9-3.png)\n\n**单个页面添加层级：**\n\n![](http://l.yumud.com/image-9-3.png)\n\n酱样儿","content":"<p><strong>全局添加层级：</strong></p>\n<p><img src=\"http://l.yumud.com/image-9-2.png\" alt></p>\n<p>加了一个yumu层</p>\n<a id=\"more\"></a>\n<p><img src=\"http://l.yumud.com/image-9-3.png\" alt></p>\n<p>访问时需要加一个/yumu,然后加/**,才能访问到，下面还是这么写就行，访问时注意就好了。[注意，此为全局设置]</p>\n<p><img src=\"http://l.yumud.com/image-9-3.png\" alt></p>\n<p><strong>单个页面添加层级：</strong></p>\n<p><img src=\"http://l.yumud.com/image-9-3.png\" alt></p>\n<p>酱样儿</p>\n","slug":"koa-e5-b0-8f-e7-9f-a5-e8-af-86","updated":"2019-11-07T09:17:42.452Z","comments":true,"link":"","permalink":"/2019/09/04/koa-e5-b0-8f-e7-9f-a5-e8-af-86/","excerpt":"全局添加层级： 加了一个yumu层","categories":[{"name":"koa","slug":"koa","permalink":"/categories/koa/"}],"tags":[]},{"title":"koa-bodyparser中间件的使用[未完]","date":"2019-09-04T05:44:43.000Z","path":"2019/09/04/koa-bodyparser-e4-b8-ad-e9-97-b4-e4-bb-b6-e7-9a-84-e4-bd-bf-e7-94-a8/","text":"可以自己写代码解析post请求，例如酱样儿 文件夹根目录下新建index.js 也可以使用koa-bodyparser这个中间件，一个造好的轮子=&gt; koa-bodyparser可以把koa2上下文的formData数据解析到ctx.request.body中,来看一下代码 先安装 npm install –save koa-bodyparser@3 https://blog.csdn.net/zhouzy539/article/details/97247916（npm install, npm install –save, npm install –save-dev的区别） 等一下，看一下视频，看文档没懂","raw":"---\ntitle: 'koa-bodyparser中间件的使用[未完]'\nurl: 539.html\nid: 539\ncategories:\n  - koa\ndate: 2019-09-04 13:44:43\n---\n\n可以自己写代码解析post请求，例如酱样儿\n\n![](http://l.yumud.com/image-9-0.png)\n\n![](http://l.yumud.com/image-9-1.png)\n\n文件夹根目录下新建index.js\n<!--more-->\n也可以使用koa-bodyparser这个中间件，一个造好的轮子=>\n\nkoa-bodyparser可以把koa2上下文的formData数据解析到ctx.request.body中,来看一下代码\n\n先安装 npm install --save koa-bodyparser@3\n\n[https://blog.csdn.net/zhouzy539/article/details/97247916](https://blog.csdn.net/zhouzy539/article/details/97247916)（npm install, npm install --save, npm install --save-dev的区别）\n\n等一下，看一下视频，看文档没懂","content":"<p>可以自己写代码解析post请求，例如酱样儿</p>\n<p><img src=\"http://l.yumud.com/image-9-0.png\" alt></p>\n<p><img src=\"http://l.yumud.com/image-9-1.png\" alt></p>\n<p>文件夹根目录下新建index.js</p>\n<a id=\"more\"></a>\n<p>也可以使用koa-bodyparser这个中间件，一个造好的轮子=&gt;</p>\n<p>koa-bodyparser可以把koa2上下文的formData数据解析到ctx.request.body中,来看一下代码</p>\n<p>先安装 npm install –save koa-bodyparser@3</p>\n<p><a href=\"https://blog.csdn.net/zhouzy539/article/details/97247916\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zhouzy539/article/details/97247916</a>（npm install, npm install –save, npm install –save-dev的区别）</p>\n<p>等一下，看一下视频，看文档没懂</p>\n","slug":"koa-bodyparser-e4-b8-ad-e9-97-b4-e4-bb-b6-e7-9a-84-e4-bd-bf-e7-94-a8","updated":"2019-11-07T09:17:44.876Z","comments":true,"link":"","permalink":"/2019/09/04/koa-bodyparser-e4-b8-ad-e9-97-b4-e4-bb-b6-e7-9a-84-e4-bd-bf-e7-94-a8/","excerpt":"可以自己写代码解析post请求，例如酱样儿 文件夹根目录下新建index.js","categories":[{"name":"koa","slug":"koa","permalink":"/categories/koa/"}],"tags":[]},{"title":"egg-mysql","date":"2019-08-30T06:48:52.000Z","path":"2019/08/30/egg-mysql/","text":"首先，安装与配置 npm install egg-mysql config/plugin.js 然后在config/config.default.js里面按照下图添加一下，password是连接mysql的密码（注意数据库的版本，版本过低可能报错==&gt;报这个” Client does not support authentication protocol requested by server; consider upgrading MySQL client（客户端不支持服务器请求的身份验证协议；请考虑升级MySQL客户端） “====&gt;升级mysql(即重装哈哈哈哈哈)） config/config.default.js 然后简单的操作一下 在app/controller下新建一个suibian.js，查询test1表中的所有数据 ‘use strict’;const Controller = require(‘egg’).Controller;class HomeController extends Controller { async index() { const result=await this.app.mysql.query(“select * from test1”); this.ctx.body=result; }}module.exports = HomeController; 如果你没出错，就完成了，其他的操作语句，去官方文档看一下，报错一般是mysql版本问题 #注意mysql配置那里是否正确，语句是否出现错误，流程没错，注意router。 github地址：https://github.com/thesecondlight/egg_mysql 注册登录","raw":"---\ntitle: egg-mysql\nurl: 528.html\nid: 528\ncategories:\n  - 嗨~egg\ndate: 2019-08-30 14:48:52\n---\n\n首先，安装与配置\n\nnpm install egg-mysql\n\n![](http://l.yumud.com/image-60.png)\n<!--more-->\nconfig/plugin.js\n\n然后在config/config.default.js里面按照下图添加一下，password是连接mysql的密码（注意数据库的版本，版本过低可能报错==>报这个\" Client does not support authentication protocol requested by server; consider upgrading MySQL client（客户端不支持服务器请求的身份验证协议；请考虑升级MySQL客户端） \"====>升级mysql(即重装哈哈哈哈哈)）\n\n![](http://l.yumud.com/image-61.png)\n\nconfig/config.default.js\n\n然后简单的操作一下\n\n在app/controller下新建一个suibian.js，查询test1表中的所有数据\n\n'use strict';  \nconst Controller = require('egg').Controller;  \nclass HomeController extends Controller { async index() { const result=**await this.app.mysql.query(\"select * from test1\");** this.ctx.body=result; }}  \nmodule.exports = HomeController;  \n\n如果你没出错，就完成了，其他的操作语句，去官方文档看一下，报错一般是mysql版本问题\n\n#注意mysql配置那里是否正确，语句是否出现错误，流程没错，注意router。\n\ngithub地址：[https://github.com/thesecondlight/egg_mysql](https://github.com/thesecondlight/egg_mysql) 注册登录","content":"<p>首先，安装与配置</p>\n<p>npm install egg-mysql</p>\n<p><img src=\"http://l.yumud.com/image-60.png\" alt></p>\n<a id=\"more\"></a>\n<p>config/plugin.js</p>\n<p>然后在config/config.default.js里面按照下图添加一下，password是连接mysql的密码（注意数据库的版本，版本过低可能报错==&gt;报这个” Client does not support authentication protocol requested by server; consider upgrading MySQL client（客户端不支持服务器请求的身份验证协议；请考虑升级MySQL客户端） “====&gt;升级mysql(即重装哈哈哈哈哈)）</p>\n<p><img src=\"http://l.yumud.com/image-61.png\" alt></p>\n<p>config/config.default.js</p>\n<p>然后简单的操作一下</p>\n<p>在app/controller下新建一个suibian.js，查询test1表中的所有数据</p>\n<p>‘use strict’;<br>const Controller = require(‘egg’).Controller;<br>class HomeController extends Controller { async index() { const result=<strong>await this.app.mysql.query(“select * from test1”);</strong> this.ctx.body=result; }}<br>module.exports = HomeController;  </p>\n<p>如果你没出错，就完成了，其他的操作语句，去官方文档看一下，报错一般是mysql版本问题</p>\n<p>#注意mysql配置那里是否正确，语句是否出现错误，流程没错，注意router。</p>\n<p>github地址：<a href=\"https://github.com/thesecondlight/egg_mysql\" target=\"_blank\" rel=\"noopener\">https://github.com/thesecondlight/egg_mysql</a> 注册登录</p>\n","slug":"egg-mysql","updated":"2019-11-07T09:19:11.732Z","comments":true,"link":"","permalink":"/2019/08/30/egg-mysql/","excerpt":"首先，安装与配置 npm install egg-mysql","categories":[{"name":"嗨~egg","slug":"嗨-egg","permalink":"/categories/嗨-egg/"}],"tags":[]},{"title":"别人的芝士~","date":"2019-08-29T10:23:49.000Z","path":"2019/08/29/e5-88-ab-e4-ba-ba-e7-9a-84-e8-8a-9d-e5-a3-ab/","text":"1.get和post的区别 https://www.cnblogs.com/logsharing/p/8448446.html 提取的重点 2.egg连接数据库报错：Client does not support authentication protocol requested by server; consider upgrading MySQL client（客户端不支持服务器请求的身份验证协议；请考虑升级MySQL客户端） （我的错误显示在页面中为insert等操作未定义） 升级数据库===&gt;重装哈哈哈哈哈 3.正则 https://www.cnblogs.com/minz/p/5975444.html 4.pta乙级题目分类整理 https://blog.csdn.net/zhanshen112/article/details/84640183 刷题必备 他的csdn里面还有对应的答案解析 https://blog.csdn.net/zhanshen112/article/details/84672638","raw":"---\ntitle: 别人的芝士~\nurl: 514.html\nid: 514\ncategories:\n  - 芝士就是力量！\ndate: 2019-08-29 18:23:49\n---\n\n1.get和post的区别\n\n[https://www.cnblogs.com/logsharing/p/8448446.html](https://www.cnblogs.com/logsharing/p/8448446.html)\n\n![](http://l.yumud.com/image-59.png)\n<!--more-->\n提取的重点\n\n2.egg连接数据库报错：Client does not support authentication protocol requested by server; consider upgrading MySQL client（客户端不支持服务器请求的身份验证协议；请考虑升级MySQL客户端）\n\n（我的错误显示在页面中为insert等操作未定义）\n\n升级数据库===>重装哈哈哈哈哈\n\n3.正则 [https://www.cnblogs.com/minz/p/5975444.html](https://www.cnblogs.com/minz/p/5975444.html)\n\n4.pta乙级题目分类整理 [https://blog.csdn.net/zhanshen112/article/details/84640183](https://blog.csdn.net/zhanshen112/article/details/84640183) 刷题必备\n\n他的csdn里面还有对应的答案解析 [https://blog.csdn.net/zhanshen112/article/details/84672638](https://blog.csdn.net/zhanshen112/article/details/84672638)","content":"<p>1.get和post的区别</p>\n<p><a href=\"https://www.cnblogs.com/logsharing/p/8448446.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/logsharing/p/8448446.html</a></p>\n<p><img src=\"http://l.yumud.com/image-59.png\" alt></p>\n<a id=\"more\"></a>\n<p>提取的重点</p>\n<p>2.egg连接数据库报错：Client does not support authentication protocol requested by server; consider upgrading MySQL client（客户端不支持服务器请求的身份验证协议；请考虑升级MySQL客户端）</p>\n<p>（我的错误显示在页面中为insert等操作未定义）</p>\n<p>升级数据库===&gt;重装哈哈哈哈哈</p>\n<p>3.正则 <a href=\"https://www.cnblogs.com/minz/p/5975444.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/minz/p/5975444.html</a></p>\n<p>4.pta乙级题目分类整理 <a href=\"https://blog.csdn.net/zhanshen112/article/details/84640183\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zhanshen112/article/details/84640183</a> 刷题必备</p>\n<p>他的csdn里面还有对应的答案解析 <a href=\"https://blog.csdn.net/zhanshen112/article/details/84672638\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zhanshen112/article/details/84672638</a></p>\n","slug":"e5-88-ab-e4-ba-ba-e7-9a-84-e8-8a-9d-e5-a3-ab","updated":"2019-11-08T08:03:32.584Z","comments":true,"link":"","permalink":"/2019/08/29/e5-88-ab-e4-ba-ba-e7-9a-84-e8-8a-9d-e5-a3-ab/","excerpt":"1.get和post的区别 https://www.cnblogs.com/logsharing/p/8448446.html","categories":[{"name":"芝士就是力量！","slug":"芝士就是力量！","permalink":"/categories/芝士就是力量！/"}],"tags":[]},{"title":"egg --Can't find viewEngine for 某某","date":"2019-08-27T06:38:39.000Z","path":"2019/08/27/egg-cant-find-viewengine-for/","text":"关于在egg中使用view，报错“can’t find viewEngine for ***” 的修改方法 参考文档：https://www.npmjs.com/package/egg-view npm install egg-view-ejs –save 然后修改config文件夹下的这两个js文件 config/plugin.js config/config.default.js————————————————-分割线——————————————————分割线————————————————————————– 我的具体操作，截图，画圈 app/view/home/home.ejs 这里也可以链接前端的css，js文件，如下图，改成你自己的链接即可。 app/controller/home.js","raw":"---\ntitle: egg --Can't find viewEngine for 某某\nurl: 496.html\nid: 496\ncategories:\n  - 嗨~egg\ndate: 2019-08-27 14:38:39\n---\n\n关于在egg中使用view，报错“can't find viewEngine for ***”\n\n的修改方法\n\n参考文档：[https://www.npmjs.com/package/egg-view](https://www.npmjs.com/package/egg-view)\n<!--more-->\nnpm install egg-view-ejs --save\n\n然后修改config文件夹下的这两个js文件\n\n![](http://l.yumud.com/image-54.png)\n\nconfig/plugin.js\n\n![](http://l.yumud.com/image-55.png)\n\nconfig/config.default.js  \n-------------------------------------------------分割线------------------------------------------------------分割线--------------------------------------------------------------------------\n\n我的具体操作，截图，画圈\n\n![](http://l.yumud.com/image-56.png)\n\napp/view/home/home.ejs  \n\n这里也可以链接前端的css，js文件，如下图，改成你自己的链接即可。\n\n![](http://l.yumud.com/image-58.png)\n\n![](http://l.yumud.com/image-57.png)\n\napp/controller/home.js","content":"<p>关于在egg中使用view，报错“can’t find viewEngine for ***”</p>\n<p>的修改方法</p>\n<p>参考文档：<a href=\"https://www.npmjs.com/package/egg-view\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/egg-view</a></p>\n<a id=\"more\"></a>\n<p>npm install egg-view-ejs –save</p>\n<p>然后修改config文件夹下的这两个js文件</p>\n<p><img src=\"http://l.yumud.com/image-54.png\" alt></p>\n<p>config/plugin.js</p>\n<p><img src=\"http://l.yumud.com/image-55.png\" alt></p>\n<p>config/config.default.js<br>————————————————-分割线——————————————————分割线————————————————————————–</p>\n<p>我的具体操作，截图，画圈</p>\n<p><img src=\"http://l.yumud.com/image-56.png\" alt></p>\n<p>app/view/home/home.ejs  </p>\n<p>这里也可以链接前端的css，js文件，如下图，改成你自己的链接即可。</p>\n<p><img src=\"http://l.yumud.com/image-58.png\" alt></p>\n<p><img src=\"http://l.yumud.com/image-57.png\" alt></p>\n<p>app/controller/home.js</p>\n","slug":"egg-cant-find-viewengine-for","updated":"2019-11-07T09:19:06.276Z","comments":true,"link":"","permalink":"/2019/08/27/egg-cant-find-viewengine-for/","excerpt":"关于在egg中使用view，报错“can’t find viewEngine for ***” 的修改方法 参考文档：https://www.npmjs.com/package/egg-view","categories":[{"name":"嗨~egg","slug":"嗨-egg","permalink":"/categories/嗨-egg/"}],"tags":[]},{"title":"egg-get post 以及post跨域问题","date":"2019-08-26T06:49:47.000Z","path":"2019/08/26/egg-e5-82-bb-e8-9b-8b-e7-9a-84get-post-e4-bb-a5-e5-8f-8apost-e8-b7-a8-e5-9f-9f-e9-97-ae-e9-a2-98/","text":"一、get请求 *gg为get，pp为post 代码截图： app/router.js app/controller/gg.js 使用postman，输入地址，send即可，得到数据就是成功了，鼓掌！ 成功截图！ 二、post请求 也是截图： app/router.js app/controller/pp.js 成功截图！ 但是你没有成功截图，hh 使用egg调用POST请求时，浏览器会触发405报错 需要使用egg-cors插件 npm i egg-cors –save 设置config/config.default.js 里面的链接写你自己的hh 设置config/plugin.js 酱样子 就可以成功了-_- 三、jsonp请求 app/router.js app/demo/count.json app/controller/demo.js 成功~ 参考文章： https://www.jianshu.com/p/45c9cb7c4a54 上面更为详细。","raw":"---\ntitle: egg-get post 以及post跨域问题\nurl: 467.html\nid: 467\ncategories:\n  - 嗨~egg\ndate: 2019-08-26 14:49:47\n---\n\n一、get请求 *gg为get，pp为post\n\n代码截图：\n\n![](http://yumud.com/wp-content/uploads/2019/08/image-42.png)\n<!--more-->\napp/router.js\n\n![](http://yumud.com/wp-content/uploads/2019/08/image-43.png)\n\napp/controller/gg.js\n\n使用postman，输入地址，send即可，得到数据就是成功了，鼓掌！\n\n![](http://yumud.com/wp-content/uploads/2019/08/image-44.png)\n\n成功截图！\n\n二、post请求\n\n也是截图：\n\n![](http://yumud.com/wp-content/uploads/2019/08/image-45.png)\n\napp/router.js\n\n![](http://yumud.com/wp-content/uploads/2019/08/image-46.png)\n\napp/controller/pp.js\n\n![](http://yumud.com/wp-content/uploads/2019/08/image-47.png)\n\n成功截图！\n\n但是你没有成功截图，hh 使用egg调用POST请求时，浏览器会触发405报错\n\n需要使用egg-cors插件\n\nnpm i egg-cors --save\n\n设置config/config.default.js\n\n![](http://yumud.com/wp-content/uploads/2019/08/image-52.png)\n\n里面的链接写你自己的hh\n\n设置config/plugin.js\n\n![](http://yumud.com/wp-content/uploads/2019/08/image-53.png)\n\n酱样子\n\n就可以成功了-_-\n\n三、jsonp请求\n\n![](http://yumud.com/wp-content/uploads/2019/08/image-48.png)\n\napp/router.js\n\n![](http://yumud.com/wp-content/uploads/2019/08/image-50.png)\n\napp/demo/count.json\n\n![](http://yumud.com/wp-content/uploads/2019/08/image-51.png)\n\napp/controller/demo.js\n\n![](http://yumud.com/wp-content/uploads/2019/08/image-49.png)\n\n成功~\n\n参考文章： [https://www.jianshu.com/p/45c9cb7c4a54](https://www.jianshu.com/p/45c9cb7c4a54) 上面更为详细。","content":"<p>一、get请求 *gg为get，pp为post</p>\n<p>代码截图：</p>\n<p><img src=\"http://yumud.com/wp-content/uploads/2019/08/image-42.png\" alt></p>\n<a id=\"more\"></a>\n<p>app/router.js</p>\n<p><img src=\"http://yumud.com/wp-content/uploads/2019/08/image-43.png\" alt></p>\n<p>app/controller/gg.js</p>\n<p>使用postman，输入地址，send即可，得到数据就是成功了，鼓掌！</p>\n<p><img src=\"http://yumud.com/wp-content/uploads/2019/08/image-44.png\" alt></p>\n<p>成功截图！</p>\n<p>二、post请求</p>\n<p>也是截图：</p>\n<p><img src=\"http://yumud.com/wp-content/uploads/2019/08/image-45.png\" alt></p>\n<p>app/router.js</p>\n<p><img src=\"http://yumud.com/wp-content/uploads/2019/08/image-46.png\" alt></p>\n<p>app/controller/pp.js</p>\n<p><img src=\"http://yumud.com/wp-content/uploads/2019/08/image-47.png\" alt></p>\n<p>成功截图！</p>\n<p>但是你没有成功截图，hh 使用egg调用POST请求时，浏览器会触发405报错</p>\n<p>需要使用egg-cors插件</p>\n<p>npm i egg-cors –save</p>\n<p>设置config/config.default.js</p>\n<p><img src=\"http://yumud.com/wp-content/uploads/2019/08/image-52.png\" alt></p>\n<p>里面的链接写你自己的hh</p>\n<p>设置config/plugin.js</p>\n<p><img src=\"http://yumud.com/wp-content/uploads/2019/08/image-53.png\" alt></p>\n<p>酱样子</p>\n<p>就可以成功了-_-</p>\n<p>三、jsonp请求</p>\n<p><img src=\"http://yumud.com/wp-content/uploads/2019/08/image-48.png\" alt></p>\n<p>app/router.js</p>\n<p><img src=\"http://yumud.com/wp-content/uploads/2019/08/image-50.png\" alt></p>\n<p>app/demo/count.json</p>\n<p><img src=\"http://yumud.com/wp-content/uploads/2019/08/image-51.png\" alt></p>\n<p>app/controller/demo.js</p>\n<p><img src=\"http://yumud.com/wp-content/uploads/2019/08/image-49.png\" alt></p>\n<p>成功~</p>\n<p>参考文章： <a href=\"https://www.jianshu.com/p/45c9cb7c4a54\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/45c9cb7c4a54</a> 上面更为详细。</p>\n","slug":"egg-e5-82-bb-e8-9b-8b-e7-9a-84get-post-e4-bb-a5-e5-8f-8apost-e8-b7-a8-e5-9f-9f-e9-97-ae-e9-a2-98","updated":"2019-11-07T09:19:08.742Z","comments":true,"link":"","permalink":"/2019/08/26/egg-e5-82-bb-e8-9b-8b-e7-9a-84get-post-e4-bb-a5-e5-8f-8apost-e8-b7-a8-e5-9f-9f-e9-97-ae-e9-a2-98/","excerpt":"一、get请求 *gg为get，pp为post 代码截图：","categories":[{"name":"嗨~egg","slug":"嗨-egg","permalink":"/categories/嗨-egg/"}],"tags":[]},{"title":"js的一些题（在公司的考核题目） [九待补充]","date":"2019-08-23T05:33:44.000Z","path":"2019/08/23/js-e7-9a-84-e4-b8-80-e4-ba-9b-e9-a2-98-e3-80-90-e5-be-85-e8-a1-a5-e5-85-85-e3-80-91/","text":"一、string的方法 注释略写，贴个链接 string.split() 分割成字符串数组 string.charAt 返回指定字符 string.indexOf 返回指定值索引 eg: “abc” str.indexOf(“b”)=&gt;1 string.concat(str1,str2) 合并 string.slice() 提取部分并返回 string.toUppercase() 大写 string.toLowerCase() 小写 https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charAt 左侧 二、array的方法 Array,isArray() 检测数组 Array.push() 追加(最后) Array.pop() 删除(最后) Array.shift() 删除(开头) Array.unshift() 追加(开头) Array.reverse() 反转 Array.sort() 排序 Array.concat() 连接 Array.slice() 分割 Array.forEach() 遍历 https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray 左侧 三、object的方法 Object.keys() 返回对象属性名 obj.seal() 禁止对象配置 obj.isSealed() 判断对象是否可配置 obj.freeze() 冻结对象 obj.isFrozen() 判断是否被冻结 https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys 左侧 四、五个常用的引用类型 array，Function，object，date，RegExp 五、写出一个方法，将输入的参数是什么数据类型返回出来 eg：show(1)=&gt;number ; show(null)=&gt;null Object.prototype.toString.call(参数) 六、写出控制台输出 ① function show(){function log(){return 1}setTimeout(()=&gt;{return log()});}console.log(show())=&gt;undefined ② function show(){function log(){return 1}setTimeout(()=&gt;{return console.log(log())});}show()=&gt;1 七、随机生成字母+数字的验证码 Math.random().toString(36).slice(2) 八、实现obj.num===7 &amp;&amp; obj.num===8 obj.num===9为true var num=7;Object.defineProperty(this,’a’,{get(){return num++;}})console.log(a==7&amp;&amp;a==8&amp;&amp;a==9) 九、实现一个方法满足下列条件： show(1,2,{add:true})===&gt;3 show(1,2,4,5,7,8,9,{add:true})==&gt;36 show({add:true},1,2)==&gt;3 show(‘a’,1)==&gt;’参数错误’ show({add：false}，1,0,5)==&gt;0 //？？？？有错误，待补充 十、冒泡排序和二分法排序 冒泡排序： function sort(arr){ for(var i=0;i&lt;arr.length-1;i++){ for(var j=0;j&lt;arr.length-i-1;j++){ if(arr[j]&gt;arr[j+1]){ var temp=arr[j]; arr[j]=arr[j+1]; arr[j+1]=temp; } } } console.log(arr) } var arr=[1,9,3,5,6] sort(arr)二分法排序： function sort2(array) {var len = array.length,i, j, tmp, low, high, mid, result;result = array.slice(0);for(i = 1; i &lt; len; i++){ tmp = result[i]; low = 0; high = i - 1; while(low &lt;= high){ mid = parseInt((low + high)/2, 10); if(tmp &lt; result[mid]) high = mid - 1; else low = mid + 1; } for(j = i - 1; j &gt;= high+1; j–){result[j+1] = result[j];}result[j+1] = tmp;}return result;}var arr=[1,9,3,5,6];document.write(sort2(arr));","raw":"---\ntitle: 'js的一些题（在公司的考核题目） [九待补充]'\nurl: 462.html\nid: 462\ncategories:\n  - js\ndate: 2019-08-23 13:33:44\n---\n\n一、string的方法 注释略写，贴个链接\n\nstring.split() 分割成字符串数组\n\nstring.charAt 返回指定字符\n\nstring.indexOf 返回指定值索引 eg: \"abc\" str.indexOf(\"b\")=>1\n<!--more-->\nstring.concat(str1,str2) 合并\n\nstring.slice() 提取部分并返回\n\nstring.toUppercase() 大写\n\nstring.toLowerCase() 小写\n\n[https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charAt](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charAt) 左侧\n\n二、array的方法\n\nArray,isArray() 检测数组\n\nArray.push() 追加(最后)\n\nArray.pop() 删除(最后)\n\nArray.shift() 删除(开头)\n\nArray.unshift() 追加(开头)\n\nArray.reverse() 反转\n\nArray.sort() 排序\n\nArray.concat() 连接\n\nArray.slice() 分割\n\nArray.forEach() 遍历\n\n[https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray) 左侧\n\n三、object的方法\n\nObject.keys() 返回对象属性名\n\nobj.seal() 禁止对象配置\n\nobj.isSealed() 判断对象是否可配置\n\nobj.freeze() 冻结对象\n\nobj.isFrozen() 判断是否被冻结\n\n[https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys) 左侧\n\n四、五个常用的引用类型\n\n**array，Function，object，date，RegExp**\n\n五、写出一个方法，将输入的参数是什么数据类型返回出来\n\neg：show(1)=>number ; show(null)=>null\n\n**Object.prototype.toString.call(参数)**\n\n六、写出控制台输出\n\n① function show(){  \nfunction log(){return 1}  \nsetTimeout(()=>{  \nreturn log()  \n});  \n}  \nconsole.log(show())=>**undefined**\n\n② function show(){  \nfunction log(){return 1}  \nsetTimeout(()=>{  \nreturn console.log(log())  \n});  \n}  \nshow()=>**1**\n\n七、随机生成字母+数字的验证码\n\n**Math.random().toString(36).slice(2)**\n\n八、实现obj.num===7 && obj.num===8 obj.num===9为true\n\n**var num=7;  \nObject.defineProperty(this,'a',{  \nget(){  \nreturn num++;  \n}  \n})  \nconsole.log(a==7&&a==8&&a==9)**\n\n九、实现一个方法满足下列条件：\n\nshow(1,2,{add:true})===>3\n\nshow(1,2,4,5,7,8,9,{add:true})==>36\n\nshow({add:true},1,2)==>3\n\nshow('a',1)==>'参数错误'\n\nshow({add：false}，1,0,5)==>0\n\n//？？？？有错误，待补充\n\n十、冒泡排序和二分法排序\n\n冒泡排序：\n\n    function sort(arr){\n        for(var i=0;i<arr.length-1;i++){\n            for(var j=0;j<arr.length-i-1;j++){\n                if(arr[j]>arr[j+1]){\n                    var temp=arr[j];\n                    arr[j]=arr[j+1];\n                    arr[j+1]=temp;\n                }\n            }\n        }\n        console.log(arr)\n    }\n    var arr=[1,9,3,5,6]\n    sort(arr)\n\n二分法排序：\n\nfunction sort2(array) {  \nvar len = array.length,  \ni, j, tmp, low, high, mid, result;  \nresult = array.slice(0);  \nfor(i = 1; i < len; i++){ tmp = result\\[i\\]; low = 0; high = i - 1; while(low <= high){ mid = parseInt((low + high)/2, 10); if(tmp < result\\[mid\\]) high = mid - 1; else low = mid + 1; } for(j = i - 1; j >= high+1; j--){  \nresult\\[j+1\\] = result\\[j\\];  \n}  \nresult\\[j+1\\] = tmp;  \n}  \nreturn result;  \n}  \nvar arr=\\[1,9,3,5,6\\];  \ndocument.write(sort2(arr));","content":"<p>一、string的方法 注释略写，贴个链接</p>\n<p>string.split() 分割成字符串数组</p>\n<p>string.charAt 返回指定字符</p>\n<p>string.indexOf 返回指定值索引 eg: “abc” str.indexOf(“b”)=&gt;1</p>\n<a id=\"more\"></a>\n<p>string.concat(str1,str2) 合并</p>\n<p>string.slice() 提取部分并返回</p>\n<p>string.toUppercase() 大写</p>\n<p>string.toLowerCase() 小写</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charAt\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charAt</a> 左侧</p>\n<p>二、array的方法</p>\n<p>Array,isArray() 检测数组</p>\n<p>Array.push() 追加(最后)</p>\n<p>Array.pop() 删除(最后)</p>\n<p>Array.shift() 删除(开头)</p>\n<p>Array.unshift() 追加(开头)</p>\n<p>Array.reverse() 反转</p>\n<p>Array.sort() 排序</p>\n<p>Array.concat() 连接</p>\n<p>Array.slice() 分割</p>\n<p>Array.forEach() 遍历</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray</a> 左侧</p>\n<p>三、object的方法</p>\n<p>Object.keys() 返回对象属性名</p>\n<p>obj.seal() 禁止对象配置</p>\n<p>obj.isSealed() 判断对象是否可配置</p>\n<p>obj.freeze() 冻结对象</p>\n<p>obj.isFrozen() 判断是否被冻结</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys</a> 左侧</p>\n<p>四、五个常用的引用类型</p>\n<p><strong>array，Function，object，date，RegExp</strong></p>\n<p>五、写出一个方法，将输入的参数是什么数据类型返回出来</p>\n<p>eg：show(1)=&gt;number ; show(null)=&gt;null</p>\n<p><strong>Object.prototype.toString.call(参数)</strong></p>\n<p>六、写出控制台输出</p>\n<p>① function show(){<br>function log(){return 1}<br>setTimeout(()=&gt;{<br>return log()<br>});<br>}<br>console.log(show())=&gt;<strong>undefined</strong></p>\n<p>② function show(){<br>function log(){return 1}<br>setTimeout(()=&gt;{<br>return console.log(log())<br>});<br>}<br>show()=&gt;<strong>1</strong></p>\n<p>七、随机生成字母+数字的验证码</p>\n<p><strong>Math.random().toString(36).slice(2)</strong></p>\n<p>八、实现obj.num===7 &amp;&amp; obj.num===8 obj.num===9为true</p>\n<p><strong>var num=7;<br>Object.defineProperty(this,’a’,{<br>get(){<br>return num++;<br>}<br>})<br>console.log(a==7&amp;&amp;a==8&amp;&amp;a==9)</strong></p>\n<p>九、实现一个方法满足下列条件：</p>\n<p>show(1,2,{add:true})===&gt;3</p>\n<p>show(1,2,4,5,7,8,9,{add:true})==&gt;36</p>\n<p>show({add:true},1,2)==&gt;3</p>\n<p>show(‘a’,1)==&gt;’参数错误’</p>\n<p>show({add：false}，1,0,5)==&gt;0</p>\n<p>//？？？？有错误，待补充</p>\n<p>十、冒泡排序和二分法排序</p>\n<p>冒泡排序：</p>\n<pre><code>function sort(arr){\n    for(var i=0;i&lt;arr.length-1;i++){\n        for(var j=0;j&lt;arr.length-i-1;j++){\n            if(arr[j]&gt;arr[j+1]){\n                var temp=arr[j];\n                arr[j]=arr[j+1];\n                arr[j+1]=temp;\n            }\n        }\n    }\n    console.log(arr)\n}\nvar arr=[1,9,3,5,6]\nsort(arr)</code></pre><p>二分法排序：</p>\n<p>function sort2(array) {<br>var len = array.length,<br>i, j, tmp, low, high, mid, result;<br>result = array.slice(0);<br>for(i = 1; i &lt; len; i++){ tmp = result[i]; low = 0; high = i - 1; while(low &lt;= high){ mid = parseInt((low + high)/2, 10); if(tmp &lt; result[mid]) high = mid - 1; else low = mid + 1; } for(j = i - 1; j &gt;= high+1; j–){<br>result[j+1] = result[j];<br>}<br>result[j+1] = tmp;<br>}<br>return result;<br>}<br>var arr=[1,9,3,5,6];<br>document.write(sort2(arr));</p>\n","slug":"js-e7-9a-84-e4-b8-80-e4-ba-9b-e9-a2-98-e3-80-90-e5-be-85-e8-a1-a5-e5-85-85-e3-80-91","updated":"2019-11-08T08:05:24.397Z","comments":true,"link":"","permalink":"/2019/08/23/js-e7-9a-84-e4-b8-80-e4-ba-9b-e9-a2-98-e3-80-90-e5-be-85-e8-a1-a5-e5-85-85-e3-80-91/","excerpt":"一、string的方法 注释略写，贴个链接 string.split() 分割成字符串数组 string.charAt 返回指定字符 string.indexOf 返回指定值索引 eg: “abc” str.indexOf(“b”)=&gt;1","categories":[{"name":"js","slug":"js","permalink":"/categories/js/"}],"tags":[]},{"title":"一些node，js题目","date":"2019-08-22T06:29:49.000Z","path":"2019/08/22/e4-b8-80-e4-ba-9bnode-ef-bc-8cjs-e9-a2-98-e7-9b-ae/","text":"一、fs api 读取文件，同步读取文件，书写文件，同步书写文件，删除文件，同步删除文件 readFile readFileSync writeFile writeFileSync unlink unlinkSync 具体使用（截图） 二、利用http模块，将远程图片下载到本地 三、实现一个js文件 在命令行输入node app cat=&gt;is cat node app dog=&gt;is dog console.log(‘is’+process.argv.slice(2)) 四、node的全局变量 global, setTimeout, clearTimeout, console, buffer, process 五、实现一个js文件，在命令行输入node app=&gt;‘您正在执行***’//当前文件的路径和名称 console.log(‘您正在执行’+__dirname+__filename) __dirname和__filename都是全局对象，都是全路径，__filename显示全路径下的文件名 六、let xlxs=require(‘node-xlsx’)//这是一个三方模块 写出这句代码其加载依赖的全过程 ※首先模块分为系统模块和第三方模块，搞一张截图 详细如图所示 模块加载机制（面试=&gt;说一下require的加载机制） 在nodejs中模块加载一般会经历三个步骤：路径分析，文件定位，编译执行 按照模块的分类，按照以下顺序进行优先加载： 系统缓存 系统模块 文件模块 目录做为模块 node_modules目录加载 嗝~贴个链接 https://www.imooc.com/article/284624 七、nodejs在64位操作系统和32位操作系统下内存分别为多少 1.4GB 0.7GB 八、使用http模块监听3080端口 九、js的事件循环机制//浏览器环境 https://www.cnblogs.com/yzg1/p/7514514.html js代码执行机制： 所有的同步任务在主线程的栈中执行。 主线程之外，还存在一个任务队列（task queue）。 只要异步任务有了结果，就在任务队列之中放置一个事件。 一旦栈中的所有同步任务执行完成没系统就会读取‘任务队列’，选择出需要首先执行的任务（由浏览器决定，并不按序） 十、js在node环境的循环机制， https://www.cnblogs.com/onepixel/p/7143769.html 十一、使用events模块实现一个简单的队列机制//所有异步代码按序执行 不造– 十二、实现一个方法 show([1,2,3,4,5,6,7],8)==&gt;[1,7],[2,6],[3,5] 结果中的第二个参数是题目中第一个参数中不重复的两个数相加，和为题目中第二个参数 三个数相加 十一题待补充，待到啥时候就不知道了hhh","raw":"---\ntitle: 一些node，js题目\nurl: 423.html\nid: 423\ncategories:\n  - js\ndate: 2019-08-22 14:29:49\ntoc: true\n---\n\n一、fs api 读取文件，同步读取文件，书写文件，同步书写文件，删除文件，同步删除文件\n\nreadFile readFileSync writeFile writeFileSync unlink unlinkSync\n\n具体使用（截图）\n\n![](http://l.yumud.com/image-36.png)\n<!--more-->\n二、利用http模块，将远程图片下载到本地\n\n![](http://l.yumud.com/image-37.png)\n\n三、实现一个js文件\n\n在命令行输入node app cat=>is cat\n\nnode app dog=>is dog\n\n**console.log('is'+process.argv.slice(2))**\n\n四、node的全局变量\n\nglobal, setTimeout, clearTimeout, console, buffer, process\n\n五、实现一个js文件，在命令行输入node app=>‘您正在执行***’//当前文件的路径和名称\n\n**console.log('您正在执行'+\\_\\_dirname+\\_\\_filename)**\n\n\\_\\_dirname和\\_\\_filename都是全局对象，都是全路径，__filename显示全路径下的文件名\n\n六、let xlxs=require('node-xlsx')//这是一个三方模块\n\n写出这句代码其加载依赖的全过程\n\n※首先模块分为系统模块和第三方模块，搞一张截图\n\n![](http://l.yumud.com/image-38.png)\n\n详细如图所示\n\n模块加载机制（面试=>说一下require的加载机制）\n\n在nodejs中模块加载一般会经历三个步骤：**路径分析，文件定位，编译执行**\n\n按照模块的分类，按照以下顺序进行优先加载：\n\n系统缓存\n\n系统模块\n\n文件模块\n\n目录做为模块\n\nnode_modules目录加载\n\n嗝~贴个链接 [https://www.imooc.com/article/284624](https://www.imooc.com/article/284624)\n\n七、nodejs在64位操作系统和32位操作系统下内存分别为多少\n\n**1.4GB 0.7GB**\n\n八、使用http模块监听3080端口\n\n![](http://l.yumud.com/image-39.png)\n\n九、js的事件循环机制//浏览器环境\n\n[https://www.cnblogs.com/yzg1/p/7514514.html](https://www.cnblogs.com/yzg1/p/7514514.html)\n\njs代码执行机制：\n\n所有的同步任务在主线程的栈中执行。\n\n主线程之外，还存在一个任务队列（task queue）。 只要异步任务有了结果，就在任务队列之中放置一个事件。\n\n一旦栈中的所有同步任务执行完成没系统就会读取‘任务队列’，选择出需要首先执行的任务（由浏览器决定，并不按序）\n\n十、js在node环境的循环机制，\n\n[https://www.cnblogs.com/onepixel/p/7143769.html](https://www.cnblogs.com/onepixel/p/7143769.html)\n\n十一、使用events模块实现一个简单的队列机制//所有异步代码按序执行\n\n不造--\n\n十二、实现一个方法\n\nshow(\\[1,2,3,4,5,6,7\\],8)==>\\[1,7\\],\\[2,6\\],\\[3,5\\]\n\n结果中的第二个参数是题目中第一个参数中不重复的两个数相加，和为题目中第二个参数\n\n![](http://l.yumud.com/image-40.png)\n\n三个数相加\n\n![](http://l.yumud.com/image-41.png)\n\n十一题待补充，待到啥时候就不知道了hhh","content":"<p>一、fs api 读取文件，同步读取文件，书写文件，同步书写文件，删除文件，同步删除文件</p>\n<p>readFile readFileSync writeFile writeFileSync unlink unlinkSync</p>\n<p>具体使用（截图）</p>\n<p><img src=\"http://l.yumud.com/image-36.png\" alt></p>\n<a id=\"more\"></a>\n<p>二、利用http模块，将远程图片下载到本地</p>\n<p><img src=\"http://l.yumud.com/image-37.png\" alt></p>\n<p>三、实现一个js文件</p>\n<p>在命令行输入node app cat=&gt;is cat</p>\n<p>node app dog=&gt;is dog</p>\n<p><strong>console.log(‘is’+process.argv.slice(2))</strong></p>\n<p>四、node的全局变量</p>\n<p>global, setTimeout, clearTimeout, console, buffer, process</p>\n<p>五、实现一个js文件，在命令行输入node app=&gt;‘您正在执行***’//当前文件的路径和名称</p>\n<p><strong>console.log(‘您正在执行’+__dirname+__filename)</strong></p>\n<p>__dirname和__filename都是全局对象，都是全路径，__filename显示全路径下的文件名</p>\n<p>六、let xlxs=require(‘node-xlsx’)//这是一个三方模块</p>\n<p>写出这句代码其加载依赖的全过程</p>\n<p>※首先模块分为系统模块和第三方模块，搞一张截图</p>\n<p><img src=\"http://l.yumud.com/image-38.png\" alt></p>\n<p>详细如图所示</p>\n<p>模块加载机制（面试=&gt;说一下require的加载机制）</p>\n<p>在nodejs中模块加载一般会经历三个步骤：<strong>路径分析，文件定位，编译执行</strong></p>\n<p>按照模块的分类，按照以下顺序进行优先加载：</p>\n<p>系统缓存</p>\n<p>系统模块</p>\n<p>文件模块</p>\n<p>目录做为模块</p>\n<p>node_modules目录加载</p>\n<p>嗝~贴个链接 <a href=\"https://www.imooc.com/article/284624\" target=\"_blank\" rel=\"noopener\">https://www.imooc.com/article/284624</a></p>\n<p>七、nodejs在64位操作系统和32位操作系统下内存分别为多少</p>\n<p><strong>1.4GB 0.7GB</strong></p>\n<p>八、使用http模块监听3080端口</p>\n<p><img src=\"http://l.yumud.com/image-39.png\" alt></p>\n<p>九、js的事件循环机制//浏览器环境</p>\n<p><a href=\"https://www.cnblogs.com/yzg1/p/7514514.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/yzg1/p/7514514.html</a></p>\n<p>js代码执行机制：</p>\n<p>所有的同步任务在主线程的栈中执行。</p>\n<p>主线程之外，还存在一个任务队列（task queue）。 只要异步任务有了结果，就在任务队列之中放置一个事件。</p>\n<p>一旦栈中的所有同步任务执行完成没系统就会读取‘任务队列’，选择出需要首先执行的任务（由浏览器决定，并不按序）</p>\n<p>十、js在node环境的循环机制，</p>\n<p><a href=\"https://www.cnblogs.com/onepixel/p/7143769.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/onepixel/p/7143769.html</a></p>\n<p>十一、使用events模块实现一个简单的队列机制//所有异步代码按序执行</p>\n<p>不造–</p>\n<p>十二、实现一个方法</p>\n<p>show([1,2,3,4,5,6,7],8)==&gt;[1,7],[2,6],[3,5]</p>\n<p>结果中的第二个参数是题目中第一个参数中不重复的两个数相加，和为题目中第二个参数</p>\n<p><img src=\"http://l.yumud.com/image-40.png\" alt></p>\n<p>三个数相加</p>\n<p><img src=\"http://l.yumud.com/image-41.png\" alt></p>\n<p>十一题待补充，待到啥时候就不知道了hhh</p>\n","slug":"e4-b8-80-e4-ba-9bnode-ef-bc-8cjs-e9-a2-98-e7-9b-ae","updated":"2019-11-08T08:03:21.028Z","comments":true,"link":"","permalink":"/2019/08/22/e4-b8-80-e4-ba-9bnode-ef-bc-8cjs-e9-a2-98-e7-9b-ae/","excerpt":"一、fs api 读取文件，同步读取文件，书写文件，同步书写文件，删除文件，同步删除文件 readFile readFileSync writeFile writeFileSync unlink unlinkSync 具体使用（截图）","categories":[{"name":"js","slug":"js","permalink":"/categories/js/"}],"tags":[]},{"title":"JS闭包","date":"2019-08-21T05:58:35.000Z","path":"2019/08/21/js-e9-97-ad-e5-8c-85/","text":"闭包闭包 就是一个函数，一个可以访问其他函数的作用域中的变量 的函数 但是我不懂，所以贴个链接，懂了我再继续写 这个链接不对，删掉了，我都看完了，妈耶 这个就对了=&gt;https://www.cnblogs.com/onepixel/p/5062456.html 简而言之，函数A的内部函数B，被函数A外的一个变量C引用=&gt;当一个内部函数被其外部函数之外的变量引用时，就形成了一个闭包。 用途：希望一些变量保存在内存中，但又不污染全局变量。","raw":"---\ntitle: JS闭包\nurl: 416.html\nid: 416\ncategories:\n  - js\ndate: 2019-08-21 13:58:35\n---\n\n闭包闭包\n\n就是一个函数，一个可以**访问其他函数的作用域中的变量** 的函数\n\n但是我不懂，所以贴个链接，懂了我再继续写\n<!--more-->\n这个链接不对，删掉了，我都看完了，妈耶\n\n这个就对了=>[https://www.cnblogs.com/onepixel/p/5062456.html](https://www.cnblogs.com/onepixel/p/5062456.html)\n\n简而言之，函数A的内部函数B，被函数A外的一个变量C引用=>**当一个内部函数被其外部函数之外的变量引用时，就形成了一个闭包**。\n\n用途：希望一些变量保存在内存中，但又不污染全局变量。","content":"<p>闭包闭包</p>\n<p>就是一个函数，一个可以<strong>访问其他函数的作用域中的变量</strong> 的函数</p>\n<p>但是我不懂，所以贴个链接，懂了我再继续写</p>\n<a id=\"more\"></a>\n<p>这个链接不对，删掉了，我都看完了，妈耶</p>\n<p>这个就对了=&gt;<a href=\"https://www.cnblogs.com/onepixel/p/5062456.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/onepixel/p/5062456.html</a></p>\n<p>简而言之，函数A的内部函数B，被函数A外的一个变量C引用=&gt;<strong>当一个内部函数被其外部函数之外的变量引用时，就形成了一个闭包</strong>。</p>\n<p>用途：希望一些变量保存在内存中，但又不污染全局变量。</p>\n","slug":"js-e9-97-ad-e5-8c-85","updated":"2019-11-07T09:17:49.028Z","comments":true,"link":"","permalink":"/2019/08/21/js-e9-97-ad-e5-8c-85/","excerpt":"闭包闭包 就是一个函数，一个可以访问其他函数的作用域中的变量 的函数 但是我不懂，所以贴个链接，懂了我再继续写","categories":[{"name":"js","slug":"js","permalink":"/categories/js/"}],"tags":[]},{"title":"Generator-语法糖 async/await","date":"2019-08-21T02:58:04.000Z","path":"2019/08/21/generator-e8-af-ad-e6-b3-95-e7-b3-96-async-await/","text":"对async/await的支持从v7.6.0开始，so 公司是这个，我没得搞[后来搞egg，我又给升级了hhhh] 跟着教程意念上来一遍–&gt; async关键字后面的函数有异步操作，await代表等待一个异步方法执行完成。 声明异步函数只需在普通函数前面加一个关键字async即可。 async function yumu(){} 和promise同理，当遇到await异步等待，先执行函数后面的同步任务，同步任务执行完，再接着await等待的位置继续往下执行。 截个图 然后就是当await后面的promise状态变为rejected，整个async函数都会中断执行，所以为了保存错误位置和错误信息，使用try..catch进行封装多个await过程。 继续截个图，我写的不能运行，怕出错误导– 你好，王二麻子 和之前一篇的then链式写法相比，简单顺眼多了hhh 你好，麻烦的王二麻子 很耐斯！https://segmentfault.com/a/1190000015488033","raw":"---\ntitle: Generator-语法糖 async/await\nurl: 391.html\nid: 391\ncategories:\n  - es6\ndate: 2019-08-21 10:58:04\n---\n\n对async/await的支持从v7.6.0开始，so\n\n![](http://l.yumud.com/image-32.png)\n\n公司是这个，我没得搞\\[后来搞egg，我又给升级了hhhh\\]\n\n跟着教程意念上来一遍-->\n<!--more-->\nasync关键字后面的函数有异步操作，await代表等待一个异步方法执行完成。\n\n声明异步函数只需在普通函数前面加一个关键字async即可。\n\nasync function yumu(){}\n\n和promise同理，当遇到await异步等待，先执行函数后面的同步任务，同步任务执行完，再接着await等待的位置继续往下执行。\n\n截个图\n\n![](http://l.yumud.com/image-31.png)\n\n然后就是当await后面的promise状态变为rejected，整个async函数都会中断执行，所以为了保存错误位置和错误信息，使用try..catch进行封装多个await过程。\n\n继续截个图，我写的不能运行，怕出错误导--\n\n![](http://l.yumud.com/image-33.png)\n\n你好，王二麻子\n\n和之前一篇的then链式写法相比，简单顺眼多了hhh\n\n![](http://l.yumud.com/image-34.png)\n\n你好，麻烦的王二麻子\n\n很耐斯！[https://segmentfault.com/a/1190000015488033](https://segmentfault.com/a/1190000015488033)","content":"<p>对async/await的支持从v7.6.0开始，so</p>\n<p><img src=\"http://l.yumud.com/image-32.png\" alt></p>\n<p>公司是这个，我没得搞[后来搞egg，我又给升级了hhhh]</p>\n<p>跟着教程意念上来一遍–&gt;</p>\n<a id=\"more\"></a>\n<p>async关键字后面的函数有异步操作，await代表等待一个异步方法执行完成。</p>\n<p>声明异步函数只需在普通函数前面加一个关键字async即可。</p>\n<p>async function yumu(){}</p>\n<p>和promise同理，当遇到await异步等待，先执行函数后面的同步任务，同步任务执行完，再接着await等待的位置继续往下执行。</p>\n<p>截个图</p>\n<p><img src=\"http://l.yumud.com/image-31.png\" alt></p>\n<p>然后就是当await后面的promise状态变为rejected，整个async函数都会中断执行，所以为了保存错误位置和错误信息，使用try..catch进行封装多个await过程。</p>\n<p>继续截个图，我写的不能运行，怕出错误导–</p>\n<p><img src=\"http://l.yumud.com/image-33.png\" alt></p>\n<p>你好，王二麻子</p>\n<p>和之前一篇的then链式写法相比，简单顺眼多了hhh</p>\n<p><img src=\"http://l.yumud.com/image-34.png\" alt></p>\n<p>你好，麻烦的王二麻子</p>\n<p>很耐斯！<a href=\"https://segmentfault.com/a/1190000015488033\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000015488033</a></p>\n","slug":"generator-e8-af-ad-e6-b3-95-e7-b3-96-async-await","updated":"2019-11-07T09:19:26.377Z","comments":true,"link":"","permalink":"/2019/08/21/generator-e8-af-ad-e6-b3-95-e7-b3-96-async-await/","excerpt":"对async/await的支持从v7.6.0开始，so 公司是这个，我没得搞[后来搞egg，我又给升级了hhhh] 跟着教程意念上来一遍–&gt;","categories":[{"name":"es6","slug":"es6","permalink":"/categories/es6/"}],"tags":[]},{"title":"node之Promise","date":"2019-08-20T09:07:28.000Z","path":"2019/08/20/node-e4-b9-8bpromise/","text":"· Promise.prototype.then() *Promise实例在生成后立即执行，而then方法只有在所有同步任务执行完后才会执行 截的别人的图 -_-差不多就是这个意思，让等待，就直接往下执行，不用等 ·链式调用then方法（异步调用变成了很长的then链，新的解决方法Generator=&gt;语法糖async/await） 关于Promise的具体内容在这里 https://segmentfault.com/a/1190000015488033 的前半部分，后半部分是async/await,很nice~ 【详细–但是有点儿乱】方法上有all,reject,resolve 原型上有.then.catchの方法 .catch在想要上面所有的promise其中一个出错就终止下面的所有promise执行时使用。 promise只有三种状态，未完成，完成(fulfilled)，失败(rejected) .then方法可以接受三个函数作为参数，前两个分别为fulfilled,rejected的回调函数，第三个函数用于处理进度信息（也有说接受两个函数作为参数，分别为resolved状态和rejected状态的回调函数，而这两个回调函数接受的参数分别为Promise实例中resolve函数和reject函数中的参数，+rejected状态的回调函数时可省略的） promise.all比单个来要快 【结束–开始写Generator语法糖–开一个新的文章嘻嘻】 附：链接 ***（又要换服务器了，链接又得换来换去，直接在主页搜吧，语法糖）","raw":"---\ntitle: node之Promise\nurl: 372.html\nid: 372\ncategories:\n  - node\ndate: 2019-08-20 17:07:28\n---\n\n**·** Promise.prototype.then() *Promise实例在生成后立即执行，而then方法只有在所有同步任务执行完后才会执行\n\n![](http://l.yumud.com/image-29.png)\n\n截的别人的图 -_-<!--more-->差不多就是这个意思，让等待，就直接往下执行，不用等\n\n**·**链式调用then方法（异步调用变成了很长的then链，新的解决方法Generator=>语法糖async/await）\n\n关于Promise的具体内容在这里 [https://segmentfault.com/a/1190000015488033](https://segmentfault.com/a/1190000015488033) 的前半部分，后半部分是async/await,很nice~\n\n【详细--但是有点儿乱】方法上有all,reject,resolve\n\n原型上有.then.catchの方法\n\n.catch在想要上面所有的promise其中一个出错就终止下面的所有promise执行时使用。\n\npromise只有三种状态，未完成，完成(fulfilled)，失败(rejected)\n\n.then方法可以接受三个函数作为参数，前两个分别为fulfilled,rejected的回调函数，第三个函数用于处理进度信息（也有说接受两个函数作为参数，分别为resolved状态和rejected状态的回调函数，而这两个回调函数接受的参数分别为Promise实例中resolve函数和reject函数中的参数，+rejected状态的回调函数时可省略的）\n\npromise.all比单个来要快\n\n![](http://l.yumud.com/image-30.png)\n\n【结束--开始写Generator语法糖--开一个新的文章嘻嘻】\n\n附：链接 ***（又要换服务器了，链接又得换来换去，直接在主页搜吧，语法糖）","content":"<p><strong>·</strong> Promise.prototype.then() *Promise实例在生成后立即执行，而then方法只有在所有同步任务执行完后才会执行</p>\n<p><img src=\"http://l.yumud.com/image-29.png\" alt></p>\n<p>截的别人的图 -_-<a id=\"more\"></a>差不多就是这个意思，让等待，就直接往下执行，不用等</p>\n<p><strong>·</strong>链式调用then方法（异步调用变成了很长的then链，新的解决方法Generator=&gt;语法糖async/await）</p>\n<p>关于Promise的具体内容在这里 <a href=\"https://segmentfault.com/a/1190000015488033\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000015488033</a> 的前半部分，后半部分是async/await,很nice~</p>\n<p>【详细–但是有点儿乱】方法上有all,reject,resolve</p>\n<p>原型上有.then.catchの方法</p>\n<p>.catch在想要上面所有的promise其中一个出错就终止下面的所有promise执行时使用。</p>\n<p>promise只有三种状态，未完成，完成(fulfilled)，失败(rejected)</p>\n<p>.then方法可以接受三个函数作为参数，前两个分别为fulfilled,rejected的回调函数，第三个函数用于处理进度信息（也有说接受两个函数作为参数，分别为resolved状态和rejected状态的回调函数，而这两个回调函数接受的参数分别为Promise实例中resolve函数和reject函数中的参数，+rejected状态的回调函数时可省略的）</p>\n<p>promise.all比单个来要快</p>\n<p><img src=\"http://l.yumud.com/image-30.png\" alt></p>\n<p>【结束–开始写Generator语法糖–开一个新的文章嘻嘻】</p>\n<p>附：链接 ***（又要换服务器了，链接又得换来换去，直接在主页搜吧，语法糖）</p>\n","slug":"node-e4-b9-8bpromise","updated":"2019-11-07T09:17:38.071Z","comments":true,"link":"","permalink":"/2019/08/20/node-e4-b9-8bpromise/","excerpt":"· Promise.prototype.then() *Promise实例在生成后立即执行，而then方法只有在所有同步任务执行完后才会执行 截的别人的图 -_-","categories":[{"name":"node","slug":"node","permalink":"/categories/node/"}],"tags":[]},{"title":"同步异步阻塞非阻塞！！！！","date":"2019-08-20T08:54:32.000Z","path":"2019/08/20/e5-90-8c-e6-ad-a5-e5-bc-82-e6-ad-a5-e9-98-bb-e5-a1-9e-e9-9d-9e-e9-98-bb-e5-a1-9e-ef-bc-81-ef-bc-81-ef-bc-81-ef-bc-81/","text":"同步：一个功能被调用，没有结果之前，就不会有返回 异步：调用在发出后，这个调用就直接返回了，所以没有返回结果（告诉你我在查了，通过一个回调先通知你一下） 阻塞：调用结果返回前，当前线程会被挂起 非堵塞：在不能立刻得到结果之前，该调用不会阻塞当前的线程","raw":"---\ntitle: 同步异步阻塞非阻塞！！！！\nurl: 367.html\nid: 367\ncategories:\n  - 芝士就是力量！\ndate: 2019-08-20 16:54:32\n---\n\n同步：一个功能被调用，没有结果之前，就不会有返回\n\n异步：调用在发出后，这个调用就直接返回了，所以没有返回结果（告诉你我在查了，通过一个回调先通知你一下）\n\n阻塞：调用结果返回前，当前线程会被挂起\n\n非堵塞：在不能立刻得到结果之前，该调用不会阻塞当前的线程","content":"<p>同步：一个功能被调用，没有结果之前，就不会有返回</p>\n<p>异步：调用在发出后，这个调用就直接返回了，所以没有返回结果（告诉你我在查了，通过一个回调先通知你一下）</p>\n<p>阻塞：调用结果返回前，当前线程会被挂起</p>\n<p>非堵塞：在不能立刻得到结果之前，该调用不会阻塞当前的线程</p>\n","slug":"e5-90-8c-e6-ad-a5-e5-bc-82-e6-ad-a5-e9-98-bb-e5-a1-9e-e9-9d-9e-e9-98-bb-e5-a1-9e-ef-bc-81-ef-bc-81-ef-bc-81-ef-bc-81","updated":"2019-11-07T09:16:37.885Z","comments":true,"link":"","permalink":"/2019/08/20/e5-90-8c-e6-ad-a5-e5-bc-82-e6-ad-a5-e9-98-bb-e5-a1-9e-e9-9d-9e-e9-98-bb-e5-a1-9e-ef-bc-81-ef-bc-81-ef-bc-81-ef-bc-81/","excerpt":"","categories":[{"name":"芝士就是力量！","slug":"芝士就是力量！","permalink":"/categories/芝士就是力量！/"}],"tags":[]},{"title":"node避免回调地狱","date":"2019-08-20T08:46:31.000Z","path":"2019/08/20/node-e9-81-bf-e5-85-8d-e5-9b-9e-e8-b0-83-e5-9c-b0-e7-8b-b1/","text":"回调地狱怎么产生的？ node.js为什么需要异步编程？ 为什么？ node.js的主要应用场景为处理高并发（单位时间内加大的访问量），i/o请求密集（i/o操作往往非常耗时）的场景下。异步的关键在于解决i/o耗时问题。详情主页搜索’同步异步’。 这时候就需要异步解决这个问题，callbacks 回调函数是一种，但是过多的回调会造成callback hell，一层一层一串一串的 所以权衡之下Generator语法糖async/await是最好的解决方案，但是限制node版本在v7.6.0及以上，退而求其次，promise也ok！ （*去看看 这两篇文章，主页搜索即可Generator-语法糖 async/await node之Promise *） 方法【 模块化: 将回调函数转化为独立的函数 使用流程控制库 eg: [async] 使用Promise 使用async/await 】","raw":"---\ntitle: node避免回调地狱\nurl: 365.html\nid: 365\ncategories:\n  - node\ndate: 2019-08-20 16:46:31\n---\n\n回调地狱怎么产生的？\n\nnode.js为什么需要异步编程？\n\n为什么？\n<!--more-->\nnode.js的主要应用场景为处理高并发（单位时间内加大的访问量），i/o请求密集（i/o操作往往非常耗时）的场景下。异步的关键在于解决i/o耗时问题。详情主页搜索'同步异步'。\n\n这时候就需要异步解决这个问题，callbacks 回调函数是一种，但是过多的回调会造成callback hell，一层一层一串一串的\n\n![](http://l.yumud.com/image-8-35.png)\n\n所以权衡之下Generator语法糖async/await是最好的解决方案，但是限制node版本在v7.6.0及以上，退而求其次，promise也ok！ （*去看看 这两篇文章，主页搜索即可  \nGenerator-语法糖 async/await\n\n[node之Promise](https://thesecondlight.github.io/2019/08/20/node-e4-b9-8bpromise/)\n\n*）\n\n方法【\n\n模块化: 将回调函数转化为独立的函数\n\n使用流程控制库 eg: \\[async\\]\n\n使用Promise\n\n使用async/await\n\n】","content":"<p>回调地狱怎么产生的？</p>\n<p>node.js为什么需要异步编程？</p>\n<p>为什么？</p>\n<a id=\"more\"></a>\n<p>node.js的主要应用场景为处理高并发（单位时间内加大的访问量），i/o请求密集（i/o操作往往非常耗时）的场景下。异步的关键在于解决i/o耗时问题。详情主页搜索’同步异步’。</p>\n<p>这时候就需要异步解决这个问题，callbacks 回调函数是一种，但是过多的回调会造成callback hell，一层一层一串一串的</p>\n<p><img src=\"http://l.yumud.com/image-8-35.png\" alt></p>\n<p>所以权衡之下Generator语法糖async/await是最好的解决方案，但是限制node版本在v7.6.0及以上，退而求其次，promise也ok！ （*去看看 这两篇文章，主页搜索即可<br>Generator-语法糖 async/await</p>\n<p><a href=\"https://thesecondlight.github.io/2019/08/20/node-e4-b9-8bpromise/\" target=\"_blank\" rel=\"noopener\">node之Promise</a></p>\n<p>*）</p>\n<p>方法【</p>\n<p>模块化: 将回调函数转化为独立的函数</p>\n<p>使用流程控制库 eg: [async]</p>\n<p>使用Promise</p>\n<p>使用async/await</p>\n<p>】</p>\n","slug":"node-e9-81-bf-e5-85-8d-e5-9b-9e-e8-b0-83-e5-9c-b0-e7-8b-b1","updated":"2019-11-08T08:05:55.215Z","comments":true,"link":"","permalink":"/2019/08/20/node-e9-81-bf-e5-85-8d-e5-9b-9e-e8-b0-83-e5-9c-b0-e7-8b-b1/","excerpt":"回调地狱怎么产生的？ node.js为什么需要异步编程？ 为什么？","categories":[{"name":"node","slug":"node","permalink":"/categories/node/"}],"tags":[]},{"title":"node基础API","date":"2019-08-20T07:34:09.000Z","path":"2019/08/20/node-e5-9f-ba-e7-a1-80api/","text":"一、PATH 1.path.normalize(path) 规范化给定的path，并解析’..’ ‘.’片段 2.path.join([…paths]) path.join()方法使用平台特定的分隔符把全部给定的path片段连接起来，并规范化 3.path.resolve([…paths]) 将路径解析为一个绝对路径 const {resolve}=require(‘path’) console.log(resolve(‘./‘)) 4.basename文件名 extname文件扩展名 dirname目录名文件所在的路径 const {dirname,extname,basename}=require(‘path’); const filePath=’/user/local/bin/yumu.txt’ console.log(dirname(filePath)); //‘/user/local/bin’ extname(filePath) //‘.txt’ basename(filePath) //‘yumu.txt’ 5.path.parse,path.format path.parse()方法返回一个对象，对象的属性表示path的元素，返回的对象有一下属性：root dir base ext name path.format()返回一个路径字符串，与path.parse()相反 截的别人的图 6.sep delimiter win32 posix delimiter提供平台特定的路径分隔符 win: ; posix: : sep路径片段分隔符 win \\ posiz / path.win32 属性提供了 path 方法针对 Windows 的实现; path.posix 属性提供了 path 方法针对 POSIX 的实现。 不想写了，贴个别人的网址 https://www.jianshu.com/p/08e014f786a4 看完了，简略的写一下 path buffer event fs PATH [[ path.normalize() path.join() path.resolve() basename extname dirname path.parse,path.format sep,delimiter,win32,posix ]] buffer [[ buffer.alloc() buffer.allocUnsafe() buffer.from() buffer.byteLength() buffer.isBuffer() buffer.concat() buffer的实例方法 buf.length buf.toString() buf.fill() buf.equals() buf.indexOf() ]] event事件机制 开放了一个.on函数 具体使用如图 删除事件ce.removeListener(事件名，具体方法) 删除事件的所有方法 ce.removeAllLiateners(事件名) fs：文件系统 fs.readFile读文件 fs.writerFile写文件 fs.stat 返回的stats判断是否为文件或文件夹 stats.isFile() stats.isDirectory() stats详细信息 fs.rename重命名 fs.unlink删除 fs.readdir查找文件夹 fs.mkdir创建文件夹 fs.rmdir删除文件夹 fs.watch坚实文件的变化","raw":"---\ntitle: node基础API\nurl: 313.html\nid: 313\ncategories:\n  - node\ndate: 2019-08-20 15:34:09\n---\n\n一、PATH\n\n1.path.normalize(path)\n\n规范化给定的path，并解析'..' '.'片段\n<!--more-->\n![](http://l.yumud.com/image-22.png)\n\n![](http://l.yumud.com/image-23.png)\n\n2.path.join(\\[...paths\\])\n\npath.join()方法使用平台特定的分隔符把全部给定的path片段连接起来，并规范化\n\n![](http://l.yumud.com/image-24.png)\n\n![](http://l.yumud.com/image-25.png)\n\n3.path.resolve(\\[...paths\\])\n\n将路径解析为一个绝对路径\n\nconst {resolve}=require('path')\n\nconsole.log(resolve('./'))\n\n4.basename文件名 extname文件扩展名 dirname目录名文件所在的路径\n\nconst {dirname,extname,basename}=require('path');\n\nconst filePath='/user/local/bin/yumu.txt'\n\nconsole.log(dirname(filePath)); //'/user/local/bin'\n\nextname(filePath) //'.txt'\n\nbasename(filePath) //'yumu.txt'\n\n5.path.parse,path.format\n\npath.parse()方法返回一个对象，对象的属性表示path的元素，返回的对象有一下属性：root dir base ext name\n\npath.format()返回一个路径字符串，与path.parse()相反\n\n![](http://l.yumud.com/image-26.png)\n\n截的别人的图\n\n6.sep delimiter win32 posix\n\ndelimiter提供平台特定的路径分隔符\n\nwin: **;**\n\nposix: **:**\n\nsep路径片段分隔符\n\nwin \\\n\nposiz /\n\n`path.win32` 属性提供了 `path` 方法针对 Windows 的实现;\n\n`path.posix` 属性提供了 `path` 方法针对 POSIX 的实现。\n\n不想写了，贴个别人的网址\n\n[https://www.jianshu.com/p/08e014f786a4](https://www.jianshu.com/p/08e014f786a4)\n\n看完了，简略的写一下\n\n**path buffer event fs**\n\n**PATH**\n\n\\[\\[\n\npath.normalize()\n\npath.join()\n\npath.resolve()\n\nbasename extname dirname\n\npath.parse,path.format\n\nsep,delimiter,win32,posix\n\n\\]\\]\n\n**buffer**\n\n\\[\\[\n\nbuffer.alloc()\n\nbuffer.allocUnsafe()\n\nbuffer.from()\n\nbuffer.byteLength()\n\nbuffer.isBuffer()\n\nbuffer.concat()\n\n**buffer的实例方法**\n\nbuf.length buf.toString()\n\nbuf.fill()\n\nbuf.equals()\n\nbuf.indexOf()\n\n\\]\\]\n\n**event事件机制**\n\n开放了一个.on函数\n\n具体使用如图\n\n![](http://l.yumud.com/image-27.png)\n\n![](http://l.yumud.com/image-28.png)\n\n删除事件ce.removeListener(事件名，具体方法)\n\n删除事件的所有方法 ce.removeAllLiateners(事件名)\n\n**fs：文件系统**\n\nfs.readFile读文件\n\nfs.writerFile写文件\n\nfs.stat 返回的stats判断是否为文件或文件夹 stats.isFile() stats.isDirectory() stats详细信息\n\nfs.rename重命名\n\nfs.unlink删除\n\nfs.readdir查找文件夹\n\nfs.mkdir创建文件夹\n\nfs.rmdir删除文件夹\n\nfs.watch坚实文件的变化","content":"<p>一、PATH</p>\n<p>1.path.normalize(path)</p>\n<p>规范化给定的path，并解析’..’ ‘.’片段</p>\n<a id=\"more\"></a>\n<p><img src=\"http://l.yumud.com/image-22.png\" alt></p>\n<p><img src=\"http://l.yumud.com/image-23.png\" alt></p>\n<p>2.path.join([…paths])</p>\n<p>path.join()方法使用平台特定的分隔符把全部给定的path片段连接起来，并规范化</p>\n<p><img src=\"http://l.yumud.com/image-24.png\" alt></p>\n<p><img src=\"http://l.yumud.com/image-25.png\" alt></p>\n<p>3.path.resolve([…paths])</p>\n<p>将路径解析为一个绝对路径</p>\n<p>const {resolve}=require(‘path’)</p>\n<p>console.log(resolve(‘./‘))</p>\n<p>4.basename文件名 extname文件扩展名 dirname目录名文件所在的路径</p>\n<p>const {dirname,extname,basename}=require(‘path’);</p>\n<p>const filePath=’/user/local/bin/yumu.txt’</p>\n<p>console.log(dirname(filePath)); //‘/user/local/bin’</p>\n<p>extname(filePath) //‘.txt’</p>\n<p>basename(filePath) //‘yumu.txt’</p>\n<p>5.path.parse,path.format</p>\n<p>path.parse()方法返回一个对象，对象的属性表示path的元素，返回的对象有一下属性：root dir base ext name</p>\n<p>path.format()返回一个路径字符串，与path.parse()相反</p>\n<p><img src=\"http://l.yumud.com/image-26.png\" alt></p>\n<p>截的别人的图</p>\n<p>6.sep delimiter win32 posix</p>\n<p>delimiter提供平台特定的路径分隔符</p>\n<p>win: <strong>;</strong></p>\n<p>posix: <strong>:</strong></p>\n<p>sep路径片段分隔符</p>\n<p>win \\</p>\n<p>posiz /</p>\n<p><code>path.win32</code> 属性提供了 <code>path</code> 方法针对 Windows 的实现;</p>\n<p><code>path.posix</code> 属性提供了 <code>path</code> 方法针对 POSIX 的实现。</p>\n<p>不想写了，贴个别人的网址</p>\n<p><a href=\"https://www.jianshu.com/p/08e014f786a4\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/08e014f786a4</a></p>\n<p>看完了，简略的写一下</p>\n<p><strong>path buffer event fs</strong></p>\n<p><strong>PATH</strong></p>\n<p>[[</p>\n<p>path.normalize()</p>\n<p>path.join()</p>\n<p>path.resolve()</p>\n<p>basename extname dirname</p>\n<p>path.parse,path.format</p>\n<p>sep,delimiter,win32,posix</p>\n<p>]]</p>\n<p><strong>buffer</strong></p>\n<p>[[</p>\n<p>buffer.alloc()</p>\n<p>buffer.allocUnsafe()</p>\n<p>buffer.from()</p>\n<p>buffer.byteLength()</p>\n<p>buffer.isBuffer()</p>\n<p>buffer.concat()</p>\n<p><strong>buffer的实例方法</strong></p>\n<p>buf.length buf.toString()</p>\n<p>buf.fill()</p>\n<p>buf.equals()</p>\n<p>buf.indexOf()</p>\n<p>]]</p>\n<p><strong>event事件机制</strong></p>\n<p>开放了一个.on函数</p>\n<p>具体使用如图</p>\n<p><img src=\"http://l.yumud.com/image-27.png\" alt></p>\n<p><img src=\"http://l.yumud.com/image-28.png\" alt></p>\n<p>删除事件ce.removeListener(事件名，具体方法)</p>\n<p>删除事件的所有方法 ce.removeAllLiateners(事件名)</p>\n<p><strong>fs：文件系统</strong></p>\n<p>fs.readFile读文件</p>\n<p>fs.writerFile写文件</p>\n<p>fs.stat 返回的stats判断是否为文件或文件夹 stats.isFile() stats.isDirectory() stats详细信息</p>\n<p>fs.rename重命名</p>\n<p>fs.unlink删除</p>\n<p>fs.readdir查找文件夹</p>\n<p>fs.mkdir创建文件夹</p>\n<p>fs.rmdir删除文件夹</p>\n<p>fs.watch坚实文件的变化</p>\n","slug":"node-e5-9f-ba-e7-a1-80api","updated":"2019-11-08T08:05:31.609Z","comments":true,"link":"","permalink":"/2019/08/20/node-e5-9f-ba-e7-a1-80api/","excerpt":"一、PATH 1.path.normalize(path) 规范化给定的path，并解析’..’ ‘.’片段","categories":[{"name":"node","slug":"node","permalink":"/categories/node/"}],"tags":[]},{"title":"node 杂七杂八","date":"2019-08-20T02:45:30.000Z","path":"2019/08/20/node-e6-9d-82-e4-b8-83-e6-9d-82-e5-85-ab/","text":"this的值是全局对象，在浏览器中就是windows对象 .call .apply方法可以改变this的值 .call接受参数列表，.apply接受一个参数数组 prototype为子类定义属性和方法，重写和调用父类函数","raw":"---\ntitle: node 杂七杂八\nurl: 301.html\nid: 301\ncategories:\n  - node\ndate: 2019-08-20 10:45:30\n---\n\n![](http://l.yumud.com/image-8-20.png)\n\nthis的值是全局对象，在浏览器中就是windows对象\n\n**.call .apply方法可以改变this的值**\n\n.call接受参数列表，.apply接受一个参数数组\n\n![](http://l.yumud.com/image-8-21.png)\n\nprototype为子类定义属性和方法，重写和调用父类函数","content":"<p><img src=\"http://l.yumud.com/image-8-20.png\" alt></p>\n<p>this的值是全局对象，在浏览器中就是windows对象</p>\n<p><strong>.call .apply方法可以改变this的值</strong></p>\n<p>.call接受参数列表，.apply接受一个参数数组</p>\n<p><img src=\"http://l.yumud.com/image-8-21.png\" alt></p>\n<p>prototype为子类定义属性和方法，重写和调用父类函数</p>\n","slug":"node-e6-9d-82-e4-b8-83-e6-9d-82-e5-85-ab","updated":"2019-11-08T08:05:42.868Z","comments":true,"link":"","permalink":"/2019/08/20/node-e6-9d-82-e4-b8-83-e6-9d-82-e5-85-ab/","excerpt":"","categories":[{"name":"node","slug":"node","permalink":"/categories/node/"}],"tags":[]},{"title":"Async/await","date":"2019-08-20T02:06:16.000Z","path":"2019/08/20/async-await/","text":"这里的await类似于yield yield写法 yield就是中断点 并发操作 yield[a.save(), b.save()]","raw":"---\ntitle: Async/await\nurl: 293.html\nid: 293\ncategories:\n  - es6\ndate: 2019-08-20 10:06:16\ntoc: true\n---\n\n这里的await类似于yield\n\n![](http://l.yumud.com/image-18.png)\n\nyield写法 yield就是中断点\n\n![](http://l.yumud.com/image-19.png)\n\n并发操作 yield\\[a.save(), b.save()\\]","content":"<p>这里的await类似于yield</p>\n<p><img src=\"http://l.yumud.com/image-18.png\" alt></p>\n<p>yield写法 yield就是中断点</p>\n<p><img src=\"http://l.yumud.com/image-19.png\" alt></p>\n<p>并发操作 yield[a.save(), b.save()]</p>\n","slug":"async-await","updated":"2019-11-08T08:02:54.694Z","comments":true,"link":"","permalink":"/2019/08/20/async-await/","excerpt":"","categories":[{"name":"es6","slug":"es6","permalink":"/categories/es6/"}],"tags":[]},{"title":"node初步--上传及下载包","date":"2019-08-19T06:16:32.000Z","path":"2019/08/19/node-e5-88-9d-e6-ad-a5/","text":"新建一个hello.js，存放在hello文件夹中， 执行npm init （帮助你生成package.json文件） 注册账号，将包发布到仓库中 npm adduser(密码设置10位及以上，否则报错)=&gt;npm login登录一下 上传包 npm publish 在本文件夹中 npm publish . （推送失败=&gt;没有激活邮箱hh或者是文件夹已存在，和网上别人发布的包名重复，在package.json中把name改了） 安装自己上传的包 npm install 包名","raw":"---\ntitle: node初步--上传及下载包\nurl: 281.html\nid: 281\ncategories:\n  - node\ndate: 2019-08-19 14:16:32\n---\n\n新建一个hello.js，存放在hello文件夹中，\n\n执行**npm init** （帮助你生成package.json文件）\n\n注册账号，将包发布到仓库中 **npm adduser**(密码设置10位及以上，否则报错)=>npm login登录一下\n<!--more-->\n上传包 npm publish <folder>在本文件夹中 npm publish **.** （推送失败=>**没有激活邮箱**hh或者是**文件夹已存在**，和网上别人发布的包名重复，在package.json中把name改了）\n\n安装自己上传的包 npm install 包名","content":"<p>新建一个hello.js，存放在hello文件夹中，</p>\n<p>执行<strong>npm init</strong> （帮助你生成package.json文件）</p>\n<p>注册账号，将包发布到仓库中 <strong>npm adduser</strong>(密码设置10位及以上，否则报错)=&gt;npm login登录一下</p>\n<a id=\"more\"></a>\n<p>上传包 npm publish <folder>在本文件夹中 npm publish <strong>.</strong> （推送失败=&gt;<strong>没有激活邮箱</strong>hh或者是<strong>文件夹已存在</strong>，和网上别人发布的包名重复，在package.json中把name改了）</folder></p>\n<p>安装自己上传的包 npm install 包名</p>\n","slug":"node-e5-88-9d-e6-ad-a5","updated":"2019-11-08T08:05:39.100Z","comments":true,"link":"","permalink":"/2019/08/19/node-e5-88-9d-e6-ad-a5/","excerpt":"新建一个hello.js，存放在hello文件夹中， 执行npm init （帮助你生成package.json文件） 注册账号，将包发布到仓库中 npm adduser(密码设置10位及以上，否则报错)=&gt;npm login登录一下","categories":[{"name":"node","slug":"node","permalink":"/categories/node/"}],"tags":[]},{"title":"es6--Object","date":"2019-08-16T07:20:04.000Z","path":"2019/08/16/es6-object/","text":"Object.is() 比较两个值是否严格相等，与（===）的差别只有两个 2.Object.assgin() 对象的合并 同名属性，后面的覆盖前面的（浅拷贝） null和undefined无法转化为对象，所以以他们为参数，会报错 只要null和undefined不在首参数，就不会报错 ☆其他类型的值不在首参数也不会报错，但是不输出，只输出字符串类型，布尔和数值被忽略 ==&gt;浅拷贝 改变了对象原来的值 有一个好玩的，用它处理数组，Object.assign([1,2,3],[4,5])输出[4,5,3] 它是按照下标来覆盖的","raw":"---\ntitle: es6--Object\nurl: 252.html\nid: 252\ncategories:\n  - 面试\ndate: 2019-08-16 15:20:04\n---\n\n![](http://l.yumud.com/image-8-11.png)\n\n1.  **Object.is()**\n<!--more-->\n![](http://l.yumud.com/image-8-13.png)\n\n*   比较两个值是否严格相等，与（===）的差别只有两个\n\n![](http://l.yumud.com/image-8-14.png)\n\n![](http://l.yumud.com/image-8-15.png)\n\n**2.Object.assgin() 对象的合并** 同名属性，后面的覆盖前面的（浅拷贝）\n\n![](http://l.yumud.com/image-8-16.png)\n\nnull和undefined无法转化为对象，所以以他们为参数，会报错\n\n只要null和undefined不在首参数，就不会报错\n\n☆其他类型的值不在首参数也不会报错，但是不输出，只输出字符串类型，布尔和数值被忽略\n\n==>浅拷贝\n\n![](http://l.yumud.com/image-8-17.png)\n\n改变了对象原来的值\n\n有一个好玩的，用它处理数组，Object.assign(\\[1,2,3\\],\\[4,5\\])输出\\[4,5,3\\]\n\n它是按照下标来覆盖的","content":"<p><img src=\"http://l.yumud.com/image-8-11.png\" alt></p>\n<ol>\n<li><strong>Object.is()</strong><a id=\"more\"></a>\n<img src=\"http://l.yumud.com/image-8-13.png\" alt></li>\n</ol>\n<ul>\n<li>比较两个值是否严格相等，与（===）的差别只有两个</li>\n</ul>\n<p><img src=\"http://l.yumud.com/image-8-14.png\" alt></p>\n<p><img src=\"http://l.yumud.com/image-8-15.png\" alt></p>\n<p><strong>2.Object.assgin() 对象的合并</strong> 同名属性，后面的覆盖前面的（浅拷贝）</p>\n<p><img src=\"http://l.yumud.com/image-8-16.png\" alt></p>\n<p>null和undefined无法转化为对象，所以以他们为参数，会报错</p>\n<p>只要null和undefined不在首参数，就不会报错</p>\n<p>☆其他类型的值不在首参数也不会报错，但是不输出，只输出字符串类型，布尔和数值被忽略</p>\n<p>==&gt;浅拷贝</p>\n<p><img src=\"http://l.yumud.com/image-8-17.png\" alt></p>\n<p>改变了对象原来的值</p>\n<p>有一个好玩的，用它处理数组，Object.assign([1,2,3],[4,5])输出[4,5,3]</p>\n<p>它是按照下标来覆盖的</p>\n","slug":"es6-object","updated":"2019-11-08T08:04:30.900Z","comments":true,"link":"","permalink":"/2019/08/16/es6-object/","excerpt":"Object.is()","categories":[{"name":"面试","slug":"面试","permalink":"/categories/面试/"}],"tags":[]},{"title":"js-4 canvas","date":"2019-08-13T08:55:41.000Z","path":"2019/08/13/js-4-canvas/","text":"ctx.fillStyle ctx.fillRect（起点x,y，宽高x,y）","raw":"---\ntitle: js-4 canvas\nurl: 249.html\nid: 249\ncategories:\n  - 面试\ndate: 2019-08-13 16:55:41\n---\n\n![](http://l.yumud.com/image-8-10.png)\n\nctx.fillStyle\n\nctx.fillRect（起点x,y，宽高x,y）","content":"<p><img src=\"http://l.yumud.com/image-8-10.png\" alt></p>\n<p>ctx.fillStyle</p>\n<p>ctx.fillRect（起点x,y，宽高x,y）</p>\n","slug":"js-4-canvas","updated":"2019-11-08T08:05:12.952Z","comments":true,"link":"","permalink":"/2019/08/13/js-4-canvas/","excerpt":"","categories":[{"name":"面试","slug":"面试","permalink":"/categories/面试/"}],"tags":[]},{"title":"js-3 defer async","date":"2019-08-13T06:49:11.000Z","path":"2019/08/13/js-3-defer-async/","text":"为了使脚本按页面中的顺序加载，采用defer，这样调用顺序就确定了，不会造成后两个脚本中依赖jquery的函数产生错误。 async 异步属性 告知浏览器在遇到元素时不要中断后续html内容的加载","raw":"---\ntitle: js-3 defer async\nurl: 242.html\nid: 242\ncategories:\n  - js\ndate: 2019-08-13 14:49:11\n---\n\n为了使脚本按页面中的顺序加载，采用**defer**，这样调用顺序就确定了，不会造成后两个脚本中依赖jquery的函数产生错误。\n\n![](http://l.yumud.com/image-8-8.png)\n\n**async** 异步属性\n<!--more-->\n告知浏览器在遇到<script>元素时不要中断后续html内容的加载\n\n![](http://l.yumud.com/image-8-9.png)","content":"<p>为了使脚本按页面中的顺序加载，采用<strong>defer</strong>，这样调用顺序就确定了，不会造成后两个脚本中依赖jquery的函数产生错误。</p>\n<p><img src=\"http://l.yumud.com/image-8-8.png\" alt></p>\n<p><strong>async</strong> 异步属性</p>\n<a id=\"more\"></a>\n<p>告知浏览器在遇到<script>元素时不要中断后续html内容的加载</p>\n<p><img src=\"http://l.yumud.com/image-8-9.png\" alt=\"\"></p>\n</script></p>","slug":"js-3-defer-async","updated":"2019-11-08T08:05:05.572Z","comments":true,"link":"","permalink":"/2019/08/13/js-3-defer-async/","excerpt":"为了使脚本按页面中的顺序加载，采用defer，这样调用顺序就确定了，不会造成后两个脚本中依赖jquery的函数产生错误。 async 异步属性","categories":[{"name":"js","slug":"js","permalink":"/categories/js/"}],"tags":[]},{"title":"js-2 prototype","date":"2019-08-13T04:43:37.000Z","path":"2019/08/13/js-2-prototype/","text":"Person.prototype 是一个可以被Person的所以实例共享的对象，他是一个名叫原型链（prototype chain）的查询链的一部分。 给已存在的对象添加额外的方法","raw":"---\ntitle: js-2 prototype\nurl: 232.html\nid: 232\ncategories:\n  - js\ndate: 2019-08-13 12:43:37\n---\n\nPerson.prototype 是一个可以被Person的所以实例共享的对象，他是一个名叫原型链（prototype chain）的查询链的一部分。\n\n![](http://l.yumud.com/image-8-6.png)\n\n给已存在的对象添加额外的方法\n\n![](http://l.yumud.com/image-8-7.png)","content":"<p>Person.prototype 是一个可以被Person的所以实例共享的对象，他是一个名叫原型链（prototype chain）的查询链的一部分。</p>\n<p><img src=\"http://l.yumud.com/image-8-6.png\" alt></p>\n<p>给已存在的对象添加额外的方法</p>\n<p><img src=\"http://l.yumud.com/image-8-7.png\" alt></p>\n","slug":"js-2-prototype","updated":"2019-11-08T08:04:56.547Z","comments":true,"link":"","permalink":"/2019/08/13/js-2-prototype/","excerpt":"","categories":[{"name":"js","slug":"js","permalink":"/categories/js/"}],"tags":[]},{"title":"js-1 数组","date":"2019-08-12T10:16:55.000Z","path":"2019/08/12/js-1/","text":"1-1 数组的基本方法 for of 遍历数组 输出value值 for in 遍历对象（常用于）输出key值 1-2 不限制函数的参数 arguments函数体内的一个内部函数，包括了所有被传入的参数，这样可接收任意个数的参数。 但是过于繁琐，可以使用剩余参数来替换arguments的使用， 形式: …variable (它将包含在调用函数时使用的未捕获整个参数列表到这个变量中时。) 例子： 要用数组做参数，使用avg.apply(null,[1,2,3,4]) 再看再补。","raw":"---\ntitle: js-1 数组\nurl: 203.html\nid: 203\ncategories:\n  - js\ndate: 2019-08-12 18:16:55\n---\n\n1-1\n\n数组的基本方法\n\n![](http://l.yumud.com/image-5.png)\n\nfor of 遍历数组 输出value值\n\nfor in 遍历对象（常用于）输出key值\n<!--more-->\n![](http://l.yumud.com/image.png)\n\n![](http://l.yumud.com/image-1.png)\n\n1-2\n\n不限制函数的参数\n\n![](http://l.yumud.com/image-8-2.png)\n\narguments函数体内的一个内部函数，包括了所有被传入的参数，这样可接收任意个数的参数。\n\n但是过于繁琐，可以使用剩余参数来替换arguments的使用，\n\n形式: ...variable (**它将包含在调用函数时使用的未捕获整个参数列表到这个变量中时。**)\n\n例子：\n\n![](http://l.yumud.com/image-3.png)\n\n  \n\n![](http://l.yumud.com/image-4.png)\n\n要用数组做参数，使用avg.apply(**null**,\\[1,2,3,4\\])\n\n再看再补。","content":"<p>1-1</p>\n<p>数组的基本方法</p>\n<p><img src=\"http://l.yumud.com/image-5.png\" alt></p>\n<p>for of 遍历数组 输出value值</p>\n<p>for in 遍历对象（常用于）输出key值</p>\n<a id=\"more\"></a>\n<p><img src=\"http://l.yumud.com/image.png\" alt></p>\n<p><img src=\"http://l.yumud.com/image-1.png\" alt></p>\n<p>1-2</p>\n<p>不限制函数的参数</p>\n<p><img src=\"http://l.yumud.com/image-8-2.png\" alt></p>\n<p>arguments函数体内的一个内部函数，包括了所有被传入的参数，这样可接收任意个数的参数。</p>\n<p>但是过于繁琐，可以使用剩余参数来替换arguments的使用，</p>\n<p>形式: …variable (<strong>它将包含在调用函数时使用的未捕获整个参数列表到这个变量中时。</strong>)</p>\n<p>例子：</p>\n<p><img src=\"http://l.yumud.com/image-3.png\" alt></p>\n<p><img src=\"http://l.yumud.com/image-4.png\" alt></p>\n<p>要用数组做参数，使用avg.apply(<strong>null</strong>,[1,2,3,4])</p>\n<p>再看再补。</p>\n","slug":"js-1","updated":"2019-11-08T08:04:53.463Z","comments":true,"link":"","permalink":"/2019/08/12/js-1/","excerpt":"1-1 数组的基本方法 for of 遍历数组 输出value值 for in 遍历对象（常用于）输出key值","categories":[{"name":"js","slug":"js","permalink":"/categories/js/"}],"tags":[]},{"title":"记——杭州第一次面试","date":"2019-07-29T10:38:01.000Z","path":"2019/07/29/e8-ae-b0-e6-9d-ad-e5-b7-9e-e7-ac-ac-e4-b8-80-e6-ac-a1-e9-9d-a2-e8-af-95/","text":"摸摸耳朵，羞愧…. 明明自己整理的，啥也不会，以后一定写代码的时候，记一下，不，不在笔记上记，在脑子里记一下。 1. null和undefined的区别 null 表示尚未存在的对象，常用来表示函数企图返回一个不存在的对象；undefined 声明的变量尚未被初始化 2.let和var，const 声明了未赋值，表现相同 undefined， 未声明，let为报错ReferenceError: 某某 is not defined，var为undefined 3.es6新特性 我先叭叭几个 变量，新加了let const（为了解决var溢出） **const定义的对象，对象的值可以改变，对象的指针不可以改变 因为对象是引用类型的，const x={name:’yumu’,age:’20’} x中保存的仅是对象的指针，也就是const仅保证了对象的指针不发生改变。 函数方面，箭头函数 ()=&gt;{} 去重 set 解析 …array 合并 详细看这个链接=&gt; https://www.jianshu.com/p/87008f4f8513 【评论有说有很多错的，那就暂为参考，详细还是去阮一峰的es6入门看看吧=&gt;http://es6.ruanyifeng.com/】 4.想起来再加","raw":"---\ntitle: 记——杭州第一次面试\nurl: 192.html\nid: 192\ncategories:\n  - 面试\ndate: 2019-07-29 18:38:01\n---\n\n摸摸耳朵，羞愧....\n\n明明自己整理的，啥也不会，以后一定写代码的时候，记一下，不，不在笔记上记，在脑子里记一下。\n\n1\\. null和undefined的区别\n<!--more-->\nnull 表示尚未存在的对象，常用来表示函数企图返回一个不存在的对象；undefined 声明的变量尚未被初始化\n\n2.let和var，const\n\n![](http://l.yumud.com/image-15.png)\n\n  \n\n声明了未赋值，表现相同 undefined，\n\n未声明，let为报错ReferenceError: 某某 is not defined，var为undefined\n\n![](http://l.yumud.com/image-16.png)\n\n3.es6新特性\n\n我先叭叭几个\n\n变量，新加了let const（为了解决var溢出）\n\n**const定义的对象，对象的值可以改变，对象的指针不可以改变\n\n因为对象是引用类型的，const x={name:'yumu',age:'20'}\n\nx中保存的仅是对象的指针，也就是const仅保证了对象的指针不发生改变。\n\n函数方面，箭头函数 ()=>{}\n\n去重 set\n\n解析 ...array 合并\n\n![](http://l.yumud.com/image-17.png)\n\n详细看这个链接=>\n\n[https://www.jianshu.com/p/87008f4f8513](https://www.jianshu.com/p/87008f4f8513) 【评论有说有很多错的，那就暂为参考，详细还是去阮一峰的es6入门看看吧=>[http://es6.ruanyifeng.com/](http://es6.ruanyifeng.com/)】\n\n4.想起来再加","content":"<p>摸摸耳朵，羞愧….</p>\n<p>明明自己整理的，啥也不会，以后一定写代码的时候，记一下，不，不在笔记上记，在脑子里记一下。</p>\n<p>1. null和undefined的区别</p>\n<a id=\"more\"></a>\n<p>null 表示尚未存在的对象，常用来表示函数企图返回一个不存在的对象；undefined 声明的变量尚未被初始化</p>\n<p>2.let和var，const</p>\n<p><img src=\"http://l.yumud.com/image-15.png\" alt></p>\n<p>声明了未赋值，表现相同 undefined，</p>\n<p>未声明，let为报错ReferenceError: 某某 is not defined，var为undefined</p>\n<p><img src=\"http://l.yumud.com/image-16.png\" alt></p>\n<p>3.es6新特性</p>\n<p>我先叭叭几个</p>\n<p>变量，新加了let const（为了解决var溢出）</p>\n<p>**const定义的对象，对象的值可以改变，对象的指针不可以改变</p>\n<p>因为对象是引用类型的，const x={name:’yumu’,age:’20’}</p>\n<p>x中保存的仅是对象的指针，也就是const仅保证了对象的指针不发生改变。</p>\n<p>函数方面，箭头函数 ()=&gt;{}</p>\n<p>去重 set</p>\n<p>解析 …array 合并</p>\n<p><img src=\"http://l.yumud.com/image-17.png\" alt></p>\n<p>详细看这个链接=&gt;</p>\n<p><a href=\"https://www.jianshu.com/p/87008f4f8513\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/87008f4f8513</a> 【评论有说有很多错的，那就暂为参考，详细还是去阮一峰的es6入门看看吧=&gt;<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/</a>】</p>\n<p>4.想起来再加</p>\n","slug":"e8-ae-b0-e6-9d-ad-e5-b7-9e-e7-ac-ac-e4-b8-80-e6-ac-a1-e9-9d-a2-e8-af-95","updated":"2019-11-15T02:31:18.077Z","comments":true,"link":"","permalink":"/2019/07/29/e8-ae-b0-e6-9d-ad-e5-b7-9e-e7-ac-ac-e4-b8-80-e6-ac-a1-e9-9d-a2-e8-af-95/","excerpt":"摸摸耳朵，羞愧…. 明明自己整理的，啥也不会，以后一定写代码的时候，记一下，不，不在笔记上记，在脑子里记一下。 1. null和undefined的区别","categories":[{"name":"面试","slug":"面试","permalink":"/categories/面试/"}],"tags":[]},{"title":"记——电面题目","date":"2019-07-20T02:14:39.000Z","path":"2019/07/20/e8-ae-b0-e7-94-b5-e9-9d-a2-e9-a2-98-e7-9b-ae/","text":"1. vue为什么是一个单页面应用 资源加载一次，数据操作交互由router和ajax完成 2.vuex，为什么选择vuex（和window.global.a相比） http://www.imooc.com/wenda/detail/428097 vuex管理多个组件共享状态。（大型单页应用）代码量少，统一数据来源 3.vue生命周期 创建，挂载，更新，销毁 （前）created,mounted,updated,destroyed 4.假如一个页面出错，渲染了100多次，你在生命周期的那个阶段阻止他？ 应该是updated之前 ——————————-我是一个分割线———————————————————————— 朋友的笔试题目hhh 1.求最大连续子序列 动态规划 2.给定数组，求k个最大值 3.反转字符串 注意split的分割方法 运行结果 4.分割 slice的用法（ 取前不取后 ） 运行结果 5.set去重 运行结果 就先记录这些，真的是一本正经的回答，答什么错什么 -_- 有疑问留言呀，一起来battle！","raw":"---\ntitle: 记——电面题目\nurl: 131.html\nid: 131\ncategories:\n  - 面试\ndate: 2019-07-20 10:14:39\n---\n\n**1.** vue为什么是一个单页面应用\n\n**资源加载一次，数据操作交互由router和ajax完成**\n\n**2.**vuex，为什么选择vuex（和window.global.a相比）\n<!--more-->\n[**http://www.imooc.com/wenda/detail/428097**](http://www.imooc.com/wenda/detail/428097) **vuex管理多个组件共享状态。（大型单页应用）代码量少，统一数据来源**\n\n![](http://106.12.29.51/wp-content/uploads/2019/07/image-3.png)\n\n**3.**vue生命周期\n\n**创建，挂载，更新，销毁 （前）created,mounted,updated,destroyed**\n\n![](http://106.12.29.51/wp-content/uploads/2019/07/image-4.png)\n\n  \n\n![](http://106.12.29.51/wp-content/uploads/2019/07/image-5.png)\n\n**4.**假如一个页面出错，渲染了100多次，你在生命周期的那个阶段阻止他？\n\n**应该是updated之前**\n\n![](http://106.12.29.51/wp-content/uploads/2019/07/image-14-1024x231.png)\n\n-------------------------------我是一个分割线------------------------------------------------------------------------\n\n朋友的笔试题目hhh\n\n**1.**求最大连续子序列\n\n**动态规划**\n\n![](http://106.12.29.51/wp-content/uploads/2019/07/image-9.png)\n\n**2.**给定数组，求k个最大值\n\n![](http://106.12.29.51/wp-content/uploads/2019/07/image-6.png)\n\n**3.**反转字符串\n\n**注意split的分割方法**\n\n![](http://106.12.29.51/wp-content/uploads/2019/07/image-7.png)\n\n**运行结果**\n\n![](http://106.12.29.51/wp-content/uploads/2019/07/image-8.png)\n\n  \n\n**4.**分割 slice的用法（ 取前不取后 ）\n\n![](http://106.12.29.51/wp-content/uploads/2019/07/image-10.png)\n\n**运行结果**\n\n![](http://106.12.29.51/wp-content/uploads/2019/07/image-11.png)\n\n**5.**set去重\n\n![](http://106.12.29.51/wp-content/uploads/2019/07/image-12.png)\n\n**运行结果**\n\n![](http://106.12.29.51/wp-content/uploads/2019/07/image-13.png)\n\n就先记录这些，真的是一本正经的回答，答什么错什么 -_-\n\n有疑问留言呀，一起来battle！","content":"<p><strong>1.</strong> vue为什么是一个单页面应用</p>\n<p><strong>资源加载一次，数据操作交互由router和ajax完成</strong></p>\n<p><strong>2.</strong>vuex，为什么选择vuex（和window.global.a相比）</p>\n<a id=\"more\"></a>\n<p><a href=\"http://www.imooc.com/wenda/detail/428097\" target=\"_blank\" rel=\"noopener\"><strong>http://www.imooc.com/wenda/detail/428097</strong></a> <strong>vuex管理多个组件共享状态。（大型单页应用）代码量少，统一数据来源</strong></p>\n<p><img src=\"http://106.12.29.51/wp-content/uploads/2019/07/image-3.png\" alt></p>\n<p><strong>3.</strong>vue生命周期</p>\n<p><strong>创建，挂载，更新，销毁 （前）created,mounted,updated,destroyed</strong></p>\n<p><img src=\"http://106.12.29.51/wp-content/uploads/2019/07/image-4.png\" alt></p>\n<p><img src=\"http://106.12.29.51/wp-content/uploads/2019/07/image-5.png\" alt></p>\n<p><strong>4.</strong>假如一个页面出错，渲染了100多次，你在生命周期的那个阶段阻止他？</p>\n<p><strong>应该是updated之前</strong></p>\n<p><img src=\"http://106.12.29.51/wp-content/uploads/2019/07/image-14-1024x231.png\" alt></p>\n<p>——————————-我是一个分割线————————————————————————</p>\n<p>朋友的笔试题目hhh</p>\n<p><strong>1.</strong>求最大连续子序列</p>\n<p><strong>动态规划</strong></p>\n<p><img src=\"http://106.12.29.51/wp-content/uploads/2019/07/image-9.png\" alt></p>\n<p><strong>2.</strong>给定数组，求k个最大值</p>\n<p><img src=\"http://106.12.29.51/wp-content/uploads/2019/07/image-6.png\" alt></p>\n<p><strong>3.</strong>反转字符串</p>\n<p><strong>注意split的分割方法</strong></p>\n<p><img src=\"http://106.12.29.51/wp-content/uploads/2019/07/image-7.png\" alt></p>\n<p><strong>运行结果</strong></p>\n<p><img src=\"http://106.12.29.51/wp-content/uploads/2019/07/image-8.png\" alt></p>\n<p><strong>4.</strong>分割 slice的用法（ 取前不取后 ）</p>\n<p><img src=\"http://106.12.29.51/wp-content/uploads/2019/07/image-10.png\" alt></p>\n<p><strong>运行结果</strong></p>\n<p><img src=\"http://106.12.29.51/wp-content/uploads/2019/07/image-11.png\" alt></p>\n<p><strong>5.</strong>set去重</p>\n<p><img src=\"http://106.12.29.51/wp-content/uploads/2019/07/image-12.png\" alt></p>\n<p><strong>运行结果</strong></p>\n<p><img src=\"http://106.12.29.51/wp-content/uploads/2019/07/image-13.png\" alt></p>\n<p>就先记录这些，真的是一本正经的回答，答什么错什么 -_-</p>\n<p>有疑问留言呀，一起来battle！</p>\n","slug":"e8-ae-b0-e7-94-b5-e9-9d-a2-e9-a2-98-e7-9b-ae","updated":"2019-11-08T08:04:09.811Z","comments":true,"link":"","permalink":"/2019/07/20/e8-ae-b0-e7-94-b5-e9-9d-a2-e9-a2-98-e7-9b-ae/","excerpt":"1. vue为什么是一个单页面应用 资源加载一次，数据操作交互由router和ajax完成 2.vuex，为什么选择vuex（和window.global.a相比）","categories":[{"name":"面试","slug":"面试","permalink":"/categories/面试/"}],"tags":[]},{"title":"打地鼠 pia!","date":"2019-07-15T09:20:52.000Z","path":"2019/07/15/e6-89-93-e5-9c-b0-e9-bc-a0-pia/","text":"打地鼠pia！戳一下一起来尝试地域模式把，皮卡丘！ –不用服务器了，用github+hexo搭的博客，那我的游戏放哪儿？放一个单独文件夹里，应该没啥大问题。 在项目页中，头部添加layout: false，具体如下图图中被包裹的内容为你的项目主页面","raw":"---\ntitle: 打地鼠 pia!\nurl: 126.html\nid: 126\ncategories:\n  - Demo\ndate: 2019-07-15 17:20:52\ntop: 100\n---\n\n打地鼠pia！[戳一下](https://thesecondlight.github.io/whole/beat)\n一起来尝试地域模式把，皮卡丘！\n\n<!--more-->\n--不用服务器了，用github+hexo搭的博客，那我的游戏放哪儿？放一个单独文件夹里，应该没啥大问题。\n 在项目页中，头部添加layout: false，具体如下图\n![](http://l.yumud.com/beat.png)\n图中被{%raw%}{%endraw%}包裹的内容为你的项目主页面","content":"<p>打地鼠pia！<a href=\"https://thesecondlight.github.io/whole/beat\" target=\"_blank\" rel=\"noopener\">戳一下</a><br>一起来尝试地域模式把，皮卡丘！</p>\n<a id=\"more\"></a>\n<p>–不用服务器了，用github+hexo搭的博客，那我的游戏放哪儿？放一个单独文件夹里，应该没啥大问题。<br> 在项目页中，头部添加layout: false，具体如下图<br><img src=\"http://l.yumud.com/beat.png\" alt><br>图中被包裹的内容为你的项目主页面</p>\n","slug":"e6-89-93-e5-9c-b0-e9-bc-a0-pia","updated":"2019-11-08T08:03:43.716Z","comments":true,"link":"","permalink":"/2019/07/15/e6-89-93-e5-9c-b0-e9-bc-a0-pia/","excerpt":"打地鼠pia！戳一下一起来尝试地域模式把，皮卡丘！","categories":[{"name":"Demo","slug":"Demo","permalink":"/categories/Demo/"}],"tags":[]},{"title":"云服务器的配置问题（windows）【从零开始建站】","date":"2019-07-07T07:31:49.000Z","path":"2019/07/07/e4-ba-91-e6-9c-8d-e5-8a-a1-e5-99-a8-e7-9a-84-e9-85-8d-e7-bd-ae-e9-97-ae-e9-a2-98-ef-bc-88windows-ef-bc-89/","text":"建议先搞一个免费试用的玩一下，直接买个一年的可能兴趣扁扁-_- 华为云最近有一个七天免费试用，阿里云之前好像有搞过三个月几块钱，反正短期都挺便宜的。 搞来云服务器 点开控制台，点击实例，看一下自己的IP（公网IP），重置一下密码（就在这一栏标题为操作，点开找找） mstsc远程连接，输入IP，点开详细，输入用户名，密码，用户名差不多是Administrator(购买成功后系统会发送信息给你，里面有用户名),密码就是第二步你重置的那个密码⭐（进不来刷新几次） 进入服务器，下载xampp,wordpress，把xampp里面的htdocs文件中的内容删除，wordpress里面的内容复制到xampp的htdocs文件夹中 点击xampp-control进入 点击apache，mysql前面的XX，变成√，点击后面的start，变成如图，点击mysql后面的Admin，进入phpmyadmin 6.新建一个数据库 7.输入IP，输入打不开，回控制台配置安全组，允许80端口⭐ 8.输入IP，按提示一步一步走，数据库名就是第六步你建的数据库名字，记住你wordpress的用户名和密码 9.就没啥大问题了，进来到处点点，换换主题，写写文章（把你想上线的项目放到htdocs文件夹下，通过ip/项目文件夹名访问） 又写完了，鼓掌！ 有问题留言哦，末尾放一个B站的教程视频，很耐思，他还出了一个linux的教程，视频很短，不过讲的很棒 https://www.bilibili.com/video/av52657003 友情提示，不会就找个靠谱的问一下，或者百度视频教程，自己越搞越糊涂，可能会很丧，例如我那可怜的一年的云服务器","raw":"---\ntitle: 云服务器的配置问题（windows）【从零开始建站】\nurl: 113.html\nid: 113\ncategories:\n  - 芝士就是力量！\ndate: 2019-07-07 15:31:49\n---\n\n建议先搞一个免费试用的玩一下，直接买个一年的可能兴趣扁扁-_-\n\n华为云最近有一个七天免费试用，阿里云之前好像有搞过三个月几块钱，反正短期都挺便宜的。\n\n1.  搞来云服务器<!--more-->\n2.  点开控制台，点击实例，看一下自己的IP（公网IP），重置一下密码（就在这一栏标题为操作，点开找找）\n3.  mstsc远程连接，输入IP，点开详细，输入用户名，密码，用户名差不多是Administrator(购买成功后系统会发送信息给你，里面有用户名),密码就是第二步你重置的那个密码⭐（进不来刷新几次）\n4.  进入服务器，下载xampp,wordpress，把xampp里面的htdocs文件中的内容删除，wordpress里面的内容复制到xampp的htdocs文件夹中\n5.  点击xampp-control进入\n\n![](http://l.yumud.com/image-2.png)\n\n点击apache，mysql前面的XX，变成√，点击后面的start，变成如图，点击mysql后面的Admin，进入phpmyadmin\n\n6.新建一个数据库\n\n7.输入IP，输入打不开，回控制台配置安全组，允许80端口⭐\n\n8.输入IP，按提示一步一步走，数据库名就是第六步你建的数据库名字，记住你wordpress的用户名和密码\n\n9.就没啥大问题了，进来到处点点，换换主题，写写文章（把你想上线的项目放到htdocs文件夹下，通过ip/项目文件夹名访问）\n\n又写完了，鼓掌！\n\n有问题留言哦，末尾放一个B站的教程视频，很耐思，他还出了一个linux的教程，视频很短，不过讲的很棒\n\n[https://www.bilibili.com/video/av52657003](https://www.bilibili.com/video/av52657003)\n\n**友情提示，不会就找个靠谱的问一下，或者百度视频教程，自己越搞越糊涂，可能会很丧，例如我那可怜的一年的云服务器**","content":"<p>建议先搞一个免费试用的玩一下，直接买个一年的可能兴趣扁扁-_-</p>\n<p>华为云最近有一个七天免费试用，阿里云之前好像有搞过三个月几块钱，反正短期都挺便宜的。</p>\n<ol>\n<li>搞来云服务器<a id=\"more\"></a></li>\n<li>点开控制台，点击实例，看一下自己的IP（公网IP），重置一下密码（就在这一栏标题为操作，点开找找）</li>\n<li>mstsc远程连接，输入IP，点开详细，输入用户名，密码，用户名差不多是Administrator(购买成功后系统会发送信息给你，里面有用户名),密码就是第二步你重置的那个密码⭐（进不来刷新几次）</li>\n<li>进入服务器，下载xampp,wordpress，把xampp里面的htdocs文件中的内容删除，wordpress里面的内容复制到xampp的htdocs文件夹中</li>\n<li>点击xampp-control进入</li>\n</ol>\n<p><img src=\"http://l.yumud.com/image-2.png\" alt></p>\n<p>点击apache，mysql前面的XX，变成√，点击后面的start，变成如图，点击mysql后面的Admin，进入phpmyadmin</p>\n<p>6.新建一个数据库</p>\n<p>7.输入IP，输入打不开，回控制台配置安全组，允许80端口⭐</p>\n<p>8.输入IP，按提示一步一步走，数据库名就是第六步你建的数据库名字，记住你wordpress的用户名和密码</p>\n<p>9.就没啥大问题了，进来到处点点，换换主题，写写文章（把你想上线的项目放到htdocs文件夹下，通过ip/项目文件夹名访问）</p>\n<p>又写完了，鼓掌！</p>\n<p>有问题留言哦，末尾放一个B站的教程视频，很耐思，他还出了一个linux的教程，视频很短，不过讲的很棒</p>\n<p><a href=\"https://www.bilibili.com/video/av52657003\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av52657003</a></p>\n<p><strong>友情提示，不会就找个靠谱的问一下，或者百度视频教程，自己越搞越糊涂，可能会很丧，例如我那可怜的一年的云服务器</strong></p>\n","slug":"e4-ba-91-e6-9c-8d-e5-8a-a1-e5-99-a8-e7-9a-84-e9-85-8d-e7-bd-ae-e9-97-ae-e9-a2-98-ef-bc-88windows-ef-bc-89","updated":"2019-11-07T09:16:19.292Z","comments":true,"link":"","permalink":"/2019/07/07/e4-ba-91-e6-9c-8d-e5-8a-a1-e5-99-a8-e7-9a-84-e9-85-8d-e7-bd-ae-e9-97-ae-e9-a2-98-ef-bc-88windows-ef-bc-89/","excerpt":"建议先搞一个免费试用的玩一下，直接买个一年的可能兴趣扁扁-_- 华为云最近有一个七天免费试用，阿里云之前好像有搞过三个月几块钱，反正短期都挺便宜的。 搞来云服务器","categories":[{"name":"芝士就是力量！","slug":"芝士就是力量！","permalink":"/categories/芝士就是力量！/"}],"tags":[]},{"title":"【搬家一】--wordpress搬家","date":"2019-07-07T07:03:45.000Z","path":"2019/07/07/wordpress-e6-90-ac-e5-ae-b6/","text":"给我可怜的七天免费试用搬了个家。 1. 导出phpmyadmin里面的某个sql文件，（某个—&gt;就是里面有你wordpress相关内容的一个数据库） 2.进入wordpress后台，选择工具-&gt;导出（这步应该和第三步重复了某些内容，但是保险起见，都备份比较好） 3.把htdocs里面的文件打包，搞出来（比较方便，因为里面有你的主题或者插件什么的） 4.在导入的时候，安装插件，但是失败—&gt;在服务器里面安装，刷新几次(有个教程让改权限，我没得改) 5.IP问题！！！⭐ 咋还是原来的ip地址呢！！！在phpmyadmin里面（就是第一步你导出的那个sql文件），找到wp-options，改一下第一条记录 就是这个，点开改成你现在用的IP。 6.wordpress后台，点击仪表盘-&gt;设置，改一下wordpress地址，和站点地址 到此结束！鼓掌！ 划重点（但是应该都知道）：不用非得在服务器里面改这些，毕竟很卡，你可以在外面ip/wp-admin，也可以访问的 -_-","raw":"---\ntitle: 【搬家一】--wordpress搬家\nurl: 110.html\nid: 110\ncategories:\n  - 芝士就是力量！\ndate: 2019-07-07 15:03:45\n---\n\n给我可怜的七天免费试用搬了个家。\n\n1\\. 导出phpmyadmin里面的某个sql文件，（某个--->就是里面有你wordpress相关内容的一个数据库）\n\n2.进入wordpress后台，选择工具->导出（这步应该和第三步重复了某些内容，但是保险起见，都备份比较好）\n\n3.把htdocs里面的文件打包，搞出来（比较方便，因为里面有你的主题或者插件什么的）\n<!--more-->\n4.在导入的时候，安装插件，但是失败--->在服务器里面安装，刷新几次(有个教程让改权限，我没得改)\n\n5.IP问题！！！⭐ 咋还是原来的ip地址呢！！！在phpmyadmin里面（就是第一步你导出的那个sql文件），找到wp-options，改一下第一条记录\n\n![](http://l.yumud.com/image_wp.png)\n\n就是这个，点开改成你现在用的IP。\n\n6.wordpress后台，点击仪表盘->设置，改一下wordpress地址，和站点地址\n\n到此结束！鼓掌！\n\n划重点（但是应该都知道）：不用非得在服务器里面改这些，毕竟很卡，你可以在外面ip/wp-admin，也可以访问的 -_-","content":"<p>给我可怜的七天免费试用搬了个家。</p>\n<p>1. 导出phpmyadmin里面的某个sql文件，（某个—&gt;就是里面有你wordpress相关内容的一个数据库）</p>\n<p>2.进入wordpress后台，选择工具-&gt;导出（这步应该和第三步重复了某些内容，但是保险起见，都备份比较好）</p>\n<p>3.把htdocs里面的文件打包，搞出来（比较方便，因为里面有你的主题或者插件什么的）</p>\n<a id=\"more\"></a>\n<p>4.在导入的时候，安装插件，但是失败—&gt;在服务器里面安装，刷新几次(有个教程让改权限，我没得改)</p>\n<p>5.IP问题！！！⭐ 咋还是原来的ip地址呢！！！在phpmyadmin里面（就是第一步你导出的那个sql文件），找到wp-options，改一下第一条记录</p>\n<p><img src=\"http://l.yumud.com/image_wp.png\" alt></p>\n<p>就是这个，点开改成你现在用的IP。</p>\n<p>6.wordpress后台，点击仪表盘-&gt;设置，改一下wordpress地址，和站点地址</p>\n<p>到此结束！鼓掌！</p>\n<p>划重点（但是应该都知道）：不用非得在服务器里面改这些，毕竟很卡，你可以在外面ip/wp-admin，也可以访问的 -_-</p>\n","slug":"wordpress-e6-90-ac-e5-ae-b6","updated":"2019-11-07T09:16:47.096Z","comments":true,"link":"","permalink":"/2019/07/07/wordpress-e6-90-ac-e5-ae-b6/","excerpt":"给我可怜的七天免费试用搬了个家。 1. 导出phpmyadmin里面的某个sql文件，（某个—&gt;就是里面有你wordpress相关内容的一个数据库） 2.进入wordpress后台，选择工具-&gt;导出（这步应该和第三步重复了某些内容，但是保险起见，都备份比较好） 3.把htdocs里面的文件打包，搞出来（比较方便，因为里面有你的主题或者插件什么的）","categories":[{"name":"芝士就是力量！","slug":"芝士就是力量！","permalink":"/categories/芝士就是力量！/"}],"tags":[]},{"title":"微信小程序登录-静态页面","date":"2019-07-02T03:13:07.000Z","path":"2019/07/02/e5-be-ae-e4-bf-a1-e5-b0-8f-e7-a8-8b-e5-ba-8f-e7-99-bb-e5-bd-95-e9-9d-99-e6-80-81-e9-a1-b5-e9-9d-a2/","text":"初期上手小程序的时候做的一个小demo，可以初期作练习用简单的无后台登录注册 效果图 具体步骤在CSDN我写的一篇文章有https://blog.csdn.net/qq_36664799/article/details/88736849 里面有源码，需要其它内容的可以留言。","raw":"---\ntitle: 微信小程序登录-静态页面\nurl: 65.html\nid: 65\ncategories:\n  - 小程序\ndate: 2019-07-02 11:13:07\n---\n\n初期上手小程序的时候做的一个小demo，可以初期作练习用\n简单的无后台登录注册\n<!--more-->\n![](http://l.yumud.com/ac7379b183fa3f24c3e6aca4e24476b.png)\n\n效果图\n\n具体步骤在CSDN我写的一篇文章有[https://blog.csdn.net/qq_36664799/article/details/88736849](https://blog.csdn.net/qq_36664799/article/details/88736849)\n\n里面有源码，需要其它内容的可以留言。","content":"<p>初期上手小程序的时候做的一个小demo，可以初期作练习用<br>简单的无后台登录注册</p>\n<a id=\"more\"></a>\n<p><img src=\"http://l.yumud.com/ac7379b183fa3f24c3e6aca4e24476b.png\" alt></p>\n<p>效果图</p>\n<p>具体步骤在CSDN我写的一篇文章有<a href=\"https://blog.csdn.net/qq_36664799/article/details/88736849\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_36664799/article/details/88736849</a></p>\n<p>里面有源码，需要其它内容的可以留言。</p>\n","slug":"e5-be-ae-e4-bf-a1-e5-b0-8f-e7-a8-8b-e5-ba-8f-e7-99-bb-e5-bd-95-e9-9d-99-e6-80-81-e9-a1-b5-e9-9d-a2","updated":"2019-11-08T08:03:38.277Z","comments":true,"link":"","permalink":"/2019/07/02/e5-be-ae-e4-bf-a1-e5-b0-8f-e7-a8-8b-e5-ba-8f-e7-99-bb-e5-bd-95-e9-9d-99-e6-80-81-e9-a1-b5-e9-9d-a2/","excerpt":"初期上手小程序的时候做的一个小demo，可以初期作练习用简单的无后台登录注册","categories":[{"name":"小程序","slug":"小程序","permalink":"/categories/小程序/"}],"tags":[]},{"title":"关于这个bug集","date":"2019-07-02T00:50:20.000Z","path":"2019/07/02/e7-9e-a7-e4-b8-80-e7-9e-a7-e7-9c-8b-e4-b8-80-e7-9c-8b-e8-b5-b0-e8-bf-87-e8-b7-af-e8-bf-87-e4-b8-8d-e8-a6-81-e9-94-99-e8-bf-87-e4-ba-86/","text":"关于这个博客，博客还是那个博客，域名还是那个域名，只不过搬了好几次家… ———————-分类介绍———————- 芝士就是力量==&gt;里面主要是遇到的各种bug，小芝士，还有建站，云服务器+wordpress，github+hexo都有哦 Demo==&gt;小游戏，小程序，管理系统等等等，做的demo都会存上来 A coin a day==&gt;里面是刷的题，磕代码！ 其他文件夹如名所示。 想要其他笔记的可以发邮箱，或者评论哒，有道云还存了一些，没得感情一点点挪了hh ————————点子———————— 来做一个真正不错的小程序怎么样，初期构思是一个校内互助小程序，已经在写策划，准备素材了 [联系邮箱:1092876640@qq.com]","raw":"---\ntitle: 关于这个bug集\nurl: 47.html\nid: 47\ncategories:\n  - Demo\ndate: 2019-07-02 08:50:20\ntop: 99\n---\n关于这个博客，博客还是那个博客，域名还是那个域名，只不过搬了好几次家...\n<!--more-->\n----------------------*分类介绍*----------------------\n\n芝士就是力量==>里面主要是遇到的各种bug，小芝士，还有建站，**云服务器+wordpress**，**github+hexo**都有哦\n\nDemo==>小游戏，小程序，管理系统等等等，做的demo都会存上来\n\nA coin a day==>里面是刷的题，磕代码！\n\n其他文件夹如名所示。\n\n想要其他笔记的可以发邮箱，或者评论哒，有道云还存了一些，没得感情一点点挪了hh\n\n------------------------*点子*------------------------\n\n来做一个真正不错的小程序怎么样，初期构思是一个校内互助小程序，已经在写策划，准备素材了 \\[联系邮箱:1092876640@qq.com\\]","content":"<p>关于这个博客，博客还是那个博客，域名还是那个域名，只不过搬了好几次家…</p>\n<a id=\"more\"></a>\n<p>———————-<em>分类介绍</em>———————-</p>\n<p>芝士就是力量==&gt;里面主要是遇到的各种bug，小芝士，还有建站，<strong>云服务器+wordpress</strong>，<strong>github+hexo</strong>都有哦</p>\n<p>Demo==&gt;小游戏，小程序，管理系统等等等，做的demo都会存上来</p>\n<p>A coin a day==&gt;里面是刷的题，磕代码！</p>\n<p>其他文件夹如名所示。</p>\n<p>想要其他笔记的可以发邮箱，或者评论哒，有道云还存了一些，没得感情一点点挪了hh</p>\n<p>————————<em>点子</em>————————</p>\n<p>来做一个真正不错的小程序怎么样，初期构思是一个校内互助小程序，已经在写策划，准备素材了 [联系邮箱:<a href=\"mailto:1092876640@qq.com\" target=\"_blank\" rel=\"noopener\">1092876640@qq.com</a>]</p>\n","slug":"e7-9e-a7-e4-b8-80-e7-9e-a7-e7-9c-8b-e4-b8-80-e7-9c-8b-e8-b5-b0-e8-bf-87-e8-b7-af-e8-bf-87-e4-b8-8d-e8-a6-81-e9-94-99-e8-bf-87-e4-ba-86","updated":"2019-11-08T08:03:57.917Z","comments":true,"link":"","permalink":"/2019/07/02/e7-9e-a7-e4-b8-80-e7-9e-a7-e7-9c-8b-e4-b8-80-e7-9c-8b-e8-b5-b0-e8-bf-87-e8-b7-af-e8-bf-87-e4-b8-8d-e8-a6-81-e9-94-99-e8-bf-87-e4-ba-86/","excerpt":"关于这个博客，博客还是那个博客，域名还是那个域名，只不过搬了好几次家…","categories":[{"name":"Demo","slug":"Demo","permalink":"/categories/Demo/"}],"tags":[]},{"title":"奶茶店APP --单页面 (vue)","date":"2019-06-30T14:49:48.000Z","path":"2019/06/30/e4-bb-bf-e9-a5-bf-e4-ba-86-e4-b9-88-e5-8d-95-e9-a1-b5-e9-9d-a2vue/","text":"使用vue2+vue-router2+vue-cli2+vue-resource+stylus+webpack 展示地址戳一下 --------------------------------------------------------------------------------------------------------------------- 需要注意的几个点(我做的时候出现的错误+重要的点): 1.有些教程给的是vue1.0的一些写法，然后vue2.0就各种报错。 2.初始化vue项目的时候打开了eslint，注意空格 3.better-scroll插件设置click:true，否则移动端滑动没得效果 4.设备上的像素=样式像素*设备像素比 5.背景模糊filter:blur(10px) 6.transition过渡效果(添加的动态效果) fade-enter fade-enter-active fade-leave fade-leave-active具体-&gt;https://cn.vuejs.org/v2/api/#transition 7.页面切换时，避免重新渲染 keep-alive &lt;keep-alive&gt; &lt;router-view:seller=&quot;seller&quot;&gt;&lt;/router-view&gt; &lt;/keep- alive&gt;8.vue1.0页面跳转用，so你用来进行导航的编写 9.安装vue-resource，通过this.$http.get发送get请求，then()获取数据，具体看这个https://blog.csdn.net/qq_36664799/article/details/93740511 踩坑之后写的一篇博客，很多种方法获取数据 10.注意引用组件的时候，写对地址呀亲 建议结合视频（并百度）进行练习，实话说，不建议用这个做练习，这个应该正式的一点点做，这么多bug，视频前期还是1.0，很坑。 教程biu我","raw":"---\ntitle: 奶茶店APP --单页面 (vue)\nurl: 45.html\nid: 45\ncategories:\n  - Demo\ndate: 2019-06-30 22:49:48\n---\n\n使用vue2+vue-router2+vue-cli2+vue-resource+stylus+webpack\n\n展示地址[戳一下](http://thesecondlight.github.io/whole/eleme)\n<!--more-->\n\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\n\n需要注意的几个点(我做的时候出现的错误+重要的点):\n\n**1.**有些教程给的是vue1.0的一些写法，然后vue2.0就各种报错。\n\n**2.**初始化vue项目的时候打开了eslint，注意空格\n\n**3.**better-scroll插件设置click:true，否则移动端滑动没得效果\n\n**4.**设备上的像素=样式像素*设备像素比\n\n**5.**背景模糊filter:blur(10px)\n\n**6.**transition过渡效果(添加的动态效果)\n\n               fade-enter\n\n               fade-enter-active\n\n               fade-leave\n\n               fade-leave-active\n\n具体->[https://cn.vuejs.org/v2/api/#transition](https://cn.vuejs.org/v2/api/#transition)\n\n**7.**页面切换时，避免重新渲染  keep-alive\n\n           <keep-alive>  <router-view:seller=\"seller\"></router-view>  </keep-     alive>\n\n**8.**vue1.0页面跳转用<a>，so你用<router-link to>来进行导航的编写\n\n**9.**安装vue-resource，通过this.$http.get发送get请求，then()获取数据，具体看这个[https://blog.csdn.net/qq_36664799/article/details/93740511](https://blog.csdn.net/qq_36664799/article/details/93740511) 踩坑之后写的一篇博客，很多种方法获取数据\n\n10.注意引用组件的时候，写对地址呀亲\n\n建议结合视频（并百度）进行练习，实话说，不建议用这个做练习，这个应该正式的一点点做，这么多bug，视频前期还是1.0，很坑。\n\n教程biu我","content":"<p>使用vue2+vue-router2+vue-cli2+vue-resource+stylus+webpack</p>\n<p>展示地址<a href=\"http://thesecondlight.github.io/whole/eleme\" target=\"_blank\" rel=\"noopener\">戳一下</a></p>\n<a id=\"more\"></a>\n<p>---------------------------------------------------------------------------------------------------------------------</p>\n<p>需要注意的几个点(我做的时候出现的错误+重要的点):</p>\n<p><strong>1.</strong>有些教程给的是vue1.0的一些写法，然后vue2.0就各种报错。</p>\n<p><strong>2.</strong>初始化vue项目的时候打开了eslint，注意空格</p>\n<p><strong>3.</strong>better-scroll插件设置click:true，否则移动端滑动没得效果</p>\n<p><strong>4.</strong>设备上的像素=样式像素*设备像素比</p>\n<p><strong>5.</strong>背景模糊filter:blur(10px)</p>\n<p><strong>6.</strong>transition过渡效果(添加的动态效果)</p>\n<pre><code>fade-enter\n\nfade-enter-active\n\nfade-leave\n\nfade-leave-active</code></pre><p>具体-&gt;<a href=\"https://cn.vuejs.org/v2/api/#transition\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/api/#transition</a></p>\n<p><strong>7.</strong>页面切换时，避免重新渲染  keep-alive</p>\n<pre><code>&lt;keep-alive&gt;  &lt;router-view:seller=&quot;seller&quot;&gt;&lt;/router-view&gt;  &lt;/keep-     alive&gt;</code></pre><p><strong>8.</strong>vue1.0页面跳转用<a>，so你用<router-link to>来进行导航的编写</router-link></a></p>\n<p><strong>9.</strong>安装vue-resource，通过this.$http.get发送get请求，then()获取数据，具体看这个<a href=\"https://blog.csdn.net/qq_36664799/article/details/93740511\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_36664799/article/details/93740511</a> 踩坑之后写的一篇博客，很多种方法获取数据</p>\n<p>10.注意引用组件的时候，写对地址呀亲</p>\n<p>建议结合视频（并百度）进行练习，实话说，不建议用这个做练习，这个应该正式的一点点做，这么多bug，视频前期还是1.0，很坑。</p>\n<p>教程biu我</p>\n","slug":"e4-bb-bf-e9-a5-bf-e4-ba-86-e4-b9-88-e5-8d-95-e9-a1-b5-e9-9d-a2vue","updated":"2019-11-07T09:16:22.240Z","comments":true,"link":"","permalink":"/2019/06/30/e4-bb-bf-e9-a5-bf-e4-ba-86-e4-b9-88-e5-8d-95-e9-a1-b5-e9-9d-a2vue/","excerpt":"使用vue2+vue-router2+vue-cli2+vue-resource+stylus+webpack 展示地址戳一下","categories":[{"name":"Demo","slug":"Demo","permalink":"/categories/Demo/"}],"tags":[]},{"title":"图书管理系统(php实现)","date":"2019-06-30T14:30:17.000Z","path":"2019/06/30/e5-9b-be-e4-b9-a6-e7-ae-a1-e7-90-86-e7-b3-bb-e7-bb-9fphp-e5-ae-9e-e7-8e-b0/","text":"大二时学习php，做了一个简单的使用php实现对图书的增删改查。 展示地址: http://yumud.com/vfp展示地址也展示不了多久了，服务器要过期了，天天处在要过期的边缘，贴一下github这个项目的地址，可以自己下载看一下哦https://github.com/thesecondlight/php_Library-Management-System下载地址: https://github.com/thesecondlight/php_Library-Management-System.git","raw":"---\ntitle: 图书管理系统(php实现)\nurl: 39.html\nid: 39\ncategories:\n  - Demo\ndate: 2019-06-30 22:30:17\n---\n\n大二时学习php，做了一个简单的使用php实现对图书的增删改查。\n\n展示地址: [http://yumud.com/vfp](http://yumud.com/vfp)\n展示地址也展示不了多久了，服务器要过期了，天天处在要过期的边缘，贴一下github这个项目的地址，可以自己下载看一下哦\nhttps://github.com/thesecondlight/php_Library-Management-System\n下载地址: https://github.com/thesecondlight/php_Library-Management-System.git","content":"<p>大二时学习php，做了一个简单的使用php实现对图书的增删改查。</p>\n<p>展示地址: <a href=\"http://yumud.com/vfp\" target=\"_blank\" rel=\"noopener\">http://yumud.com/vfp</a><br>展示地址也展示不了多久了，服务器要过期了，天天处在要过期的边缘，贴一下github这个项目的地址，可以自己下载看一下哦<br><a href=\"https://github.com/thesecondlight/php_Library-Management-System\" target=\"_blank\" rel=\"noopener\">https://github.com/thesecondlight/php_Library-Management-System</a><br>下载地址: <a href=\"https://github.com/thesecondlight/php_Library-Management-System.git\" target=\"_blank\" rel=\"noopener\">https://github.com/thesecondlight/php_Library-Management-System.git</a></p>\n","slug":"e5-9b-be-e4-b9-a6-e7-ae-a1-e7-90-86-e7-b3-bb-e7-bb-9fphp-e5-ae-9e-e7-8e-b0","updated":"2019-11-07T09:16:24.983Z","comments":true,"link":"","permalink":"/2019/06/30/e5-9b-be-e4-b9-a6-e7-ae-a1-e7-90-86-e7-b3-bb-e7-bb-9fphp-e5-ae-9e-e7-8e-b0/","excerpt":"","categories":[{"name":"Demo","slug":"Demo","permalink":"/categories/Demo/"}],"tags":[]},{"title":"vue调用接口","date":"2019-06-30T13:51:20.000Z","path":"2019/06/30/vue-e8-b0-83-e7-94-a8-e6-8e-a5-e5-8f-a3/","text":"这是我在csdn写的一篇关于vue调用接口的链接(贴图太麻烦了，直接转过去吧)，真的可以用，但是你要注意认真写，不要落这个落那个，检查代码中使用的API是否还可以用，仔细看。 展示地址:https://blog.csdn.net/qq_36664799/article/details/93740511","raw":"---\ntitle: vue调用接口\nurl: 28.html\nid: 28\ncategories:\n  - 芝士就是力量！\ndate: 2019-06-30 21:51:20\n---\n\n这是我在csdn写的一篇关于vue调用接口的链接(贴图太麻烦了，直接转过去吧)，真的可以用，但是你要注意认真写，不要落这个落那个，检查代码中使用的API是否还可以用，仔细看。\n\n展示地址:[https://blog.csdn.net/qq_36664799/article/details/93740511](https://blog.csdn.net/qq_36664799/article/details/93740511)","content":"<p>这是我在csdn写的一篇关于vue调用接口的链接(贴图太麻烦了，直接转过去吧)，真的可以用，但是你要注意认真写，不要落这个落那个，检查代码中使用的API是否还可以用，仔细看。</p>\n<p>展示地址:<a href=\"https://blog.csdn.net/qq_36664799/article/details/93740511\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_36664799/article/details/93740511</a></p>\n","slug":"vue-e8-b0-83-e7-94-a8-e6-8e-a5-e5-8f-a3","updated":"2019-11-07T09:16:56.420Z","comments":true,"link":"","permalink":"/2019/06/30/vue-e8-b0-83-e7-94-a8-e6-8e-a5-e5-8f-a3/","excerpt":"","categories":[{"name":"芝士就是力量！","slug":"芝士就是力量！","permalink":"/categories/芝士就是力量！/"}],"tags":[]},{"title":"微信小程序后台传值wx.request，出现undefined","date":"2019-06-30T13:46:00.000Z","path":"2019/06/30/e5-be-ae-e4-bf-a1-e5-b0-8f-e7-a8-8b-e5-ba-8f-e5-90-8e-e5-8f-b0-e4-bc-a0-e5-80-bcwx-request-ef-bc-8c-e5-87-ba-e7-8e-b0undefined/","text":"用数据集记录中的字段进行查询where({字段:this.data.前台输入绑定的value}) 注意： res.data[0].name，不然会输出undefined； 还有一种可能是： 后台使用string类型，前端输出undefined，可使用JSON.stringify(res.data[0].age）进行转换","raw":"---\ntitle: 微信小程序后台传值wx.request，出现undefined\nurl: 25.html\nid: 25\ncategories:\n  - 小程序\ndate: 2019-06-30 21:46:00\n---\n\n用数据集记录中的字段进行查询where({字段:this.data.前台输入绑定的value}) 注意：\n\n![](http://l.yumud.com/20190408184534200.png)\n\nres.data**\\[0\\]**.name，不然会输出undefined；\n\n还有一种可能是： 后台使用string类型，前端输出undefined，可使用JSON.stringify(res.data\\[0\\].age）进行转换","content":"<p>用数据集记录中的字段进行查询where({字段:this.data.前台输入绑定的value}) 注意：</p>\n<p><img src=\"http://l.yumud.com/20190408184534200.png\" alt></p>\n<p>res.data<strong>[0]</strong>.name，不然会输出undefined；</p>\n<p>还有一种可能是： 后台使用string类型，前端输出undefined，可使用JSON.stringify(res.data[0].age）进行转换</p>\n","slug":"e5-be-ae-e4-bf-a1-e5-b0-8f-e7-a8-8b-e5-ba-8f-e5-90-8e-e5-8f-b0-e4-bc-a0-e5-80-bcwx-request-ef-bc-8c-e5-87-ba-e7-8e-b0undefined","updated":"2019-11-07T09:16:41.364Z","comments":true,"link":"","permalink":"/2019/06/30/e5-be-ae-e4-bf-a1-e5-b0-8f-e7-a8-8b-e5-ba-8f-e5-90-8e-e5-8f-b0-e4-bc-a0-e5-80-bcwx-request-ef-bc-8c-e5-87-ba-e7-8e-b0undefined/","excerpt":"","categories":[{"name":"小程序","slug":"小程序","permalink":"/categories/小程序/"}],"tags":[]},{"title":"你看这个bug它又大又圆！","date":"2019-06-30T12:38:31.000Z","path":"2019/06/30/hello-world/","text":"记录各种各样的bug~ 请关注一下这个可爱但是鸡肋的小程序吧 虽然本意是做一个热量查询,饮食调节的小程序,但是功能不怎么完善，不过当成随手记挺方便的,后续会不断完善，公众号也会好好做起来，争取一周发一次健康养生小文章吧(公众号也叫”CC卡路里”)。 这是我的csdn地址https://blog.csdn.net/qq_36664799，里面有各种bug和吐槽~","raw":"---\ntitle: 你看这个bug它又大又圆！\nurl: 1.html\nid: 1\ncategories:\n  - 小程序\ndate: 2019-06-30 20:38:31\n---\n\n记录各种各样的bug~\n\n请关注一下这个可爱但是鸡肋的小程序吧\n\n![](http://l.yumud.com/gh_8490c442bd64_258-1-1.jpg)\n\n虽然本意是做一个热量查询,饮食调节的小程序,但是功能不怎么完善，不过当成随手记挺方便的,后续会不断完善，公众号也会好好做起来，争取一周发一次健康养生小文章吧(公众号也叫\"CC卡路里\")。\n\n这是我的csdn地址[https://blog.csdn.net/qq_36664799](https://blog.csdn.net/qq_36664799)，里面有各种bug和吐槽~","content":"<p>记录各种各样的bug~</p>\n<p>请关注一下这个可爱但是鸡肋的小程序吧</p>\n<p><img src=\"http://l.yumud.com/gh_8490c442bd64_258-1-1.jpg\" alt></p>\n<p>虽然本意是做一个热量查询,饮食调节的小程序,但是功能不怎么完善，不过当成随手记挺方便的,后续会不断完善，公众号也会好好做起来，争取一周发一次健康养生小文章吧(公众号也叫”CC卡路里”)。</p>\n<p>这是我的csdn地址<a href=\"https://blog.csdn.net/qq_36664799\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_36664799</a>，里面有各种bug和吐槽~</p>\n","slug":"hello-world","updated":"2019-11-08T08:04:39.260Z","comments":true,"link":"","permalink":"/2019/06/30/hello-world/","excerpt":"","categories":[{"name":"小程序","slug":"小程序","permalink":"/categories/小程序/"}],"tags":[]}]}