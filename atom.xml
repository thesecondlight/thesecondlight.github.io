<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yumuのblog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-11-15T02:01:41.956Z</updated>
  <id>/</id>
  
  <author>
    <name>yumuの笔记</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>学习记录</title>
    <link href="/2019/10/21/record/"/>
    <id>/2019/10/21/record/</id>
    <published>2019-10-21T03:11:18.000Z</published>
    <updated>2019-11-15T02:01:41.956Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>点击页面左下方，在页面右边显示文章目录。</p><h4 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a><img src="http://l.yumud.com/note_.png" alt>文件权限</h4><p>rwx 1 2 4</p><p>d rwx r_x r_x</p><p>d文件目录</p><p>rwx文件所有者</p><p>r_x文件所属组</p><p>r_x其他人</p><p>chmod更改权限 chomd 755 idnex.txt</p><h4 id="sql变量"><a href="#sql变量" class="headerlink" title="sql变量"></a><img src="http://l.yumud.com/note_.png" alt>sql变量</h4><h5 id="系统变量-全局变量-global-会话变量-session"><a href="#系统变量-全局变量-global-会话变量-session" class="headerlink" title="系统变量{全局变量(global) 会话变量(session)}"></a>系统变量{全局变量(global) 会话变量(session)}</h5><h5 id="自定义变量-局部变量-用户-赋值-变量"><a href="#自定义变量-局部变量-用户-赋值-变量" class="headerlink" title="自定义变量{局部变量 用户(赋值)变量}"></a>自定义变量{局部变量 用户(赋值)变量}</h5><p><u><em>全局级别加global，会话界别加session，不加默认session</em></u></p><p>show variables;优先显示会话级变量的值，如果不存在，则显示全局级变量的值</p><p>查看所有的系统变量 :show global variables;</p><p>查看满足条件的部分系统变量：show  variables like ‘%char%’</p><p>查看指定的某个系统变量值：select 系统变量名</p><p>为系统变量赋值 eg: set autocommit=0;</p><p>用户变量 赋值 set @sum=10; set @sum:=10;</p><p>局部变量 声明 declare sum int(20); declare sum int default 10;</p><p>​                 赋值 set sum=10; select @sum:=10;</p><h4 id="sql函数"><a href="#sql函数" class="headerlink" title="sql函数"></a><img src="http://l.yumud.com/note_.png" alt>sql函数</h4><p>avg()平均值</p><p>count()返回行数</p><p>MAX()</p><p>MIN()</p><p>SUM()</p><!--first()返回第一个记录的值--> select site from t2019  order by site asc limit 1;<!--last()返回最后一个记录的值-->select site from t2019  order by site desc limit 1;<p>HAVING 字句  having sum(money)&gt;1000;</p><p>UPPER()字段值转大写显示</p><p>LOWER()字段值转小写显示</p><p>MID()  select MID(remarks,1,3) from t2019; remarks字段的第一位到第三位</p><p>LEN() 字段值长度</p><p>ROUND() 字段值舍入为指定的小数位数  select ROUND(1.255); =&gt;1</p><p>​                                                                      select ROUND(money,3) from t2019;=&gt;500.12  500.120</p><p>NOW()当前系统日期和时间</p><p>FORMAT()格式化字段显示 eg：select data_format(now(),’%Y-%m’) from t2019;</p><p> sql快速参考xi：<a href="https://www.runoob.com/sql/sql-quickref.html" target="_blank" rel="noopener">https://www.runoob.com/sql/sql-quickref.html</a> </p><h4 id><a href="#" class="headerlink" title></a><img src="http://l.yumud.com/note_.png" alt></h4><p>《正则表达式30分钟入门》 <a href="https://deerchao.cn/tutorials/regex/regex.htm" target="_blank" rel="noopener">https://deerchao.cn/tutorials/regex/regex.htm</a> </p><p>正向预查(?=)满足<strong>前面</strong>的表达式  eg: /\b[/w]+(?=ing\b)/g/匹配全局带ing的单词，但是不要ing</p><p>反向预查(?&lt;=)满足<strong>后面</strong>的表达式 eg:/(?&lt;=index\.ts)/ 匹配以.ts结尾 ,左边是index</p><p>\g 全局匹配</p><p>. 匹配除换行符外的任意字符</p><p>\w匹配字母，数字，下划线     \W 匹配非字母 数字 下划线 汉字的字符</p><p>\d匹配数字                                 \D 匹配非数字的字符</p><p>\b匹配单词的边界                     \B 匹配不是单词开头或结束的位置</p><p>^匹配字符串的开始                   [^x] 匹配除了x 以外的任意字符    \S 匹配任意不是空白符的字符</p><p>$ 匹配字符串的结束</p><p>\ 取消字符的特殊意义</p><p>+重复一次或多次</p><p>*重复0次或多次</p><p>？重复0次或1次</p><p>{n}重复n次</p><p>{n,}重复n次或多次</p><p>{n,m}重复n到m次</p><p>| 或</p><p>eg:</p><p>\ba\w<em>\b   \b开始  a，任意(0或更多)数量的字母或数字(\w\</em>) \b结束</p><p>\d+ 匹配一个或更多连续的数字(+一次或更多，*0次或更多)</p><p>\b\w{6}\b 匹配刚好6个字符的单词</p><p>^\d{5,12}}$ 匹配5-12位的数字 </p><p>\(?0\d{2}[) -]?\d{8}  \转义字符，（左括号能出现0/1次,跟一个0，两个数字，右括号)空格-出现0/1次，八位数字</p><p><strong>贪婪与懒惰</strong></p><p>以下均为“尽可能少重复”</p><p>*？     重复任意次</p><p>+？     重复一次或更多次</p><p>？？   重复0次或1次</p><p>{n,m}？重复n-m次</p><p>{n,}?      重复n次以上</p><p>eg： a.*b  匹配最长的以a开始，b结束的字符串</p><p>​         a.*?b 匹配最短的以a开始，b结束的字符串</p><p>嘻嘻：\a 报警字符(打印时，电脑嘀一声)</p><h4 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a><img src="http://l.yumud.com/note_.png" alt>尾调用优化</h4><p>尾调用：在函数的最后一步是直接返回调用另一个函数</p><p>优化：在函数A的内部调用函数B  在A的调用记录上方，会形成一个B的调用记录，等到B的运行结束，将结果返回A，B的调用记录消失。(确保函数的最后一步只调用自身)</p><p>所有的调用记录形调用栈</p><p>eg:</p><p>复杂度O(n)</p><p>function f(){</p><p>​    if(n===1) return 1;</p><p>​    return n*f(n-1);</p><p>}</p><p>复杂度O(1)</p><p>function f(n,total=1){</p><p>​    if(n==1) return total; </p><p>​    return f(n-1,n*total)</p><p>}</p><h4 id="mocha覆盖率"><a href="#mocha覆盖率" class="headerlink" title="mocha覆盖率"></a><img src="http://l.yumud.com/note_.png" alt>mocha覆盖率</h4><p>%stmts %Branch % Funcs %Lines</p><p>语句覆盖率 分之覆盖率 函数覆盖率 行覆盖率</p><p>（最弱覆盖）                                      （最全）</p><h4 id="递归和迭代的转化-区别"><a href="#递归和迭代的转化-区别" class="headerlink" title="递归和迭代的转化 区别"></a><img src="http://l.yumud.com/note_.png" alt>递归和迭代的转化 区别</h4><p><img src="http://l.yumud.com/1571377276911.png" alt="1571377276911"></p><!--(借用了别人借用的图)--><h4 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a><img src="http://l.yumud.com/note_.png" alt>版本号</h4><p>主版本号  次版本号  修订号  先行版本号  版本编译元数据(不在优先级比较的列表中)</p><p>​      X               Y               Z</p><p>X 当API的兼容性变化时，递增</p><p>Y 增加功能，不影响API的兼容性，递增</p><p>Z Bug修复，不影响API兼容性，递增</p><p>^主版本号不变  ^1.2.3==&gt;1.2.3&lt;=版本号&lt;2.0.0     1.x.x</p><p>~主次不变         ~1.2.3==&gt;1.2.3&lt;=版本号&lt;1.3.0      1.2.x</p><h4 id="SQL自定义函数"><a href="#SQL自定义函数" class="headerlink" title="SQL自定义函数"></a><img src="http://l.yumud.com/note_.png" alt>SQL自定义函数</h4><p>delimiter //</p><p>create function countSum(id int) return int(11)</p><p>​    DETERMINISTIC</p><p>begin</p><p>​    declare temp int;</p><p>​    select count(*) into temp from t2019 where site=id;</p><p>​    return temp; </p><p>end</p><p>//</p><p>**deterministic</p><h4 id="临时表-派生表"><a href="#临时表-派生表" class="headerlink" title="临时表 派生表"></a><img src="http://l.yumud.com/note_.png" alt>临时表 派生表</h4><h5 id="临时表"><a href="#临时表" class="headerlink" title="临时表"></a>临时表</h5><p>内部临时表（MySQL自动创建） 外部临时表（create temporary table）</p><h5 id="派生表"><a href="#派生表" class="headerlink" title="派生表"></a>派生表</h5><p>查询结果生成的表 ，类似于临时表</p><p>select * from (select * from others) temp;   temp即派生表</p><h4 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a><img src="http://l.yumud.com/note_.png" alt>事件循环</h4><h4 id="事务-乐观锁-悲观锁"><a href="#事务-乐观锁-悲观锁" class="headerlink" title="事务 乐观锁 悲观锁"></a><img src="http://l.yumud.com/note_.png" alt>事务 乐观锁 悲观锁</h4><h5 id="①事务"><a href="#①事务" class="headerlink" title="①事务"></a>①事务</h5><p>START TRANSACTION;</p><p>COMMIT;/ROLLBACK;</p><h5 id="②悲观锁-乐观锁"><a href="#②悲观锁-乐观锁" class="headerlink" title="②悲观锁 乐观锁"></a>②悲观锁 乐观锁</h5><p>乐观锁 update tb set version=version+1 where version=version    在写操作频繁的场景下会不断发生重试，也会影响吞吐量</p><p>悲观锁 set autocommit=0 (不允许自动提交)</p><p>​    用for update给每行数据加排他锁 (使用条件:InnoDB，<strong>BEGIN/COMMIT</strong>)</p><p>​    1)根据主键进行查询，查询到数据，主键字段产生行锁 (只是查询的那个字段的数据产生锁，查询这个字段的其他数据不会产生锁)</p><p>​    2)没有查询到数据，不产生锁</p><p>​    3)根据主键，非主键含索引进行查询，查询到数据，主键字段产生行锁，非主键字段产生表锁（非主键字段的所有数据都会有锁）</p><p>​    4)….</p><p>sequelize加排它锁</p><p>await Accounts.findOne({<br>    where: { name: ‘HelKyle’ },<br>    lock: Sequelize.Transaction.LOCK.UPDATE<br>});</p><h4 id="tcp-ip"><a href="#tcp-ip" class="headerlink" title="tcp/ip"></a><img src="http://l.yumud.com/note_.png" alt>tcp/ip</h4><p> <a href="https://blog.csdn.net/u012371712/article/details/80795297" target="_blank" rel="noopener">https://blog.csdn.net/u012371712/article/details/80795297</a> </p><p><img src="http://l.yumud.com/1571379820232.png" alt="1571379820232"></p><p>五层：应用层  传输层 网络层  连接层 物理层</p><h4 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a><img src="http://l.yumud.com/note_.png" alt>请求方式</h4><p>get put post delete</p><p>post时，填写参数  ，返回参数ctx.request.query</p><h4 id="content-type"><a href="#content-type" class="headerlink" title="content-type"></a><img src="http://l.yumud.com/note_.png" alt>content-type</h4><p>application/json  消息主体是 序列化后的JSON字符串</p><p>application/x-www-form-urlencoded  数据被编码为名称/值对。这是标准的编码格式</p><p>multipart/form-data   需要在表单中进行文件上传时，使用。</p><p>text/plain  数据以纯文本形式(text/json/xml/html)进行编码，不含任何控件或格式字符</p><h4 id="string-split-arr-join"><a href="#string-split-arr-join" class="headerlink" title="string.split arr.join"></a><img src="http://l.yumud.com/note_.png" alt>string.split arr.join</h4><p>string.split(“*”) 字符串转数组 以星号作分割依据</p><p>arr.join(“*”) 数组转字符串  用星号作连接</p><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a><img src="http://l.yumud.com/note_.png" alt>索引</h4><p>索引</p><p>唯一索引：查到符合条件的继续查找下一项，如果下一项不符合再返回</p><p>普通索引：查到符合条件的项后直接返回</p><p>创建索引</p><p>create index sy1 on t2019(site);</p><p>添加索引</p><p>alter table t2019 add index sy2(money);</p><p>创建表时直接指定</p><p>create table t2019(</p><p>​    site int not null,</p><p>​    INDEX [sy3] (site]</p><p>)</p><p>删除索引</p><p>drop index [sy1] on t2019;</p><p>唯一索引</p><p>create unique index sy4 on t2019 (site)</p><h4 id="sequelize事务，加锁"><a href="#sequelize事务，加锁" class="headerlink" title="sequelize事务，加锁"></a><img src="http://l.yumud.com/note_.png" alt>sequelize事务，加锁</h4><p>t1 //is a transaction</p><p>Model.findAll({</p><pre><code>where:...</code></pre><p>},{</p><p>​    transaction: t1,  //**注意</p><p>​    lock: t1.LOCK.UPDATE,   //**注意</p><p>​    lock: t1.LOCK.SHARE</p><p>})</p><h4 id="与-或-异或-左移-右移-按二进制位进行运算"><a href="#与-或-异或-左移-右移-按二进制位进行运算" class="headerlink" title="与 或 异或  左移 右移(按二进制位进行运算)"></a><img src="http://l.yumud.com/note_.png" alt>与 或 异或  左移 右移(按二进制位进行运算)</h4><p>与 &amp;  同1为1，否则为0</p><p>或 |  有1则1</p><p>异或 ^  相同为1，不同为0</p><p>左移 &lt;&lt;  左移，移出位丢弃，右边的空位补0</p><p>右移 &gt;&gt;  右移，移出位丢弃，左边的空位补0</p><h4 id="node-api"><a href="#node-api" class="headerlink" title="node api"></a><img src="http://l.yumud.com/note_.png" alt>node api</h4><p>path.normalize(path)规范化path</p><p>path.join([…paths])使用平台特定的分隔符把全部给定的 path 片段连接到一起，并规范</p><p>path.resolve([…paths])把路径解析为一个绝对路径</p><h4 id="队列-BFS-DFS"><a href="#队列-BFS-DFS" class="headerlink" title="队列 BFS DFS"></a><img src="http://l.yumud.com/note_.png" alt>队列 BFS DFS</h4><p>队列 FIFO</p><p>BFS应用场景：遍历和找出最短路径</p><p>栈 LIFO</p><p> <a href="https://leetcode-cn.com/explore/learn/card/queue-stack/218/stack-last-in-first-out-data-structure/875/" target="_blank" rel="noopener">https://leetcode-cn.com/explore/learn/card/queue-stack/218/stack-last-in-first-out-data-structure/875/</a> </p><h4 id="Number-MAX-SAFE-INTEGER-Number-MAX-VALUE"><a href="#Number-MAX-SAFE-INTEGER-Number-MAX-VALUE" class="headerlink" title="Number.MAX_SAFE_INTEGER      Number.MAX_VALUE"></a><img src="http://l.yumud.com/note_.png" alt>Number.MAX_SAFE_INTEGER      Number.MAX_VALUE</h4><p>Number.MAX_SAFE_INTEGER   9007199254740991 小于该值能精确表示</p><p>Number.MAX_VALUE   1.7976931348623157e+308  大于该值得到的是Infinity，介于Infinity和安全值之间的无法精确表示</p><h4 id="mocha"><a href="#mocha" class="headerlink" title="mocha"></a><img src="http://l.yumud.com/note_.png" alt>mocha</h4><h5 id="主要api"><a href="#主要api" class="headerlink" title="主要api"></a>主要api</h5><p>describe(name,fn) 定义一组测试</p><p>it(name,fn)              定义一项测试</p><h5 id="第三方断言库"><a href="#第三方断言库" class="headerlink" title="第三方断言库"></a>第三方断言库</h5><p>assert，chai</p><p>const assert = require(‘assert’)</p><h5 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h5><p>(在用例集/用例函数开始执行之前/结束执行之后，进行一些环境准备或者环境清理的工作)</p><p>before()  在本区块 <strong>所有测试用例</strong> 开始之前执行</p><p>after()     在本区块 <strong>所有测试用例</strong> 结束之后（所有）执行</p><p>beforeEach()    在本区块 <strong>每个测试用例</strong> 开始之前执行</p><p>afterEach()        在本区块 <strong>每个测试用例</strong> 结束之后执行</p><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'top'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"> before(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'top before'</span>)</span><br><span class="line"></span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> after(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'top after'</span>)</span><br><span class="line"></span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> beforeEach(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'top beforeEach'</span>)</span><br><span class="line"></span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> afterEach(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'top afterEach'</span>)</span><br><span class="line"></span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> it(<span class="string">'test1'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'top test1'</span>)</span><br><span class="line"></span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> describe(<span class="string">'sublevel'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  before(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'sublevel before'</span>)</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  after(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'sublevel after'</span>)</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  beforeEach(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'sublevel beforeEach'</span>)</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  afterEach(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'sublevel afterEach'</span>)</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'test1'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'sublevel test1'</span>)</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'test2'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'sublevel test2'</span>)</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> it(<span class="string">'test2'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'top test2'</span>)</span><br><span class="line"></span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">  top</span><br><span class="line">top before</span><br><span class="line">top beforeEach</span><br><span class="line">top test1</span><br><span class="line">    √ test1</span><br><span class="line">top afterEach</span><br><span class="line">top beforeEach</span><br><span class="line">top test2</span><br><span class="line">    √ test2</span><br><span class="line">top afterEach</span><br><span class="line">    sublevel</span><br><span class="line">sublevel before</span><br><span class="line">top beforeEach</span><br><span class="line">sublevel beforeEach</span><br><span class="line">sublevel test1</span><br><span class="line">      √ test1</span><br><span class="line">sublevel afterEach</span><br><span class="line">top afterEach</span><br><span class="line">top beforeEach</span><br><span class="line">sublevel beforeEach</span><br><span class="line">sublevel test2</span><br><span class="line">      √ test2</span><br><span class="line">sublevel afterEach</span><br><span class="line">top afterEach</span><br><span class="line">sublevel after</span><br><span class="line">top after</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  4 passing (12ms)</span><br></pre></td></tr></table></figure><h4 id="取反-再取反"><a href="#取反-再取反" class="headerlink" title="~~ 取反 再取反"></a><img src="http://l.yumud.com/note_.png" alt>~~ 取反 再取反</h4><p><del>~  不超过32位时可以用 ~</del> 达到Math.floor的效果</p><p><del>按位取反，</del>变回原操作数，但是省略了小数部分</p><h4 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a><img src="http://l.yumud.com/note_.png" alt>桶排序</h4><p>先找出桶中最大值最小值max min</p><p>按照桶的个数num，给5</p><p>桶的大小 size=(max-min+1)/num</p><p>桶 buckets = new Array(num*2)</p><p>初始化桶buckets[i]=[]</p><p>分配数据到桶（按照数据值的分布来匹配，(arr[i]-min)/size）</p><p>对每个桶进行排序</p><h4 id="process-argv"><a href="#process-argv" class="headerlink" title="process.argv"></a><img src="http://l.yumud.com/note_.png" alt>process.argv</h4><p>process.argv[0] 启动node.js进程的可执行文件的所在绝对路径</p><p>process.argv[1] 正在执行的js文件的路径</p><p>其他元素将是任何其他命令行的参数</p><p><img src="http://l.yumud.com/record_process_argv.png" alt="eg"></p><h4 id="git提交冲突"><a href="#git提交冲突" class="headerlink" title="git提交冲突"></a><img src="http://l.yumud.com/note_.png" alt>git提交冲突</h4><h5 id="git提交冲突-1"><a href="#git提交冲突-1" class="headerlink" title="git提交冲突"></a>git提交冲突</h5><p>先切一个分支feature</p><p>操作操作</p><p>git add .</p><p>git commit -m “操作操作”</p><p>git push origin master=&gt;报错，冲突</p><p>git co dev</p><p>git pull </p><p>git co feature </p><p>git rebase dev  </p><p>手动解决冲突</p><p>git co dev</p><p>git merge –no-ff feature</p><p>git push origin dev</p><p>最后删掉这个分支feature</p><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a><img src="http://l.yumud.com/note_.png" alt>二分查找</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binarySearch</span>(<span class="params">arr,target</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> start =<span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> end=arr.length<span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">while</span>(start&lt;=end)&#123;</span><br><span class="line">      <span class="keyword">let</span> mid=<span class="built_in">parseInt</span>(start+(end-start)/<span class="number">2</span>)</span><br><span class="line">      <span class="keyword">if</span>(target==arr[mid])</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">return</span> mid</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;arr[mid])&#123;</span><br><span class="line">          start=mid+<span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">          end=mid<span class="number">-1</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;点击页面左下方，在页面右边显示文章目录。&lt;/p&gt;
&lt;h4 id=&quot;文件权限&quot;&gt;&lt;a href=&quot;#文件权限&quot; class=&quot;headerlink&quot; title=&quot;文件权限&quot;&gt;&lt;/a&gt;&lt;img src=&quot;http://l.yumud.com
      
    
    </summary>
    
    
      <category term="A coin a day" scheme="/categories/A-coin-a-day/"/>
    
    
  </entry>
  
  <entry>
    <title>用户访问浏览器全过程</title>
    <link href="/2019/09/24/%E7%94%A8%E6%88%B7%E8%AE%BF%E9%97%AE%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%A8%E8%BF%87%E7%A8%8B/"/>
    <id>/2019/09/24/用户访问浏览器全过程/</id>
    <published>2019-09-24T05:45:00.000Z</published>
    <updated>2019-11-08T08:02:25.900Z</updated>
    
    <content type="html"><![CDATA[<p>详细过程： <a href="https://www.cnblogs.com/yihr/p/9720715.html" target="_blank" rel="noopener">https://www.cnblogs.com/yihr/p/9720715.html</a><br>1.用户输入要访问的域名  <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a><br>2.浏览器请求解析DNS服务器。把域名<a href="http://www.baidu.com转换成web服务器的ip地址" target="_blank" rel="noopener">www.baidu.com转换成web服务器的ip地址</a><br>3.浏览器从访问的ip地址中解析出默认的端口号 80<br>4.浏览器通过解析后得到的ip地址和端口号与web服务器建立一条TCP连接通道<br>  三次握手<br>5.建立TCP连接之后，浏览器向web服务器发送一条HTTP请求报文<br>6.web服务器响应并读取浏览器的请求信息，然后返回一条HTTP响应报文<br>7.web服务器关闭HTTP连接，关闭TCP连接，web服务器显示访问的网站内容到屏幕上<br>  四次挥手</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;详细过程： &lt;a href=&quot;https://www.cnblogs.com/yihr/p/9720715.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/yihr/p/9720715.html&lt;/a
      
    
    </summary>
    
    
      <category term="面试" scheme="/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>egg单元测试</title>
    <link href="/2019/09/19/egg-e5-8d-95-e5-85-83-e6-b5-8b-e8-af-95/"/>
    <id>/2019/09/19/egg-e5-8d-95-e5-85-83-e6-b5-8b-e8-af-95/</id>
    <published>2019-09-19T06:34:38.000Z</published>
    <updated>2019-11-07T09:19:03.388Z</updated>
    
    <content type="html"><![CDATA[<p>github地址： <a href="https://github.com/thesecondlight/egg_mysql" target="_blank" rel="noopener">https://github.com/thesecondlight/egg_mysql</a> egg连接数据库，其中index.js是一个简单的单元测试文件。<a id="more"></a></p><p>首先在controller中新建文件index.js</p><pre><code>&apos;use strict&apos;;const Controller = require(&apos;egg&apos;).Controller;class indexController extends Controller {  async index() {    this.ctx.body = &apos;hi,egg&apos;;  }}module.exports = indexController;</code></pre><p>service中新建index.js</p><pre><code>&apos;use strict&apos;;const Service = require(&apos;egg&apos;).Service;class UserService extends Service {  async get(name) {    return name;  }}module.exports = UserService;</code></pre><p>测试文件目录test,与app文件夹同一级</p><p>test/app/controller/index.test.js （命名规则：测试文件名.test.js） 对controller层以及router层的测试</p><pre><code>&apos;use strict&apos;;const { app, assert } = require(&apos;egg-mock/bootstrap&apos;);describe(&apos;test/app/controller/index.test.js&apos;, () =&gt; {  it(&apos;should GET /&apos;, () =&gt; {    return app.httpRequest()      .get(&apos;/index&apos;)  //router访问路径      .expect(&apos;hi,egg&apos;)   //希望返回的结果      .expect(200);       //希望返回的状态  });  it(&apos;should send multi requests&apos;, async () =&gt; {    await app.httpRequest()      .get(&apos;/index&apos;)      .expect(&apos;hi,egg&apos;)      .expect(200);    const result = await app.httpRequest()      .get(&apos;/index&apos;)      .expect(200)      .expect(&apos;hi,egg&apos;);    assert(result.status === 200);  });});</code></pre><p>运行npm test</p><p><img src="http://l.yumud.com/image-9-31.png" alt></p><p>可能会报错，因为你router路径的不规范，访问了<strong>不存在的路径</strong>，或者<strong>无效变量</strong>的存在，看错误提示，进行相应的修改即可。</p><p>test/app/service/index.test.js</p><pre><code>&apos;use strict&apos;;const { app, assert } = require(&apos;egg-mock/bootstrap&apos;);describe(&apos;get()&apos;, () =&gt; {  it(&apos;should get exists user&apos;, async () =&gt; {    const ctx = app.mockContext();  //创建ctx    const user = await ctx.service.index.get(&apos;yumu&apos;);   //通过ctx访问到service.user    assert(user === &apos;yumu&apos;);  });});</code></pre><p>运行npm test</p><p><img src="http://l.yumud.com/image-9-32.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;github地址： &lt;a href=&quot;https://github.com/thesecondlight/egg_mysql&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/thesecondlight/egg_mysql&lt;/a&gt; egg连接数据库，其中index.js是一个简单的单元测试文件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="嗨~egg" scheme="/categories/%E5%97%A8-egg/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo添加valine评论</title>
    <link href="/2019/09/16/hexo-e6-b7-bb-e5-8a-a0valine-e8-af-84-e8-ae-ba/"/>
    <id>/2019/09/16/hexo-e6-b7-bb-e5-8a-a0valine-e8-af-84-e8-ae-ba/</id>
    <published>2019-09-16T02:02:00.000Z</published>
    <updated>2019-11-07T09:18:08.981Z</updated>
    
    <content type="html"><![CDATA[<p>首先在<a href="https://leancloud.cn/dashboard/login.html#/signin" target="_blank" rel="noopener">leancloud</a>中注册，创建一个新应用，在设置=&gt;应用key中查看appid和appkey，</p><p>在设置=&gt;安全中心 把博客地址添加到安全中心，保证数据调用的安全性。</p><a id="more"></a><p>在主题中(eg：我的是yilia主题) \themes\yilia\_config.yml 中添加</p><pre><code>valine:  enable: true appid: gG1wfFA4yGQarTbT4EB44wR2-gzGzoHsz appkey: SvnF4k7cxYtmz1HDwaJe0Lzq verify: false #验证码 notify: true #评论回复提醒 avatar: robohash #一种具有不同颜色、面部等的机器人 placeholder: 小姐姐，讲话呀 pageSize: 10 guest_info: nick,mails </code></pre><p>在 \themes\yilia\layout_partial\post中新建一个valine.ejs</p><pre><code>&lt;div id=&quot;vcomment&quot; class=&quot;comment&quot;&gt;&lt;/div&gt; &lt;script src=&quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;//unpkg.com/valine/dist/Valine.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;   var notify = &apos;&lt;%= theme.valine.notify %&gt;&apos; == true ? true : false;   var verify = &apos;&lt;%= theme.valine.verify %&gt;&apos; == true ? true : false;    window.onload = function() {        new Valine({            el: &apos;.comment&apos;,            notify: notify,            verify: verify,            app_id: &quot;&lt;%= theme.valine.appid %&gt;&quot;,            app_key: &quot;&lt;%= theme.valine.appkey %&gt;&quot;,            placeholder: &quot;&lt;%= theme.valine.placeholder %&gt;&quot;,            avatar:&quot;&lt;%= theme.valine.avatar %&gt;&quot;        });    }&lt;/script&gt;</code></pre><p>添加评论头像：</p><p>非自定义头像默认值</p><p><img src="http://l.yumud.com/image-9-30.png" alt></p><p>想要自定义，就去Gravatar注册登录，上传，使用自己的图片</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先在&lt;a href=&quot;https://leancloud.cn/dashboard/login.html#/signin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leancloud&lt;/a&gt;中注册，创建一个新应用，在设置=&amp;gt;应用key中查看appid和appkey，&lt;/p&gt;
&lt;p&gt;在设置=&amp;gt;安全中心 把博客地址添加到安全中心，保证数据调用的安全性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="芝士就是力量！" scheme="/categories/%E8%8A%9D%E5%A3%AB%E5%B0%B1%E6%98%AF%E5%8A%9B%E9%87%8F%EF%BC%81/"/>
    
    
  </entry>
  
  <entry>
    <title>pta -1039 到底买不买</title>
    <link href="/2019/09/12/pta-1039-e5-88-b0-e5-ba-95-e4-b9-b0-e4-b8-8d-e4-b9-b0/"/>
    <id>/2019/09/12/pta-1039-e5-88-b0-e5-ba-95-e4-b9-b0-e4-b8-8d-e4-b9-b0/</id>
    <published>2019-09-12T01:48:59.000Z</published>
    <updated>2019-11-07T09:17:06.828Z</updated>
    
    <content type="html"><![CDATA[<p>题目：小红买珠子，店家给出一串珠子，小红给出一串自己想要颜色的珠子；判断店家的珠子是否满足小红的要求，如果颜色不够，输出“No *” *为缺几颗；如果颜色足够，输出“Yes *” *为多余的珠子颗数。</p><a id="more"></a><p>我的想法是，搞两个数组A,B存这两串珠子，然后判断B中的数据是否在A中都能找到，找不到cout++,全找到了（还要考虑颜色都有，但是个数是否匹配，就得再用一个数组，存匹配珠子的个数），A数组长度-B数组长度，得出多余的珠子。</p><p>百度看到网友转的网友的思路：</p><p><img src="http://l.yumud.com/image-9-28.png" alt></p><p><img src="http://l.yumud.com/image-9-29.png" alt></p><p>这种思路，解法过分优秀了….</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目：小红买珠子，店家给出一串珠子，小红给出一串自己想要颜色的珠子；判断店家的珠子是否满足小红的要求，如果颜色不够，输出“No *” *为缺几颗；如果颜色足够，输出“Yes *” *为多余的珠子颗数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="A coin a day" scheme="/categories/A-coin-a-day/"/>
    
    
  </entry>
  
  <entry>
    <title>pta -1009 说反话 pta -1021 个位数统计</title>
    <link href="/2019/09/11/pta-1009-e8-af-b4-e5-8f-8d-e8-af-9d/"/>
    <id>/2019/09/11/pta-1009-e8-af-b4-e5-8f-8d-e8-af-9d/</id>
    <published>2019-09-11T07:45:16.000Z</published>
    <updated>2019-11-07T09:17:09.761Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1009</strong>说反话题目：hello peach=&gt;peach hello</p><p>用do while而不是while是因为会把“h”吃掉 hello peach=&gt;peach ello</p><a id="more"></a><p><img src="http://l.yumud.com/image-9-26.png" alt></p><p><strong>1021</strong>个位数统计题目：统计一个整数中，每种不同的数字出现的次数。（按次数的升序输出）</p><p>输入：10021</p><p>输出：</p><p>0:2</p><p>1:2</p><p>2:1</p><p><img src="http://l.yumud.com/image-9-27.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;1009&lt;/strong&gt;说反话题目：hello peach=&amp;gt;peach hello&lt;/p&gt;
&lt;p&gt;用do while而不是while是因为会把“h”吃掉 hello peach=&amp;gt;peach ello&lt;/p&gt;
    
    </summary>
    
    
      <category term="A coin a day" scheme="/categories/A-coin-a-day/"/>
    
    
  </entry>
  
  <entry>
    <title>js字符串倒序(两种反转)</title>
    <link href="/2019/09/11/js-e5-ad-97-e7-ac-a6-e4-b8-b2-e5-80-92-e5-ba-8f-e4-b8-a4-e7-a7-8d-e5-8f-8d-e8-bd-ac/"/>
    <id>/2019/09/11/js-e5-ad-97-e7-ac-a6-e4-b8-b2-e5-80-92-e5-ba-8f-e4-b8-a4-e7-a7-8d-e5-8f-8d-e8-bd-ac/</id>
    <published>2019-09-11T07:06:20.000Z</published>
    <updated>2019-11-07T09:17:56.786Z</updated>
    
    <content type="html"><![CDATA[<p>var str=”hello peach”</p><p>全部(字母)反转 str.split(‘’).reverse().join(‘’) *引号内无空格，每一个字符都会被分割</p><p>单词反转 str.split(‘ ‘).reverse().join(‘ ‘) <em>引号里面有空格</em></p><p><img src="http://l.yumud.com/image-9-25.png" alt></p><p>注意：split的用法，split()用于将一个字符串分割成字符串数组。</p><p>reverse()数组反转，然后，Array.join转换为字符串（与String.split()方法正相反）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;var str=”hello peach”&lt;/p&gt;
&lt;p&gt;全部(字母)反转 str.split(‘’).reverse().join(‘’) *引号内无空格，每一个字符都会被分割&lt;/p&gt;
&lt;p&gt;单词反转 str.split(‘ ‘).reverse().join(‘ ‘) 
      
    
    </summary>
    
    
      <category term="js" scheme="/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>wordpress 在首页不显示某些分类下的文章</title>
    <link href="/2019/09/11/wordpress-e5-9c-a8-e9-a6-96-e9-a1-b5-e4-b8-8d-e6-98-be-e7-a4-ba-e6-9f-90-e4-ba-9b-e5-88-86-e7-b1-bb-e4-b8-8b-e7-9a-84-e6-96-87-e7-ab-a0/"/>
    <id>/2019/09/11/wordpress-e5-9c-a8-e9-a6-96-e9-a1-b5-e4-b8-8d-e6-98-be-e7-a4-ba-e6-9f-90-e4-ba-9b-e5-88-86-e7-b1-bb-e4-b8-8b-e7-9a-84-e6-96-87-e7-ab-a0/</id>
    <published>2019-09-11T06:44:46.000Z</published>
    <updated>2019-11-07T09:16:50.022Z</updated>
    
    <content type="html"><![CDATA[<p>在主题下的functions.php里面添加这一段代码，好评！</p><p><strong>路径=&gt;xampp/htdocs/wp-content/themes/你使用的主题/function.php</strong></p><a id="more"></a><p>function exclude_category_home( $query ) {</p><p>if ( $query-&gt;is_home ) {</p><p>$query-&gt;set( ‘cat’, ‘<strong>-4,-8</strong>‘ ); //你要排除的分类ID,就是带-号</p><p>}</p><p>return $query;</p><p>}</p><p>add_filter( ‘pre_get_posts’, ‘exclude_category_home’ );</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在主题下的functions.php里面添加这一段代码，好评！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;路径=&amp;gt;xampp/htdocs/wp-content/themes/你使用的主题/function.php&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="芝士就是力量！" scheme="/categories/%E8%8A%9D%E5%A3%AB%E5%B0%B1%E6%98%AF%E5%8A%9B%E9%87%8F%EF%BC%81/"/>
    
    
  </entry>
  
  <entry>
    <title>pta -1093 字符串A+B</title>
    <link href="/2019/09/11/pta-1093-e5-ad-97-e7-ac-a6-e4-b8-b2ab/"/>
    <id>/2019/09/11/pta-1093-e5-ad-97-e7-ac-a6-e4-b8-b2ab/</id>
    <published>2019-09-11T03:11:18.000Z</published>
    <updated>2019-11-07T09:17:03.822Z</updated>
    
    <content type="html"><![CDATA[<p>题目：给定两个字符串A,B，输出A+B的并集（要求：先输出A，再输出B，但是重复的元素必须剔除）</p><p>思路：A中重复的字符去掉，B中重复的字符去掉，B中存在A的字符去掉。for循环把B中和A重复的字符置为0，然后输出时不输出为0的字符，实施发现麻烦，根本不是个事儿，百度发现自己解决这个问题的想法有很大的问题。</p><a id="more"></a><p>百度：两个字符串(A,B)连接放在C中，初始化一个全为0的数组，把C中的字符放进去过得字符都+1或置1，判断是否为0，加入加入。</p><p><img src="http://l.yumud.com/image-9-23.png" alt></p><p>把公司电脑vscode c的环境配置好了，所以不用dev写了，dev晚上写代码闪瞎眼。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目：给定两个字符串A,B，输出A+B的并集（要求：先输出A，再输出B，但是重复的元素必须剔除）&lt;/p&gt;
&lt;p&gt;思路：A中重复的字符去掉，B中重复的字符去掉，B中存在A的字符去掉。for循环把B中和A重复的字符置为0，然后输出时不输出为0的字符，实施发现麻烦，根本不是个事儿，百度发现自己解决这个问题的想法有很大的问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="A coin a day" scheme="/categories/A-coin-a-day/"/>
    
    
  </entry>
  
  <entry>
    <title>[校内互助]小程序--素材记录</title>
    <link href="/2019/09/10/e6-a0-a1-e5-86-85-e4-ba-92-e5-8a-a9-e7-b4-a0-e6-9d-90-e8-ae-b0-e5-bd-95/"/>
    <id>/2019/09/10/e6-a0-a1-e5-86-85-e4-ba-92-e5-8a-a9-e7-b4-a0-e6-9d-90-e8-ae-b0-e5-bd-95/</id>
    <published>2019-09-10T08:01:59.000Z</published>
    <updated>2019-11-08T08:03:54.144Z</updated>
    
    <content type="html"><![CDATA[<p>1.左滑接单 get [2019-9-10]</p><p>2.不成熟的发单页面 [2019-9-10]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.左滑接单 get [2019-9-10]&lt;/p&gt;
&lt;p&gt;2.不成熟的发单页面 [2019-9-10]&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Demo" scheme="/categories/Demo/"/>
    
    
  </entry>
  
  <entry>
    <title>pta -1007素数对猜想</title>
    <link href="/2019/09/10/pta-1007-e7-b4-a0-e6-95-b0-e5-af-b9-e7-8c-9c-e6-83-b3/"/>
    <id>/2019/09/10/pta-1007-e7-b4-a0-e6-95-b0-e5-af-b9-e7-8c-9c-e6-83-b3/</id>
    <published>2019-09-10T06:42:05.000Z</published>
    <updated>2019-11-07T09:17:12.147Z</updated>
    
    <content type="html"><![CDATA[<p>dev运行cpp文件报错，什么请求被拒绝，然后百度说杀毒软件的问题，打开任务管理器，没发现杀毒软件，但是把一个<strong>隐藏</strong>的已经运行的这个项目的<strong>exe文件结束</strong>了，问题解决。</p><p>题目：两个相邻素数差2即是一个素数对。</p><a id="more"></a><p>思路：先求出n之内的素数，然后，判断一下相邻素数之间差值为2的，count++;</p><p><img src="http://l.yumud.com/image-20.png" alt></p><p><strong>这是最后的结果</strong></p><p>但是我开始不是这样写的，我的是这样，这个判定为最后一个测试点运行超时，百度说，在循环判断那里，sqrt(n)减少判断的数量就好了，可是我加了之后，素数少了一半….懵…</p><p><img src="http://l.yumud.com/image-9-21.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;dev运行cpp文件报错，什么请求被拒绝，然后百度说杀毒软件的问题，打开任务管理器，没发现杀毒软件，但是把一个&lt;strong&gt;隐藏&lt;/strong&gt;的已经运行的这个项目的&lt;strong&gt;exe文件结束&lt;/strong&gt;了，问题解决。&lt;/p&gt;
&lt;p&gt;题目：两个相邻素数差2即是一个素数对。&lt;/p&gt;
    
    </summary>
    
    
      <category term="A coin a day" scheme="/categories/A-coin-a-day/"/>
    
    
  </entry>
  
  <entry>
    <title>pta -1004成绩排名</title>
    <link href="/2019/09/10/pta-1001-e6-88-90-e7-bb-a9-e6-8e-92-e5-90-8d/"/>
    <id>/2019/09/10/pta-1001-e6-88-90-e7-bb-a9-e6-8e-92-e5-90-8d/</id>
    <published>2019-09-10T02:39:09.000Z</published>
    <updated>2019-11-07T09:17:20.379Z</updated>
    
    <content type="html"><![CDATA[<p>题目： 读入 <em>n</em>（&gt;0）名学生的<strong>姓名、学号、成绩</strong>，分别输出<strong>成绩最高</strong>和<strong>成绩最低</strong>学生的姓名和学号。</p><a id="more"></a><p>挺好写的，可是我写的很幼稚，写了三个数组…</p><p><img src="http://l.yumud.com/image-9-18.png" alt></p><p>然后百度别人写的：</p><p>用结构体数组….一下子简洁了…又写了一下</p><p><img src="http://l.yumud.com/image-9-19.png" alt></p><p>好看~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目： 读入 &lt;em&gt;n&lt;/em&gt;（&amp;gt;0）名学生的&lt;strong&gt;姓名、学号、成绩&lt;/strong&gt;，分别输出&lt;strong&gt;成绩最高&lt;/strong&gt;和&lt;strong&gt;成绩最低&lt;/strong&gt;学生的姓名和学号。&lt;/p&gt;
    
    </summary>
    
    
      <category term="A coin a day" scheme="/categories/A-coin-a-day/"/>
    
    
  </entry>
  
  <entry>
    <title>WeUI的初步使用--安装引入</title>
    <link href="/2019/09/09/weui-e7-9a-84-e4-bd-bf-e7-94-a8/"/>
    <id>/2019/09/09/weui-e7-9a-84-e4-bd-bf-e7-94-a8/</id>
    <published>2019-09-09T08:27:35.000Z</published>
    <updated>2019-11-07T09:16:52.932Z</updated>
    
    <content type="html"><![CDATA[<p>安装：打开<a href="https://github.com/weui/weui-wxss/" target="_blank" rel="noopener">https://github.com/weui/weui-wxss/</a> git clone文件</p><p><img src="http://l.yumud.com/image-9-15.png" alt></p><p>如上图，把这个文件复制一份到你根目录下，在全局app.wxss中引用weui.wxss <strong>@import ‘weui.wxss’;</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;安装：打开&lt;a href=&quot;https://github.com/weui/weui-wxss/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/weui/weui-wxss/&lt;/a&gt; git clone文件&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="小程序" scheme="/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>pta -1003我要通过！</title>
    <link href="/2019/09/09/pta-1003-e6-88-91-e8-a6-81-e9-80-9a-e8-bf-87-ef-bc-81/"/>
    <id>/2019/09/09/pta-1003-e6-88-91-e8-a6-81-e9-80-9a-e8-bf-87-ef-bc-81/</id>
    <published>2019-09-09T08:06:16.000Z</published>
    <updated>2019-11-07T09:17:14.908Z</updated>
    
    <content type="html"><![CDATA[<p>读了一遍，题目我竟然没看懂…</p><p><img src="http://l.yumud.com/image-9-14.png" alt></p><p><strong>题目</strong></p><a id="more"></a><p>我的理解：只能存在 P A T，如果存在其他字母必须为空字符或者A进行填充。</p><p>思路：判断这个字符串中是否含有其他字母，有就否决；必须由A或空字符填充。</p><p>可是怎么写，又进行不动了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;读了一遍，题目我竟然没看懂…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://l.yumud.com/image-9-14.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题目&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="A coin a day" scheme="/categories/A-coin-a-day/"/>
    
    
  </entry>
  
  <entry>
    <title>冒泡排序</title>
    <link href="/2019/09/07/e5-86-92-e6-b3-a1-e6-8e-92-e5-ba-8f/"/>
    <id>/2019/09/07/e5-86-92-e6-b3-a1-e6-8e-92-e5-ba-8f/</id>
    <published>2019-09-07T10:21:50.000Z</published>
    <updated>2019-11-07T09:16:27.899Z</updated>
    
    <content type="html"><![CDATA[<p>从最基础的冒泡排序开始。</p><p>[等一下，回家写]–废话.jpg</p><a id="more"></a><p>[然而我回家也没写，我填了一下之前的坑] –废话.jpg</p><p>[然而今天也没有刷题，我躺着敲工作反思，电脑很热。确切的说，不是今天没有刷题，现在已经凌晨了] –废话.jpg</p><p>————————–正经.jpg ————————–</p><p>相邻两个数比较一下，然后小(大)放在前面，例如1852</p><p>18不需要换 1852</p><p>85=&gt;58 1582</p><p>82=&gt;28 1528(最大的已经到了最后)</p><p>152</p><p>15 不需要 152</p><p>52=&gt;25 125</p><p><strong>1258</strong>完成</p><p>就是个嵌套的for循环，然后temp中间变量，把两个值换一下。假设有n个数，就要走n-1步，第i步中需要n-i次比较</p><p>粘代码</p><p>不，我用c还是java写，同学让我学c++，那这样两个就都会了，我感觉有点不对劲，但还是先用C++写吧</p><p><img src="http://l.yumud.com/image-13.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从最基础的冒泡排序开始。&lt;/p&gt;
&lt;p&gt;[等一下，回家写]–废话.jpg&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>CC卡路里 耶</title>
    <link href="/2019/09/07/cc-e5-8d-a1-e8-b7-af-e9-87-8c-e8-80-b6/"/>
    <id>/2019/09/07/cc-e5-8d-a1-e8-b7-af-e9-87-8c-e8-80-b6/</id>
    <published>2019-09-07T06:42:35.000Z</published>
    <updated>2019-11-08T08:03:02.437Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://l.yumud.com/gh_8490c442bd64_258-1-1.jpg" alt></p><a id="more"></a><p>微信扫一扫查看，或搜索”CC卡路里”查看。</p><p>主要功能：查询食物热量，记录每日饮食，BMI身体质量测试。</p><p><strong>优化</strong>：</p><p>△加数据分析，每个月或15天，对用户记录的饮食热量进行分析=&gt;但是，没有达到记录量怎么办，目前用户不多，稳定用户更少，这样做出来的数据分析不为准=&gt;没有达到记录量，弹出“记录过少，无法生成健康账单”</p><p>△ 查询页面，很严重，部分手机左滑出现1/3空白；部分手机虽然进行左滑操作，页面不出现1/3空白，但是下方会出现横向滑动条。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://l.yumud.com/gh_8490c442bd64_258-1-1.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Demo" scheme="/categories/Demo/"/>
    
    
  </entry>
  
  <entry>
    <title>pta -1002写出这个数[初级]</title>
    <link href="/2019/09/07/pta-1002-e5-86-99-e5-87-ba-e8-bf-99-e4-b8-aa-e6-95-b0/"/>
    <id>/2019/09/07/pta-1002-e5-86-99-e5-87-ba-e8-bf-99-e4-b8-aa-e6-95-b0/</id>
    <published>2019-09-07T01:56:59.000Z</published>
    <updated>2019-11-07T09:17:17.890Z</updated>
    
    <content type="html"><![CDATA[<p>题目： <strong>读入一个正整数 **_</strong>n<strong>_</strong>，计算其各位数字之和，用汉语拼音写出和的每一位数字。**</p><a id="more"></a><p>思路=&gt;%10 /10把每一位数字存起来，写个switch case包函数里面用来判断每一位数字是什么字母</p><p>我实施了一半，写不出来</p><p>百度：把对应的字母存在一个二维数组中，%10 /10操作</p><p><img src="http://l.yumud.com/image-9-9.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目： &lt;strong&gt;读入一个正整数 **_&lt;/strong&gt;n&lt;strong&gt;_&lt;/strong&gt;，计算其各位数字之和，用汉语拼音写出和的每一位数字。**&lt;/p&gt;
    
    </summary>
    
    
      <category term="A coin a day" scheme="/categories/A-coin-a-day/"/>
    
    
  </entry>
  
  <entry>
    <title>pta -1001害死人不偿命的(3n+1)猜想[初级]</title>
    <link href="/2019/09/07/pta-1001-e5-ae-b3-e6-ad-bb-e4-ba-ba-e4-b8-8d-e5-81-bf-e5-91-bd-e7-9a-843n1-e7-8c-9c-e6-83-b3/"/>
    <id>/2019/09/07/pta-1001-e5-ae-b3-e6-ad-bb-e4-ba-ba-e4-b8-8d-e5-81-bf-e5-91-bd-e7-9a-843n1-e7-8c-9c-e6-83-b3/</id>
    <published>2019-09-07T01:53:10.000Z</published>
    <updated>2019-11-07T09:17:23.811Z</updated>
    
    <content type="html"><![CDATA[<p>题目： <strong>对给定的任一不超过 1000 的正整数 **_</strong>n<strong>_</strong>，简单地数一下，需要多少步（砍几下）才能得到 <strong>_</strong>n<strong>_</strong>=1？** [对3(n+1)猜想感兴趣的自行百度哦]</p><a id="more"></a><p>超简单，但是我在scanf那里加了<strong>\n</strong>，然后编译执行，输入数据，就卡住了</p><p>百度：scanf中的\n不是指换行，而是忽略一切空白符，直到下一个空白符出现</p><p><img src="http://l.yumud.com/image-8.png" alt></p><p>真的是敲代码就是个白痴–</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目： &lt;strong&gt;对给定的任一不超过 1000 的正整数 **_&lt;/strong&gt;n&lt;strong&gt;_&lt;/strong&gt;，简单地数一下，需要多少步（砍几下）才能得到 &lt;strong&gt;_&lt;/strong&gt;n&lt;strong&gt;_&lt;/strong&gt;=1？** [对3(n+1)猜想感兴趣的自行百度哦]&lt;/p&gt;
    
    </summary>
    
    
      <category term="A coin a day" scheme="/categories/A-coin-a-day/"/>
    
    
  </entry>
  
  <entry>
    <title>前言【一天一块钱】</title>
    <link href="/2019/09/07/e5-89-8d-e8-a8-80/"/>
    <id>/2019/09/07/e5-89-8d-e8-a8-80/</id>
    <published>2019-09-07T01:47:10.000Z</published>
    <updated>2019-11-07T09:16:34.739Z</updated>
    
    <content type="html"><![CDATA[<p>大一大二坚持每天刷一题，然后考了三次二级C语言，没有过哈哈哈。</p><p>之前在CSDN记了几次，发现效果不大，然后就只是单纯在电脑上刷题没有记录，现在要重新开始了，每天一题！我要考证！[真的是一个敲代码的白痴–]</p><p>等我的服务器稳定了，或者直接搬家到github，我再整一个目录吧(题目跳着做的)，现在笔记里面图片地址，跳转链接什么的，一搬家，全得换，啊呀。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大一大二坚持每天刷一题，然后考了三次二级C语言，没有过哈哈哈。&lt;/p&gt;
&lt;p&gt;之前在CSDN记了几次，发现效果不大，然后就只是单纯在电脑上刷题没有记录，现在要重新开始了，每天一题！我要考证！[真的是一个敲代码的白痴–]&lt;/p&gt;
&lt;p&gt;等我的服务器稳定了，或者直接搬家到git
      
    
    </summary>
    
    
      <category term="A coin a day" scheme="/categories/A-coin-a-day/"/>
    
    
  </entry>
  
  <entry>
    <title>【搬家二】--wordpress搬github+hexo[又：github+hexo建站]</title>
    <link href="/2019/09/06/e3-80-90-e6-90-ac-e5-ae-b6-e4-ba-8c-e3-80-91-wordpress-e6-90-acgithubhexo/"/>
    <id>/2019/09/06/e3-80-90-e6-90-ac-e5-ae-b6-e4-ba-8c-e3-80-91-wordpress-e6-90-acgithubhexo/</id>
    <published>2019-09-06T08:09:03.000Z</published>
    <updated>2019-11-07T09:16:12.438Z</updated>
    
    <content type="html"><![CDATA[<p>三个月服务器快到期了hh，之前冲动消费买了一年的，啥也没干，一年过去了，这次三个月满满当当，过得可真快啊</p><p>搬家搬家</p><p><strong>1.创建仓库</strong></p><a id="more"></a><p>在github里创建一个<strong>username.github.io</strong>的仓库 [<strong>username</strong>就是你github的用户名]，创建完，就可以通过<strong>username.github.io</strong> 访问你的网站了</p><p><strong>2.绑定域名</strong>[你开心就绑定]</p><p>买域名，备案，解析，添加</p><p><img src="http://l.yumud.com/image-10-1024x180.png" alt></p><p>ip，就是你在自己电脑上ping一下username.github.io，get!</p><p>然后在github中那个项目下新建一个CNAME的文件(无后缀),里面写你的域名。</p><p><strong>3.配置SSH key</strong>[差不多就这样，看不懂百度]</p><pre><code>ssh-keygen -t rsa -C &quot;邮件地址&quot;在本机生成一个.ssh\id_rsa.pub文件，把里面的东西复制到github设置中,SSH and GPG keys 添加即可。</code></pre><p><strong>4.测试是否成功</strong></p><p>ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a></p><p>就是输入这个，一个字母也别改=&gt;</p><p><img src="http://l.yumud.com/image-11.png" alt></p><p>成功</p><p>-------------------------------------- 开始搞hexo ————————————–</p><p>安装 <strong>npm install -g hexo</strong></p><p>认真新建一个文件夹，初始化 <strong>hexo init</strong></p><p><strong>hexo g</strong> //生成</p><p><strong>hexo s</strong> //启动服务</p><p>原始主题不好看，可以去官网看一下 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></p><p>改成你新下载的主题:</p><p>修改<code>_config.yml</code>中的<code>theme: landscape</code>改为<code>theme: 新主题名</code>，然后重新执行<code>hexo g</code>来重新生成。</p><p>-------------------------------------- 上传到github————————————–</p><p>修改_config.xml</p><p><img src="http://l.yumud.com/image-12.png" alt></p><p>deploy这部分，记得改成你自己的名字</p><p>git bash中直接执行hexo d，</p><p>如果报错，在git bash中执行 <strong>npm install hexo-deployer-git –save</strong>，然后hexo d</p><p>——到此建站结束，要开始写文章了，不过我直接把我wordpress的导出，搞过来的</p><p><strong>迁移</strong></p><p>安装插件 <strong>npm install hexo-migrator-wordpress –save</strong></p><p>在wordpress仪表盘中导出数据，<strong>hexo migrate wordpress</strong> source为导出的文件路径———</p><p>在hexo<strong>新建</strong>写文章</p><p>hexo new <title> title为文章标题</title></p><p>新建的文件在/source/_posts路径下。双击打开编辑即可。（文件格式为.md）</p><p>很烦，我刚注意到，我的文件是都导过去了，可是<strong>图片</strong>地址是服务器下的，那我搬的这个家，差点儿落一半…=&gt;wp-content/uploads下的图片打个包拿出来，然后，然后只能在本地一张一张的换了…所以说这个github+hexo搭网站有好有坏吧，不如云+wordpress比较方便，可以随时写两篇文章，但是免费，这一点就很优秀了…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;三个月服务器快到期了hh，之前冲动消费买了一年的，啥也没干，一年过去了，这次三个月满满当当，过得可真快啊&lt;/p&gt;
&lt;p&gt;搬家搬家&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.创建仓库&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="芝士就是力量！" scheme="/categories/%E8%8A%9D%E5%A3%AB%E5%B0%B1%E6%98%AF%E5%8A%9B%E9%87%8F%EF%BC%81/"/>
    
    
  </entry>
  
</feed>
